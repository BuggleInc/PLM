* Objectifs
** TODO S'assurer que la procédure de mise en place de l'environnement de développement décrite [[https://github.com/MatthieuNICOLAS/play-with-dart/blob/master/README.md#getting-started][ici]] est complète.
** DONE Étudier comment déployer l'application au format standalone et la rendre facile d'utilisation
*** CANCEL Créer un jar de l'application [[https://www.playframework.com/documentation/2.4.x/ProductionDist#Using-the-SBT-assembly-plugin][à partir des instructions suivantes.]]
    SCHEDULED: <2014-12-01 lun.>
    - Lors de la création du jar, plusieurs erreurs surgissent:
    En effet, les librairies importées par Play Framework par défaut
    déclenchent un conflit puisqu'elles déclarent des classes avec le
    même nom.  Il est donc nécessaire de définir une [[https://github.com/sbt/sbt-assembly#merge-strategy][stratégie de résolution des conflits.]]
      - Tout d'abord,il faut remplacer /assemblyMergeStrategy/ de leur
        exemple par /mergeStrategy/ dans notre cas (doc pas à jour?)).
      - Utiliser /MergeStrategy.rename/ lève l'exception
        /Java.io.FileNotFoundException/. En effet, les fichiers en
        conflits sont renommés, et leur nouveau nom dépasse 255
        caractères.  Ceci empêche donc la création du jar.
      - Utiliser /MergeStrategy.last/ permet au build de
        passer. Cependant, la classe /play.core.server.NettyServer/
        n'est pas embarquée dans le jar, empêchant ainsi l'application
        de fonctionner.
      - Utiliser une combinaison de /MergeStrategy/ telle que:
        ~mergeStrategy in assembly := { 
case "META-INF/MANIFEST.MF" => MergeStrategy.rename 
case _ => MergeStrategy.first 
}~ 
        gènère aussi un jar ne fonctionnant pas car
        une dépendance est manquante.
*** DONE Créer une archive zip de l'application à partir [[https://www.playframework.com/documentation/2.4.x/ProductionDist#Using-the-dist-task][des instructions suivantes]]
    SCHEDULED: <2014-12-02 mar.> 
    - L'archive résultante possède deux binaires, un pour les
      environnements UNIX et un pour les environnements Windows.
**** DONE Vérifier que le binaire pour UNIX fonctionne correctement
     SCHEDULED: <2014-12-02 mar.>

**** DONE Vérifier que le script .bat fonctionne correctement
     SCHEDULED: <2014-12-02 mar.>
      
*** DONE Mettre en place une routine permettant de compiler les fichiers Dart en Javascript, rendant l'application compatible avec tous les navigateurs
    SCHEDULED: <2014-12-02 mar.> 
    - Dans Eclipse, le plugin Dart et son option /pub build/
      permettent de générer un dossier *build* contenant le code Dart
      ainsi que son équivalent Javascript.  Cependant, il est ensuite
      nécessaire de modifier les références vers les scripts pour
      qu'elles pointent vers ce nouveau dossier:
      - Soit nous mettons à jour les références côté client (fichiers
        HTML) pour tenir compte de ce changement,
      - Soit nous modifions le fichier /conf/routes.conf/ pour que ça
        soit le serveur qui redirige les requêtes des clients vers les
        bons fichiers.
    - Après plusieurs tests plus poussés, l'option /pub build/ ne
      fonctionne pas (plus?). En effet, lorsqu'on définit le template
      HTML d'un *Component* (élément basique d'*AngularDart*) dans un
      autre fichier que dans /component.dart/, /pub build/ échoue car
      il n'arrive pas à le localiser. Quant à la commande /dart2js -o
      main.dart.js main.dart/, elle fonctionne toujours et permet de
      générer directement les fichiers Javascript à l'emplacement
      souhaité.
**** DONE Modifier /build.sbt/ pour lancer la commande /dart2js -o main.dart.js main.dart/ avant de créer l'archive zip
     SCHEDULED: <2014-12-02 mar.>
    - J'ai rencontré des difficultés à modifier /build.sbt/ pour que
      les fichiers Dart soient compilés avant la création de
      l'archive. Je n'ai en effet pas trouvé comment configurer *sbt*
      pour ajouter l'exécution d'une commande shell lors du build.
    - J'ai donc créé un script shell se contentant de lancer les deux
      commandes à la suite et permettant ainsi de rendre l'application
      compatible avec tous les navigateurs et de l'exporter dans une
      archive zip.
**** CANCEL Voir si on peut facilement passer d'un fichier /routes.conf/ pour le développement à un fichier /routes.conf/ pour le déploiement
     SCHEDULED: <2014-12-02 mar.>
** DONE Instancier un objet PLM côté serveur
   SCHEDULED: <2014-12-03 mer.>
   - Plusieurs problèmes ont été rencontrés avant de réussir à
     instancier un objet PLM depuis un projet Play Framework.
     - Tout d'abord, le jar produit par PLM embarque pour plusieurs
       librairies, dont le *compilateur Scala*. Ceci provoque alors un
       doublon avec la configuration par défaut d'un projet *Play
       Framework*. Il a donc fallu retirer cette librairie du build de
       PLM.
     - Par défaut, Play Framework utilise la /version 2.11/ du
       compilateur Scala. Cette version est cependant incompatible
       avec PLM, qui est compilée à l'heure actuelle avec la /version
       2.10.5/ du compilateur. Pour permettre à l'application de
       fonctionner, il faut donc downgrader la version de scala
       utilisée en modifiant la valeur affectée à ~scalaVersion~ dans
       /build.sbt/.
** DONE Mettre en place un webservice RESTful permettant d'interagir avec PLM
   SCHEDULED: <2014-12-04 jeu.>
** DONE Ajouter pop-up au démarrage informant l'utilisateur que PLM conserve une trace de son activité suite au [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=772026][bug report suivant]]
   SCHEDULED: <2014-12-05 ven.>
** DONE Permettre aux utilisateurs de désactiver l'envoi de la trace de leur activité au repo central
   SCHEDULED: <2014-12-05 ven.>
** TODO Implémenter une page web incorporant un éditeur de code tel que [[http://ace.c9.io/#nav=about][Ace]] ou [[http://codemirror.net/][CodeMirror]] depuis Dart
   SCHEDULED: <2014-12-08 lun.>
** DONE Ajouter pop-up au démarrage informant l'utilisateur que PLM conserve une trace de son activité suite au [[https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=772026][bug report suivant]]
   SCHEDULED: <2014-12-05 ven.>
** DONE Permettre aux utilisateurs de désactiver l'envoi de la trace de leur activité au repo central
   SCHEDULED: <2014-12-05 ven.>
** DONE Implémenter une page web incorporant un éditeur de code tel que [[http://ace.c9.io/#nav=about][Ace]] ou [[http://codemirror.net/][CodeMirror]] depuis Dart
   SCHEDULED: <2014-12-08 lun.>
   - Création d'un /Component/ se chargeant des interactions entre
     Dart et Ace.
   - Mais avec AngularDart, un Component est inclus dans son
     propre *ShadowDom* ce qui empêche Ace de trouver l'élément à
     transformer en éditeur de code.
   - Possibilité de désactiver le ShadowDom en modifiant l'attribut ~useShadowDom~ du Component.
   - Hériter de *ShadowRootAware* permet d'écouter
     l'évènement *onShadowRoot* qui indique quand le DOM est chargé.
** TODO Modifier les messages concernant l'envoi de données au serveur
   - Actuellement, plusieurs messages sont affichés pour informer
     l'utilisateur que PLM est en train d'envoyer les données de son
     activité au serveur.
   - Ces messages apparaissent même si l'utilisateur a refusé de
     communiquer ses données, ce qui peut prêter à confusion.
   SCHEDULED: <2014-12-08 lun.>
** DONE Ajouter une fonction à PLM retournant la liste des leçons
   SCHEDULED: <2014-12-08 lun.>
** DONE Etudier comment récupérer à partir du nom d'une leçon son image et sa description
   - Actuellement, /src/plm/core/ui/ChooseLessonDialog.java/ récupère
     à partir de la liste des leçons l'image et la description associée à chacune.
     Celles-ci sont contenues dans le jar de la PLM.
   - Maintenant que nous passons à une interface WEB, devons-nous
     externaliser ces fichiers (images et descriptions) pour y accéder
     directement depuis l'implémentation du serveur ou devons-nous les
     rendre accessibles par le biais d'attributs présents dans les
     classes exposées au serveur?
   - Possible d'accéder à une image contenue dans le jar à partir
     d'une son URL. Nous avons donc juste besoin de pouvoir récupérer
     le chemin de l'image associée à la leçon.
   - Possible de charger la description d'une leçon à son initialisation dans un champ.
** DONE Modifier PLM pour disposer d'une liste de leçons initialisées au lancement
   - Ceci permettrait au serveur de récupérer la liste des leçons et
     de leurs données, qui seraient ensuite transmises au client pour
     construire la page d'accueil.
   - Les exercices des leçons et leurs solutions seraient toujours
     chargées uniquement au moment où l'utilisateur essaient d'y
     accéder.
** DONE Charger la description d'une leçon
   SCHEDULED: <2014-12-11 jeu.>
   - La description d'une leçon est stockée dans différents fichiers
     selon la langue actuellement selectionnée. On utilise donc
     *FileUtils* pour récupérer la description de la langue choisie.
   - Mais *FileUtils* utilise /Locale/ pour déterminer le fichier à
     lire, qui n'est pas initialisée suite aux modifications apportées
     à l'instanciation de Game.
   - Il a donc fallu modifier *FileUtils* pour utiliser /getLocale/
     plutôt que /locale/ directement, /getLocale/ se chargeant
     d'initialiser cette dernière si elle n'est pas initialisée.
** DONE Instancier Game au lancement du serveur
   SCHEDULED: <2014-12-11 jeu.>
   - Game n'est instancié qu'au moment où le serveur l'interroge. Son
     instanciation prenant plusieurs secondes, elle entraîne un
     timeout qui renvoie une erreur à l'utilisateur.
   - /Play Framework/ permet de définir un objet *Global* permettant
     de surcharger les fonctions appelées au lancement et au stop de
     l'application. Ceci permet d'instancier *Game* au démarrage.
** DONE Afficher la page d'accueil de l'application automatiquement au lancement du serveur
   SCHEDULED: <2014-12-12 ven.>
** TODO Faire un mock-up de l'interface WEB
   - Il convient de choisir un framework CSS au préalable pour
     faciliter le développement de l'interface WEB. [[http://usablica.github.io/front-end-frameworks/compare.html][Cette page]] liste
     un grand nombre de ces derniers.
   - *BootStrap*, *Foundation* se démarquent par leur communauté importante (surtout *BootStrap*).
   - *Semantic UI* est aussi un choix intéressant, mais semble encore jeune (trop?).
   - Il est aussi important de prendre l'intégration du framework CSS
     avec le framework JS utilisé: il semblerait que les frameworks
     tels qu'*Angular* peuvent buggés suite à une modification du DOM
     par un autre script.
** DONE Tester Foundation
   SCHEDULED: <2014-12-15 lun.>
   - *Foundation* propose des fonctionnalités qui peuvent s'avérer
     intéressantes telles que [[http://foundation.zurb.com/docs/components/block_grid.html][celle-ci]] ou encore [[http://foundation.zurb.com/docs/components/joyride.html][celle-là]].
   - Mais sa faiblesse est qu'il ne gère pas l'HTML généré
     dynamiquement (voir les issues [[https://github.com/zurb/foundation/issues/5503][#5503]] et [[https://github.com/zurb/foundation/issues/4827][#4827]]).
   - Pour pallier à ce problème, il est nécessaire d'appeler la
     méthode /$(document).foundation()/ à chaque fois que l'on modifie
     le DOM et que l'on souhaite utiliser une fonctionnalité
     de *Foundation*.
   - Est-ce que des appels répétés à cette méthode peuvent être
     handicapant pour l'application et ses performances au cours d'une
     longue session d'utilisation?
** TODO Tester Bootstrap
   SCHEDULED: <2014-12-16 mar.>
   - *Bootstrap* serait capable de détecter
     automatiquement les changements apportés au DOM.
   - Il reste à déterminer si cette détection automatique est plus
     performante que le refresh manuel de *Foundation*.
** TODO Se renseigner sur Docker
   - A première vue, ça pourrait être utile pour effectuer le code des
     clients une fois passé en mode serveur centralisé.
