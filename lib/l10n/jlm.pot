# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-05-09 06:28-0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Content of: <h2>
#: lib/doc/MainWindow.html:1
msgid "The JLM Main Window"
msgstr ""

#. type: Content of: outside any tag (error?)
#: lib/doc/MainWindow.html:3
msgid ""
"The JLM working environment should be self-explanatory, in particular with "
"the tool tips appearing when your mouse is over the elements.  Here is a "
"little explanation of the components in case you fail to understand "
"something. The main window is made of 5 main components:"
msgstr ""

#. type: Content of: <ul><li>
#: lib/doc/MainWindow.html:10
msgid ""
"<b>The menu:</b> Placed on top of the window, it gives you access to some "
"advanced commands such as exiting the program, and some other that we will "
"detail later."
msgstr ""

#. type: Content of: <ul><li>
#: lib/doc/MainWindow.html:14
msgid ""
"<b>The tool bar:</b> Placed just below the menu, it gives you access to the "
"four main commands:"
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:19
msgid ""
"The <b>Start</b> button, which begins the compilation and execution of the "
"code you may have typed in the editor. At the end of the execution, it "
"verifies whether you reach the situation constituting the objective of the "
"exercise or not. If yes, you gain access to the next exercise using the "
"<b>Exercise</b> menu. If not, you need to rework your code."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:25
msgid ""
"The <b>Stop</b> button allows you to interupt the execution of your code, "
"what may reveal useful if you encounter an <i>infinite loop</i>."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:28
msgid ""
"The <b>Reset</b> button can be used to reset the world into its initial "
"state."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:31
msgid ""
"The <b>Demo</b> button shows you the execution of the expected "
"solution. During its execution, you may want to swich the seen world to see "
"the different expected solutions."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:34
msgid ""
"Please note that there is often several ways of achieving the awaited "
"solution, and that the one presented during the demo is not more or less "
"correct than the others. You are completely free to not follow strictly the "
"process shown by the demo, as long as your final solution matches the "
"exercise expectations."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:40
msgid ""
"The scrolling menu <b>Lessoon</b> allows you to choose the lesson you want "
"to work on."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:43
msgid ""
"The scrolling menu <b>Exercise</b> allows you to switch to another exercise "
"when you want. Some lessons require you to finish an exercise before "
"starting the previous one."
msgstr ""

#. type: Content of: <ul><li>
#: lib/doc/MainWindow.html:49
msgid ""
"<b>Mission and editor tabs:</b> this is were you read this very text. This "
"area contains several tabs to which you can access by clicking on their name "
"on the top left. The first tab (which is always named <b>Mission</b>)  "
"contains a presentation of the current exercise. To solve an exercise, you "
"need to write your code in the other tabs. For example, you can now clic on "
"the <b>Source Code</b> tab to see the actual source. It is empty because "
"there is no code to write for this introduction exercise."
msgstr ""

#. type: Content of: <ul><li>
#: lib/doc/MainWindow.html:57
msgid ""
"<b>The console:</b> Placed under the tabs, this is where any messages of the "
"application will appear. This area is initially empty and white."
msgstr ""

#. type: Content of: <ul><li>
#: lib/doc/MainWindow.html:60
msgid ""
"<b>World view</b> Placed on the right of the tabs, it is constituted of five "
"elements:"
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:65
msgid ""
"A scrolling menu allows to choose the world. Indeed, the program you write "
"may be executed in several worlds to test it in differing conditions. This "
"menu allows you to choose the world you want to see."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:69
msgid ""
"A slider placed underneath allows to choose the animation speed of the "
"world. More precisely, it allows to choose the delay (in milliseconds) that "
"the buggles must wait after each action to allow you to see what they are "
"doing."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:74
msgid ""
"A tab <b>World</b> represents the view of the world currently selected (from "
"the scrolling menu). This view is thus constitued of a grid forming the "
"several cells of the world, as well as several <i>buggles</i> awaiting for "
"your orders."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:79
msgid ""
"An <b>Objective</b> tab displaying the world as it must be by the end of the "
"exercise."
msgstr ""

#. type: Content of: <ul><li><ul><li>
#: lib/doc/MainWindow.html:83
msgid ""
"<b>The interactive controls</b>. Placed under the world view, these buttons "
"allows you to interactively control the buggles. This way, you can try to "
"<i>manually</i> bring your buggle to the scenario objective before writting "
"the needed code in the editor."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:89
msgid "A scrolling menu allows to select the buggle you want to control."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:91
msgid "The <b>Forward</b> button let your buggle do one step forward."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:93
msgid "The <b>Backward</b> button let it do one step backward."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:95
msgid "The <b>Turn left</b> button ask your buggle to turn of 90Â° to its left."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:97
msgid ""
"The <b>Turn right</b> button asks the buggle to turn to the right (isn't "
"this amazing?)."
msgstr ""

#. type: Content of: <ul><li><ul><li><ul><li>
#: lib/doc/MainWindow.html:100
msgid ""
"The <b>Mark</b> button requests your buggle to leave a mark behind it when "
"it goes."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/sort/SortingWorld.html:1
msgid "Sorting World"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/sort/SortingWorld.html:2
msgid ""
"This world provides tools to experiment with the sorting algorithms. It can "
"be used in two different ways: the first one is naturally to write the "
"required sorting algorithms. But it is also possible to simply use the demo "
"mode of each exercise to observe the behavior of sorting algorithms. It "
"helps understanding the differences between each of them."
msgstr ""

#. type: Content of: <h2>
#: src/jlm/universe/sort/SortingWorld.html:8
msgid "Methods available to sorting algorithms"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:10
msgid "<b>Method</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:10
msgid "<b>Action</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:10
msgid "<b>Cost</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:11
msgid "int getValueCount()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:11
msgid "Returns the amount of values in the array"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:11 src/jlm/universe/sort/SortingWorld.html:22
msgid "none"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:13
msgid "boolean isSmaller(int i, int j)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:13
msgid "Returns true if the content of cell i is smaller than the one of cell j"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:13
msgid "two reads"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:14
msgid "boolean isSmallerThan(int i, int val)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:14
msgid "Returns true if the content of cell i is smaller than value val"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:14 src/jlm/universe/sort/SortingWorld.html:19
msgid "one read"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:16
msgid "void swap(int i, int j)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:16
msgid "Swaps the content of cell i and the one of cell j"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:16
msgid "two reads, two writes"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:17
msgid "void copy(int from, int to)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:17
msgid "Copy the content of cell 'from' into the cell 'to'"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:17
msgid "one read, one write"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:19
msgid "int getValue(int idx)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:19
msgid "Returns the value of cell idx"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:20
msgid "void setValue(int idx,int val)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:20
msgid "Sets cell 'idx' to the value 'val'"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:20
msgid "one write"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:22
msgid "void sorted(int idx)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/sort/SortingWorld.html:22
msgid "Tells that the cell 'idx' was successfully sorted (only used for display)"
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/turtles/TurtleWorld.html:1
msgid "TurtleWorld"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/turtles/TurtleWorld.html:2
msgid ""
"This world is directly inspired from the work of the mathematician Seymour "
"Papert in the 60's. Inspirated from the swiss psycholog Jean Piaget, he came "
"up with a learning method called LOGO to teach programming to young "
"childs. The world is full of turtles which leave a painting where they go "
"and which respond to simple orders."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/turtles/TurtleWorld.html:8
msgid "This world is an adaptation of LOGO for the Java Learning Machine."
msgstr ""

#. type: Content of: <h2>
#: src/jlm/universe/turtles/TurtleWorld.html:10
msgid "Methods understood by turtles"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:13
msgid "<b>Moving forward</b> <code>public void forward(double stepAmount);</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:14
msgid "<b>Moving backward</b> <code>public void backward(double stepAmount);</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:15
msgid ""
"<b>Turn left</b> <code>public void turnLeft(double angle);</code> (in "
"degree)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:17
msgid "<b>Turn right</b> <code>public void turnRight(double angle);</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:18
msgid "<b>Pen up</b> <code>public void penUp();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:19
msgid "<b>Pen down</b> <code>public void penDown();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:20
msgid "<b>Get pen position</b> <code>public boolean isPenDown();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:21
msgid "(turtles have pens, not brushes as buggles)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:22
msgid "<b>Get heading</b> <code>public double getHeading();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:23
msgid "<b>Change heading</b> <code>public void setHeading(double angle);</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:24
msgid "<b>Get color</b> <code>public Color getColor();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:25
msgid "<b>Set color</b> <code>public void setColor(Color color);</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:26
msgid ""
"<b>Get position</b> <code>public double getX();</code> <code>public double "
"getY();</code>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/turtles/TurtleWorld.html:28
msgid ""
"<b>Set position</b> <code>public void setX(double x);</code> \t <code>public "
"void setY(double y);</code> <code>public void setPos(double x, double "
"y);</code>"
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/bugglequest/BuggleWorld.html:1
msgid "BuggleWorld"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/bugglequest/BuggleWorld.html:2
msgid ""
"This world was invented by Lyn Turbak, at Wellesley College. It is full of "
"Buggles, little animals understanding simple orders, and offers numerous "
"possibilities of interaction with the world: taking or dropping objects, "
"paint the ground, hit walls, etc."
msgstr ""

#. type: Content of: <h2>
#: src/jlm/universe/bugglequest/BuggleWorld.html:7
msgid "Methods understood by buggles"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:9
msgid "<b>Moving</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:9
msgid "(See also the note on exceptions, below)"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:10
msgid "<b>Turn left"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:10
msgid "Turn right"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:10
msgid "Turn back"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:10
msgid "Moving forward"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:10
msgid "Moving back</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:11
msgid "void turnLeft();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:11
msgid "void turnRight()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:11
msgid "void turnBack()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:12
msgid "void forward() or void forward(int)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:12
msgid "void backward() or void backward(int)"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:13
msgid "<b>Get X coordinate"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:13
msgid "Get Y coordinate"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:13
msgid "Set X coordinate"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:13
msgid "Set Y coordinate"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:13
msgid "Set position</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:14
msgid "int getX();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:14
msgid "int getY()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:14
msgid "void setX(int)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:14
msgid "void setY(int)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:14
msgid "void setPos(int,int)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:16
msgid "<b>Information on the buggle</b>"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:17
msgid "<b>Get the color"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:17
msgid "Set the color</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:18
msgid "Color getColor();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:18
msgid "void setColor(Color)"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:19
msgid "<b>Look for a wall forward"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:19
msgid "Look for a wall backward</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:20
msgid "boolean isFacingWall();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:20
msgid "boolean isBackingWall()"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:21
msgid "<b>Get heading"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:21
msgid "Set heading</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:21
msgid "valid directions are:"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:22
msgid "Direction getDirection();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:22
msgid "void setDirection(Direction)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:22
msgid "Direction.NORTH, Direction.EAST, Direction.SOUTH and Direction.WEST"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:24
msgid "<b>About the brush</b>"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:25
msgid "<b>Brush down"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:25
msgid "Brush up"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:25
msgid "Get brush position</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:26
msgid "void brushUp();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:26
msgid "void brushDown();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:26
msgid "boolean isBrushDown();"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:27
msgid "<b>Change the brush color"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:27
msgid "Get the color of the brush</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:28
msgid "void setBrushColor(Color);"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:28
msgid "Color getBrushColor();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:30
msgid "<b>Interacting with the world</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:31
msgid "<b>Get the color of the ground</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:31
msgid "Color getGroundColor();"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:33
msgid "<b>Look for a baggle on the ground"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:33
msgid "Look for a baggle in bag"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:33
msgid "Pickup a baggle"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:33
msgid "Drop a baggle</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:34
msgid "(see the note on exceptions)"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:35
msgid "boolean isOverBaggle();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:35
msgid "boolean isCarryingBaggle();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:35
msgid "void pickUpBaggle()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:35
msgid "void dropBaggle()"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:37
msgid "<b>Look for a message"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:37
msgid "Add a message"
msgstr ""

#. type: Content of: <table><tr><td><b>
#: src/jlm/universe/bugglequest/BuggleWorld.html:37
msgid "Read the message"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:37
msgid "Erase the message</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:38
msgid "boolean isOverMessage();"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:38
msgid "void writeMessage(String);"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:38
msgid "String readMessage()"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/bugglequest/BuggleWorld.html:38
msgid "void clearMessage()"
msgstr ""

#. type: Content of: <h2>
#: src/jlm/universe/bugglequest/BuggleWorld.html:41
msgid "Note on exceptions"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/bugglequest/BuggleWorld.html:42
msgid ""
"Regular buggles throw a BuggleWallException exception if you ask them to "
"traverse a wall.  They throw a NoBaggleUnderBuggleException exception if you "
"ask them to pickup a baggle from an empty cell, or a "
"AlreadyHaveBaggleException exception if they already carry a baggle.  Trying "
"to drop a baggle on a cell already containing one throws an "
"AlreadyHaveBaggleException exception."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/bugglequest/BuggleWorld.html:48
msgid ""
"SimpleBuggles (ie, the one used in first exercises) display an error message "
"on problem so that you don't need to know what an exception is."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/hanoi/HanoiWorld.html:1
msgid "HanoiWorld"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/hanoi/HanoiWorld.html:3
msgid ""
"This world implements the ultra-classical Hanoi problem. You are asked to "
"move the disk pile from the stick where they are to the target stick (given "
"as second parameter in the world's name -- number 1 for the default "
"world). There is some extra constraint: you can only move one disk at a "
"time, and you cannot move a big disk over a smaller one.  Only 2 functions "
"are provided:"
msgstr ""

#. type: Content of: <pre>
#: src/jlm/universe/hanoi/HanoiWorld.html:11
#, no-wrap
msgid "public void move(int src, int dst) throws HanoiInvalidMove;"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/hanoi/HanoiWorld.html:13
msgid ""
"It moves one disk from the stick <code>src</code> onto the stick "
"<code>dst</code>. As you can see, if you try to do an invalid move (like "
"laying a disk over a smaller one), an exception is thrown."
msgstr ""

#. type: Content of: <pre>
#: src/jlm/universe/hanoi/HanoiWorld.html:17
#, no-wrap
msgid "int getSlotSize(int slot);"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/hanoi/HanoiWorld.html:19
msgid ""
"It returns the amount of disks placed on the specified slot. This is mainly "
"used to initialize the recursion and set the amount of recursive call to "
"execute."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/backtracking/Main.html:1
msgid "Backtracking lesson"
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:3
msgid ""
"This <b>experimental</b> lesson aims at teaching students about "
"backtracking. It is not ready for consumtion yet, not even the first "
"exercises. It will feature several exercices on the topic allowing to "
"progressively build the relevant notions and mental representation in the "
"students mind."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:9
msgid ""
"For now, it contains a Backtracking exercise which lacks a graphical "
"representation to be usable. It is based on an entity KnapsackSolver which "
"works on a KnapsackPartialSolution. This latter is not a World, but a "
"passive world component. It is used by the solver to store the currently "
"best solution and the working solution. This design should be rather generic "
"and other backtracking problems, such as the ones used in my TOP teaching "
"(pyramid, recipients) should be implmentable following this design. That is "
"why Backtracking classes derive from generic ones: BacktrackingEntity and "
"BacktrackingPartialSolution.  There is also a BacktrackingWorld, that "
"specific universes should need to not override, and BacktrackingExercise, "
"dealing with this specificity where the world does not only contain solving "
"entities, but also two partial solutions (best know and current)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:23
msgid ""
"This exercise should be introduced by an interactive discovery activity such "
"as the one used here: "
"http://interstices.info/jcms/c_19213/le-probleme-du-sac-a-dos"
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:27
msgid ""
"Although this exercise seems almost usable, there is a fundamental "
"difficulty to solve in the visualization. It is envisionned that the call "
"graph is used here, to help the students building their mental "
"representation of recursion. The actual representation of the graph should "
"be quite easy, thanks to the jung library. But I fail to see how to get the "
"needed info so far. Adding sensors to the stepUI()  method is probably the "
"best way to go, but I would need to inspect the complete call stack where "
"Thread.currentThread().getStack() only give the static stack (method called, "
"file location, etc). I think I need to inspect the parameters passed to each "
"method call to rebuild the proper call tree."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:39
msgid ""
"The first thing that I tried to use was dtrace, but it seems non-portable "
"and somehow linked to solaris so I didn't dig any further."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:43
msgid ""
"Then, I tried to use the debugging infrastructure (JPDA), but never managed "
"to get it working. It seems to me that the original com.sun.jdi package is "
"somehow deprecated since com.sun.jdi.BootStrap.virtualMachineManager() "
"returns null while org.eclipse.jdi.Bootstrap.virtualMachineManager() does "
"not. But when I'm using the eclipse version, it seem to take an endless "
"amount of dependencies, which I'm not inclined to do. The root of my problem "
"may be that I was using a jdi.jar comming from eclipse, but I didn' find any "
"other. I just realised that the com.sun.jdi package is also implemented in "
"/usr/lib/jvm/java-6-sun-1.6.0.26/lib/tools.jar on my disk. It seem to be "
"functional, I should give it another spin."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:55
msgid ""
"Afterward, I tried to reuse the debugging infrastructure of DrJava. It looks "
"like a good idea because they have several helper interfaces for debugging "
"and compiling. Also, they have a good editor that we could reuse. Finally, "
"they have a strong testing infrastructure with junit ensuring that their "
"tool still work after modifications (that's something we are seriously "
"missing in JLM). I'm really thinking that the two tools should converge to "
"something stronger. The only argument for not doing so (beside the amount of "
"work it'll take) is that each of us get the credit for each tool where "
"things would be more fuzzy on a mixed tool. But I don't care, the mixed tool "
"would be so much cooler that I'd like to find the time to ensure this "
"convergence."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:67
msgid ""
"But the debugging feature of DrJava seems to suffer from an issue: "
"http://sourceforge.net/tracker/index.php?func=detail&aid=3004294&group_id=44253&atid=438935 "
"I was suspecting a permission error (something related to "
"com.sun.jdi.JDIPermission), but even with a java.security.AllPermission as "
"permission file, I still have the issue."
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:73
msgid ""
"Another lead to get it working it to use lib ASM to modify the student code "
"so that their recursive method gets traced. With the static backtrace and "
"the tracing information, I guess I could rebuild the actual call tree. That "
"seem to be possible: 2 sec of googling gave me something like "
"http://rejeev.blogspot.com/2009/04/method-tracing.html"
msgstr ""

#. type: Content of: <p>
#: src/lessons/backtracking/Main.html:79
msgid ""
"So, here I am. The lesson would be very interesting to students, and quite "
"easy to finish once I manage to get the information I need, but I didn't "
"manage to do so so far, despite my efforts. If you have any hint (or "
"patch!), please email martin.quinson#loria.fr."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/backtracking/Main.html:84
msgid ""
"This gives me the following todo actions: * Check whether tools.jar gives a "
"working com.sun.jdi package * Find the DrJava bug around debugging to help "
"them, and so that I can steal parts of their code about it for JLM (it's "
"BSD'ed while JLM is mainly GPL'ed for now -- I'll have to ask them for an "
"exception). That would be better since their helper interface seem to be "
"able to deal with several debuggers (eclipse, sun or openjdk). That's quite "
"a large amount of work I'd like to avoid dupplicating.  * Check wheter I can "
"get tracing info from ASM. It may be more robust to JVM variants than the "
"debugging approach. On the other hand, debugging is a neat feature for JLM "
"as is.  * Work on the convergence of JLM and DrJava. Beside of the licencing "
"issue, it will also complicate the ongoing integration of JLM within Debian, "
"since DrJava is composed of [[5 separated "
"modules|http://drjava.org/docs/developer/ch02s03.html]] that can only be "
"integrated as separated source packages. As every java package, no source "
"archive is distributed, and they must be retrieved directly from the "
"svn. Finally, they are quite huge, with sloccount reporting"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/chooser/LessonChooser.html:3 src/lessons/chooser/LessonChooser.html:3
msgid "&nbsp;&nbsp;"
msgstr ""

#. type: Content of: <table><tr><td><font>
#: src/lessons/chooser/LessonChooser.html:3
msgid "Welcome to the Java Learning Machine"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/chooser/LessonChooser.html:7
msgid ""
"The JLM is a Learning Management System (LMS) aiming at teaching the art of "
"computer programming through interactive exercises. It offers an extensive "
"set of varied exercises, allowing you to practice at your own pace."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/chooser/LessonChooser.html:11
msgid "Pick a classical lesson"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:13
msgid ""
"<a href=\"jlm://lessons.welcome\">Welcome lesson</a> This lesson is intended "
"to lead the first steps in programming of absolute beginners."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:16
msgid ""
"<a href=\"jlm://lessons.maze\">Escape the maze</a> Will you escape the "
"mazes?"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:18
msgid ""
"<a href=\"jlm://lessons.bat.string1\">String lesson</a> A bunch of exercises "
"on strings."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:20
msgid ""
"<a href=\"jlm://lessons.sort\">Sorting lesson</a> This short lesson proposes "
"to discover the classical sorting algorithms by practice."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:23
msgid ""
"<a href=\"jlm://lessons.recursion\">Recursion lesson</a> Build some "
"classical geometric figures through recursion."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:26
msgid ""
"<a href=\"jlm://lessons.lightbot\">LightBot</a> In this little game, you "
"must program graphically a little robot to instruct it how to switch the "
"lights off. It is a brain teaser for programmer."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/chooser/LessonChooser.html:30
msgid ""
"<a href=\"jlm://lessons.smn\">Digital Manual Science</a> Some activities "
"developed for the Sciences Manuelles du NumÃ©rique (Digital Manual Science)"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/chooser/Main.html:1
msgid "Lesson chooser"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/chooser/Main.html:3
msgid ""
"This isn't a real lesson, it's here that you can select a lesson among "
"others."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/meta/HanoiCreateWorld.html:1
msgid "Creating a new JLM world"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:4
msgid ""
"Welcome to the JLM Meta-Lesson. Its goal is to teach you how to write new "
"universes in JLM. For that, we will reimplement the Hanoi world (available "
"in the recursion lesson) step-by-step. This lesson covers quite advanced "
"topics and suppose that you are fluent in Java and confident with the use of "
"the JLM framework already. If you are not used to the framework already, you "
"probably want to take another lesson before, like the welcome one or (maybe "
"more fun) the maze one."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:12
msgid "Every JLM universe is composed of 4 main components:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:14
msgid "<b>The world</b>: it contains the state of the universe."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:15
msgid "<b>The view</b>: it allows to draw the world and the entities on the screen."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:17
msgid ""
"<b>The entity ancestor</b>: the code written by the student will derive from "
"this class, which contains some state specific to the entity, and every "
"accessor to let the entity interact with its world."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:20
msgid ""
"<b>The entity interactive control panel</b>: this is the little panel "
"displayed under the world view in the JLM interface. It allows to "
"interactively control the selected entity. As you can see from the existing "
"universes, this is optional, and if you don't provide any, the panel will "
"remain blank, preventing the users from interactively controlling the "
"entities."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:28
msgid "In addition, worlds are used by exercises, themselves sorted in lessons."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:30
msgid ""
"<b>Lessons</b> are just a list of exercise. They can be sequential (meaning "
"that the student has to finish one exercise before being allowed to see the "
"next one in the list), altrough most of them are not (ie, students are free "
"to attempt the exercises in the order they like)."
msgstr ""

#. type: Content of: <ul><li><p>
#: src/lessons/meta/HanoiCreateWorld.html:35
msgid ""
"In the future, we would like to have richer exercise ordering schema, where "
"the requirements to fulfill to be allowed to try an exercise could be more "
"complex.  The dependencies would probably turn into a graph instead of a "
"chain.  But this is still to be done."
msgstr ""

#. type: Content of: <ul><li><p>
#: src/lessons/meta/HanoiCreateWorld.html:40
msgid ""
"The main element of each lesson is a class classically called Main, which "
"simply contains a constructor adding each exercise of the lesson in row."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:43
msgid ""
"Each <b>exercise</b> object is in charge of instantiating the worlds used, "
"set them up (adding walls and baggles in BuggleWorld, or changing the "
"elevation and adding lamps in the LightBotWorld, etc), and populate them "
"with entities correctly setup (location, color, etc)."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:48
msgid ""
"Most of the exercises also provide a specific <b>answer entity</b> able to "
"solve the exercise.  It serve both to compute the initial content of the "
"code editor, and to compute the objective world. We will come back on this "
"in a latter exercise of this meta-lesson."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:53
msgid ""
"The very first element you want to write in a new JLM universe is a partial "
"world implementation including the internal state. In subsequent exercises, "
"we will complete the World class to provide entities ways to interact and "
"modify their world, and we will also implement the other elements of the "
"universe."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:58
msgid ""
"Before you jump in writing your World implementation, you should understand "
"the big JLM picture, and how worlds are used internally."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/meta/HanoiCreateWorld.html:61
msgid "JLM worlds big picture"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:64
msgid ""
"As you know, every JLM exercise can contain one or several worlds, each "
"containing one or several entities. The code written by the student is "
"executed in the entities, which must interact with their world to change it "
"from its initial state to its goal state."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:69
msgid ""
"This multiplication of worlds and entities is used to test the student code "
"in several conditions. It can thus be parallelized to test cases, aiming at "
"full testing coverage of the student code."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:73
msgid ""
"Technically, in a given exercise, for every world accessible from the "
"relevant combobox, there is three World objects. They live in "
"jlm.lesson.Exercise:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/meta/HanoiCreateWorld.html:76
#, no-wrap
msgid ""
"protected World [] initialWorld; \n"
"protected World [] currentWorld; \n"
"protected World [] answerWorld;  \n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:83
msgid ""
"The line number of the combobox gives the index to use in these arrays.  "
"Each <code>initialWorld</code> is created by the exercise constructor."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:87
msgid ""
"<code>currentWorld</code> is the one displayed in the \"World\" tab of the "
"interface. At the beginning, it is a plain copy of the initialWorld, but it "
"gets modified when the student uses the interactive controls or when the "
"program gets run. The \"Reset\" button reset it to be a perfect copy of the "
"initial world."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:93
msgid ""
"<code>answerWorld</code> is the one displayed by the \"Objective\" "
"world. Basically, it's a copy of the initial world, on which we let the "
"specific answer entity of this exercise run.  This default behavior can be "
"overloaded by exercises, but you'll probably never have to do so. We will "
"come back on this in a subsequent exercise."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/meta/HanoiCreateWorld.html:98
msgid "Implementing basic Worlds"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:100
msgid ""
"The internal use of Worlds hidden, but the important point is that every "
"World object has extend the jlm.universe.World class and define the "
"following methods and constructors:"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:103
msgid ""
"<b>a copy constructor</b> which is used to copy initial worlds into "
"currentWorld and answerWorld.  Its argument must be of the exact same type "
"than the class itself, not Object (this is because we use Java introspection "
"mechanism to search for such a constructor of the class).  For example, if "
"you create a TotoWorld, your copy constructor must be declared as this:"
msgstr ""

#. type: Content of: <p><ul><li><pre>
#: src/lessons/meta/HanoiCreateWorld.html:108
#, no-wrap
msgid ""
"public TotoWorld(TotoWorld other) {...} // Correct\n"
"public TotoWorld(Object other) {...} // FALSE\n"
"public TotoWorld(World other) {...} // also FALSE\n"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:112
msgid ""
"The content of this constructor is usually a simple call to the "
"<code>super(World w)</code> constructor, but this constructor cannot be "
"omitted."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:115
msgid ""
"One or several <b>regular constructors</b> initializing the state of the "
"object. They will be used by the exercise constructor to instantiate your "
"world. Since you usually write both the world and the lessons, you are "
"completely free to specify the parameters you want to your constructor. It "
"should use the <code>super(String name)</code> constructor to setup the very "
"basic elements of your world."
msgstr ""

#. type: Content of: <p><ul><li><p>
#: src/lessons/meta/HanoiCreateWorld.html:120
msgid ""
"Optionally, you may also want to use the <code>setDelay(int delay)</code> "
"method to change the initial animation delay. For example, the SortingWorld "
"set this to 1 to speed animations up. This is the delay in milliseconds "
"between each animation step during a continuous run."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/meta/HanoiCreateWorld.html:124
msgid ""
"A <b>reset() method</b> taking one World as parameter, and in charge of "
"copying the state of the parameter into the current world. This is naturally "
"used when you press the \"Reset\" button, or at the beginning of each run."
msgstr ""

#. type: Content of: <p><ul><li><p>
#: src/lessons/meta/HanoiCreateWorld.html:127
msgid ""
"The length of this method naturally depends on the complexity of your world "
"state. In hanoi, there is only 3 slots containing a list of disc so that "
"will be quite easy, but this can be quite complicated for complex worlds "
"such as BuggleWorld."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/meta/HanoiCreateWorld.html:132
msgid "Allowing the graphical rendering of Worlds"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:134
msgid ""
"Some specific steps naturally must be taken so that JLM can graphically "
"display your world. Usually, you must write a specific class extending "
"jlm.universe.WorldView, and provide some protected methods so that the View "
"can retrieve the state to display. In this particular exercise, the view is "
"provided (you will write you own one in next exercise), so you only have to "
"implement the right accessor."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/meta/HanoiCreateWorld.html:139
msgid "Implementing your HanoiWorld"
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:141
msgid ""
"The main task of this exercise is to modify the provided template to store "
"the state of the world. Since the exercise provides a view and automatically "
"instantiate your world, you cannot change the instantiation constructor, nor "
"the rendering accessor (see the code template for there prototype). But you "
"are completely free about how you actually store the state in your object."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:146
msgid ""
"During the implementation of the Hanoi world, I changed my internal "
"representation several times, to adapt to the code needs. My first try was "
"only simply three ArrayList&lt;Integer>, for each slots, while the final "
"design used an inner class called HanoiSlot, containing an integer array and "
"providing friendly functions such as <code>push()</code>, <code>pop()</code> "
"and <code>top()</code>. Even if it really becomes necessary when "
"implementing the action methods allowing the entities to interact with their "
"world, I advise you to design an inner class from the beginning."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:153
msgid ""
"You probably want to add 3 fields to your World, one for each slot (we will "
"never try to have worlds with more than 3 slots), store the content of each "
"slot in the instantiation constructor, and retrieve the content of a "
"specific slot in the rendering accessor (<code>Integer[] values(Integer "
"i)</code>)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/meta/HanoiCreateWorld.html:157
msgid ""
"That seems quite a lot of code to write compared to the other JLM exercises, "
"but at the end, my HanoiWorld implementation is less than 100 lines long, "
"which is not that much."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/meta/Main.html:1
msgid "Meta lesson"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/meta/Main.html:2
msgid "The purpose of this lesson is to teach you how to write lessons for JLM."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/Main.html:1
msgid "First steps"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Main.html:3
msgid ""
"This first lesson will lead your first steps in Java programming. It is "
"intended for beginners. List of seen notions per exercise:"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:8 src/lessons/welcome/Main.html:91 src/lessons/welcome/Main.html:174 src/lessons/welcome/Main.html:254 src/lessons/welcome/Main.html:348 src/lessons/welcome/Main.html:428 src/lessons/welcome/Main.html:468
msgid "&nbsp;"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:9 src/lessons/welcome/Main.html:92 src/lessons/welcome/Main.html:175 src/lessons/welcome/Main.html:255 src/lessons/welcome/Main.html:349 src/lessons/welcome/Main.html:429 src/lessons/welcome/Main.html:469 src/lessons/welcome/Basics.html:1
msgid "Instructions"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:10 src/lessons/welcome/Main.html:93 src/lessons/welcome/Main.html:176 src/lessons/welcome/Main.html:256 src/lessons/welcome/Main.html:350 src/lessons/welcome/Main.html:430 src/lessons/welcome/Main.html:470
msgid "Comments"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:11 src/lessons/welcome/Main.html:94 src/lessons/welcome/Main.html:177 src/lessons/welcome/Main.html:257 src/lessons/welcome/Main.html:351 src/lessons/welcome/Main.html:431 src/lessons/welcome/Main.html:471
msgid "Conditionals/ Expressions"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:12 src/lessons/welcome/Main.html:78 src/lessons/welcome/Main.html:95 src/lessons/welcome/Main.html:178 src/lessons/welcome/Main.html:258 src/lessons/welcome/Main.html:352 src/lessons/welcome/Main.html:432 src/lessons/welcome/Main.html:472 src/lessons/welcome/LoopWhile.html:1
msgid "While loops"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:13 src/lessons/welcome/Main.html:96 src/lessons/welcome/Main.html:179 src/lessons/welcome/Main.html:259 src/lessons/welcome/Main.html:353 src/lessons/welcome/Main.html:433 src/lessons/welcome/Main.html:473
msgid "Variables"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:14 src/lessons/welcome/Main.html:97 src/lessons/welcome/Main.html:133 src/lessons/welcome/Main.html:180 src/lessons/welcome/Main.html:260 src/lessons/welcome/Main.html:354 src/lessons/welcome/Main.html:434 src/lessons/welcome/Main.html:474 src/lessons/welcome/LoopFor.html:1
msgid "For loops"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:15 src/lessons/welcome/Main.html:98 src/lessons/welcome/Main.html:181 src/lessons/welcome/Main.html:261 src/lessons/welcome/Main.html:355 src/lessons/welcome/Main.html:435 src/lessons/welcome/Main.html:475
msgid "Do/While loops"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:16 src/lessons/welcome/Main.html:99 src/lessons/welcome/Main.html:161 src/lessons/welcome/Main.html:182 src/lessons/welcome/Main.html:262 src/lessons/welcome/Main.html:356 src/lessons/welcome/Main.html:436 src/lessons/welcome/Main.html:476 src/lessons/welcome/Methods.html:1
msgid "Methods"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:17 src/lessons/welcome/Main.html:100 src/lessons/welcome/Main.html:183 src/lessons/welcome/Main.html:263 src/lessons/welcome/Main.html:357 src/lessons/welcome/Main.html:437 src/lessons/welcome/Main.html:477
msgid "Switch"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:18 src/lessons/welcome/Main.html:101 src/lessons/welcome/Main.html:184 src/lessons/welcome/Main.html:264 src/lessons/welcome/Main.html:358 src/lessons/welcome/Main.html:438 src/lessons/welcome/Main.html:478
msgid "Arrays"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:22 src/lessons/welcome/Environment.html:1
msgid "Welcome in the Buggles' World"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:36
msgid "Java Instructions"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:50 src/lessons/welcome/BasicsDrawG.html:1
msgid "Writing more complex programs"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:64 src/lessons/welcome/Conditions.html:1
msgid "Conditional instructions"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:105 src/lessons/welcome/BaggleSeeker.html:1
msgid "Baggle Seeking"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:119 src/lessons/welcome/Variables.html:1
msgid "Storing and manipulating data"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:147 src/lessons/welcome/LoopDoWhile.html:1
msgid "Do .. while loops"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:187 src/lessons/welcome/MethodsDogHouse.html:1
msgid "Building methodically"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:201 src/lessons/welcome/MethodsReturning.html:1
msgid "Methods returning a result"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:214 src/lessons/welcome/MethodsArgs.html:1
msgid "Methods with parameters"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:228 src/lessons/welcome/MethodsPicture.html:1
msgid "Methodically drawing"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:241 src/lessons/welcome/MethodsPicture2.html:1
msgid "Methodically drawing (only bigger)"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:267 src/lessons/welcome/MethodsPicture3.html:1
msgid "Drawing bigger and bigger"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:280 src/lessons/welcome/MethodsPicture4.html:1
msgid "Even more pattern to draw"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:294
msgid "Buggle Dance Revolution"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:308 src/lessons/welcome/BDR2.html:1
msgid "Buggle Dance Revolution 2"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:322 src/lessons/welcome/SlugHunting.html:1
msgid "Slug Hunting"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:335 src/lessons/welcome/SlugTracking.html:1
msgid "Slug Tracking"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:361 src/lessons/welcome/Snake.html:1
msgid "Snake World"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/Main.html:375 src/lessons/welcome/Array.html:1
msgid "Knitting and Arrays"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/Main.html:389 src/lessons/welcome/Array2.html:1
msgid "Knitting, Arrays and modulos"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:402 src/lessons/welcome/TraversalByColumn.html:1
msgid "Traversal by column"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:415 src/lessons/welcome/TraversalByLine.html:1
msgid "Traversal by line"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:441 src/lessons/welcome/TraversalZigZag.html:1
msgid "Zig-zag traversal"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:454 src/lessons/welcome/TraversalDiagonal.html:1
msgid "Diagonal Traversal"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/Main.html:482
msgid "Meaning of the symbols"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:485
msgid "Introducing the concept"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:488
msgid "Working on the concept"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:491
msgid "Concept assumed mastered"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/Main.html:494
msgid "Concept not mandated by the exercise"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Environment.html:3
msgid ""
"You just started the Java Learning Machine. This is a Learning Management "
"System (LMS) aiming at teaching the art of computer programming through "
"interactive exercises. It is constituted by a set of exercises grouped by "
"lessons, allowing you to practice at your own pace. By default, the "
"environment is configured to be programmed in the Java programming language, "
"but you can change it from the Language menu if you want."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Environment.html:9
msgid "In this first lesson, the buggles will lead your first steps in programming."
msgstr ""

#. type: Content of: <p><h3>
#: src/lessons/welcome/Environment.html:11
msgid "The <i>buggles</i>? What is this??"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Environment.html:13
msgid ""
"The buggles are little animals obeying any order you may give them. In each "
"exercise, you have to provide them with the right instructions so that the "
"world turns into the objective of the exercise. For example in this "
"exercise, you show instruct your buggle to move forward once. You can see "
"that by checking the difference between the <i>World</i> view and the "
"<i>Objective</i> one.  Depending on the lessons (and your settings in the "
"Language menu), your code must be written in either Java, JavaScript, Python "
"or Ruby."
msgstr ""

#. type: Content of: <p><h3>
#: src/lessons/welcome/Environment.html:21
msgid "Working environment"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Environment.html:23
msgid ""
"Before going any further, get familiar with the working environment. Have a "
"look at the several elements composing the main window, move your mouse over "
"them to show the tooltip, and experiment with the elements to see what they "
"do.  The white area below is the console: this is where errors and messages "
"get displayed. If you have access to the net, try to open the forum in the "
"help menu to check if other people are connected right now. Note that when "
"you successfully solve an exercise, the good news is spread on twitter.  "
"Keep posted to the progress of your friends by following @jlmlovers :)"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Environment.html:32
msgid ""
"If your code contains errors (and code always do at some point), the "
"computer will display error messages in the console. You obviously have to "
"fix the errors to pass the exercises. The messages that get displayed may "
"sound scary at first glance, but don't panic. The compiler is only somehow "
"limited in its communication abilities, but he's not mean. If you look "
"closer, the solution to solve your issue is written in the middle of those "
"cryptic messages. You'll see, with a bit of habit, we get used to it."
msgstr ""

#. type: Content of: <p><p><h3>
#: src/lessons/welcome/Environment.html:40
msgid "What am I supposed to do?"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Environment.html:42
msgid ""
"It's time to write your first program. Simply ask your buggle to move one "
"step forward using the Source Code pane. For that, simply write the "
"following code (clicking on the interactive controls is not enough: You have "
"to write the code after experimenting interactively)."
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Environment.html:46 src/lessons/welcome/Basics.html:50
#, no-wrap
msgid "forward();"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Environment.html:47 src/lessons/welcome/Basics.html:50
#, no-wrap
msgid "forward()"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Environment.html:48
msgid ""
"Do not forget the final <code>;</code> which tells the compiler that the "
"instruction is over (yes, computers are so dumb that they cannot "
"<i>guess</i> obvious stuff like this)."
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Environment.html:52
msgid ""
"Once done, clic on run, and proceed to next exercise using the File menu "
"entry"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Environment.html:54
msgid "(or keep around to experiment further if you feel so)."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Basics.html:3
msgid ""
"Congratulations! You just wrote your first program! You got the idea now: "
"programming is nothing more than giving simple instructions to the computer "
"that blindly apply them. The main difficulty is to explain stuff to someone "
"as stupid as a computer..."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Basics.html:8
msgid ""
"Programs are mainly suites of method calls, which are no more than a list of "
"simple order given to the machine. It is very similar to a recipe stating "
"<i>Melt the chocolate pieces, add sugar, cool the mix and serve</i>.  In "
"your programs, such built instructions are called functions or methods, and "
"you should add parenthesis to invoke them, as in"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Basics.html:13
#, no-wrap
msgid "nameOfTheMethod()"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:16
msgid ""
"Java want to have the instructions separated by semi-columns (;).  The "
"previous example would thus be written in a similar way:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Basics.html:19
#, no-wrap
msgid ""
"meltTheChocolatePieces();\n"
"addSugar();\n"
"coolMix();\n"
"serve();\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:25
msgid ""
"Python want to have the instructions separated by either semi-columns (;) or "
"by new lines. The previous example would thus be written the following way."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Basics.html:29
#, no-wrap
msgid ""
"meltTheChocolatePieces()\n"
"addSugar()\n"
"coolMix()\n"
"serve()\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:35
msgid ""
"It could also be written in the following way, but it's generally considered "
"as a bad practice to group several instructions on the same line since it "
"greatly hinders the readability."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Basics.html:39
#, no-wrap
msgid "meltTheChocolatePieces(); addSugar(); coolMix(); serve()\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:42
msgid ""
"Of course, these specific methods do not exist in Java, but it may be "
"possible to define them by yourself (we'll see later how to define your how "
"methods)."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:44
msgid ""
"Of course, these specific methods do not exist in Python, but it may be "
"possible to define them by yourself (we'll see later how to define your how "
"methods)."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:46
msgid ""
"For now, we'll simply go for the buggle instructions. There is a method for "
"each button of the interactive control panel. To achieve the same effect "
"than the <b>forward</b> button (making the buggle moving one step forward), "
"you need to write the following in the editor:"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:51
msgid ""
"Likewise, to achieve the same effect than the <b>backward</b>, <b>turn "
"left</b> and <b>turn right</b> buttons, you need to use respectively:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Basics.html:54
#, no-wrap
msgid ""
"backward();\n"
"turnLeft();\n"
"turnRight();\n"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Basics.html:59
#, no-wrap
msgid ""
"backward()\n"
"turnLeft()\n"
"turnRight()\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Basics.html:63
msgid ""
"The <b>mark</b> button is a bit particular, since it correspond to two "
"methods: the first one moves the pen up while the second moves it down."
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Basics.html:66
#, no-wrap
msgid ""
"brushDown();\n"
"brushUp();\n"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Basics.html:70
#, no-wrap
msgid ""
"brushDown()\n"
"brushUp()\n"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Basics.html:73
msgid ""
"The buggle offers other methods, that are presented from the \"Help/about "
"this world\" menu and will be introduced on need."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/Basics.html:77 src/lessons/welcome/Conditions.html:147 src/lessons/welcome/LoopWhile.html:26 src/lessons/welcome/LoopDoWhile.html:16 src/lessons/welcome/BaggleSeeker.html:8 src/lessons/welcome/Variables.html:68 src/lessons/welcome/LoopFor.html:65 src/lessons/welcome/Methods.html:59 src/lessons/welcome/MethodsDogHouse.html:34 src/lessons/welcome/MethodsReturning.html:41 src/lessons/welcome/MethodsArgs.html:54 src/lessons/welcome/BDR.html:157 src/lessons/welcome/BDR2.html:108 src/lessons/welcome/SlugHunting.html:33 src/lessons/welcome/SlugTracking.html:20 src/lessons/maze/RandomMouseMaze.html:23 src/lessons/maze/WallFollowerMaze.html:17 src/lessons/maze/PledgeMaze.html:35 src/lessons/maze/ShortestPathMaze.html:36 src/lessons/maze/WallFindFollowMaze.html:21
msgid "Exercise goal"
msgstr ""

#. type: Content of: <p><p><a>
#: src/lessons/welcome/Basics.html:77
msgid ""
"<a name=\"Objectives\"> Our second program will be a bit more complicated, "
"but not much. The goal for your buggle is simply to draw a house (a box), "
"and hide inside. Check the objective world to see exactly what this means."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BasicsDrawG.html:2
msgid ""
"Now that we know how to draw things on the board, we'll enjoy this ability "
"and draw a beautiful G on the board (check Objective panel for details on "
"what's expected)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BasicsDrawG.html:6
msgid ""
"When you write a quite complex program, it is sometimes useful to <b>add "
"comments</b> to simplify the code reviews afterward. Here for example, it's "
"quite easy to get lost in the drawing process, and you may want to add "
"comments like <i>vertical bar done</i> or <i>finished drawing the G. Time to "
"move back to initial position</i>. Commenting your code is almost mandatory "
"if you (or someone else) want to read it afterward, although overcommenting "
"(describing obvious stuff) is a bad idea as the important idea get lost in "
"the noise."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BasicsDrawG.html:14
msgid ""
"There is three types of comments in Java, instructing the compiler to not "
"read the text you add for humans:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BasicsDrawG.html:16
msgid ""
"There is two types of comments in Python, instructing the compiler to not "
"read the text you add for humans:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BasicsDrawG.html:20
msgid ""
"<b>Comments on a single line</b>. When the compiler encounters the symbols "
"//, it ignores the end of the line."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BasicsDrawG.html:22
msgid ""
"<b>Comments on several lines</b>. The compiler ignores anything placed "
"between the symbols /* and */ even if they are placed on differing lines."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BasicsDrawG.html:27
msgid ""
"<b>Comments on a single line</b>. When the compiler encounters the symbol #, "
"it ignores the end of the line."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BasicsDrawG.html:29
msgid ""
"<b>Comments on several lines</b>. The compiler ignores anything placed "
"between a line beginning with ''' and the next line ending with '''."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BasicsDrawG.html:34
#, no-wrap
msgid ""
"methodCallReadByTheCompiler(); <span class=\"comment\">// all this is "
"ignored</span>\n"
"otherCall(); <span class=\"comment\">/* This is</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "
"<span class=\"comment\"> also ignored */</span>\n"
"yetAnotherCall();\n"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BasicsDrawG.html:40
#, no-wrap
msgid ""
"methodCallReadByTheCompiler() <span class=\"comment\"># all this is "
"ignored</span>\n"
"otherCall() \n"
"<span class=\"comment\">''' This is</span>\n"
"<span class=\"comment\">also ignored  '''</span>\n"
"yetAnotherCall()\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BasicsDrawG.html:47
msgid ""
"There is a third kind of comments in Java, between /** and */, which are "
"read by a specific program called JavaDoc to generate automatically the "
"documentation explaining how to use the code. These comments must follow a "
"very precise formalism."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BasicsDrawG.html:52
msgid ""
"The comments on several lines are often used to document how to use the "
"code, while others are more used to describe how this code works."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Conditions.html:3
msgid ""
"Programs made of simple suite of instructions similar to previous exercise "
"are quite boring. They always do the same thing, and cannot react to "
"external conditions. A <b>conditional</b> let the program adapt by doing "
"something like <i>if it's raining, take an umbrella</i>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Conditions.html:8
msgid "The Java syntax is the following:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Conditions.html:9
msgid "The Python syntax is the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/Conditions.html:10
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDo();</b>\n"
"}"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/Conditions.html:13
#, no-wrap
msgid ""
"if <b>condition</b>:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDo()</b>"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Conditions.html:16
msgid ""
"If the condition is true, any code enclosed between the { and the "
"corresponding } will be executed. If not, it will be ignored. Of course, it "
"is possible to write more than one instruction between the curly brackets "
"(even another test)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Conditions.html:20
msgid ""
"If the condition is true, any code in the block following the colon symbol "
"will be executed. If not, it will be ignored. Of course, it is possible to "
"write more than one instruction in the sub-block (even another test)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Conditions.html:26
msgid ""
"Python uses indentation to define code blocks. The standard Python "
"indentation is 4 spaces. Notice that code blocks do not need any "
"termination. Indenting starts a block and unindenting ends it. In the "
"following code the instructions <b>whatToDo()</b> and <b>whatToDoNext()</b> "
"will be exectuded if the condition is true, then the instruction "
"<b>whatToDoAnyway()</b> will be executed anyway."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Conditions.html:33
#, no-wrap
msgid ""
"if <b>condition</b>:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDo()</b>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoNext()</b>\n"
"<b>whatToDoAnyway()</b>\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:39
msgid ""
"Python functions have no explicit begin or end, and no curly braces to mark "
"where the function code starts and stops. The only delimiter is a colon (:) "
"and the indentation of the code itself."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:44
msgid "Example 2.5. Indenting the buildConnectionString Function"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Conditions.html:48
#, no-wrap
msgid ""
"def buildConnectionString(params):\n"
"    \"\"\"Build a connection string from a dictionary of parameters.\n"
"\n"
"    Returns string.\"\"\"\n"
"    return \";\".join([\"%s=%s\" % (k, v) for k, v in params.items()])\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:55
msgid ""
"Code blocks are defined by their indentation. By \"code block\", I mean "
"functions, if statements, for loops, while loops, and so forth. Indenting "
"starts a block and unindenting ends it. There are no explicit braces, "
"brackets, or keywords. This means that whitespace is significant, and must "
"be consistent. In this example, the function code (including the doc string) "
"is indented four spaces.  It doesn't need to be four spaces, it just needs "
"to be consistent. The first line that is not indented is outside the "
"function."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:64
msgid ""
"It is important that the indentations of all the instructions of a block are "
"consistent, and it is not possible to cut a block. The two following codes "
"are incorrect and will raise errors."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Conditions.html:68
#, no-wrap
msgid ""
"if <b>condition</b>:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDo()</b>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoNext()</b>\n"
"<b>whatToDoAnyway()</b>\n"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Conditions.html:73
#, no-wrap
msgid ""
"if <b>condition</b>:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDo()</b>\n"
"<b>whatToDoAnyway()</b>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoNext()</b>\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:79
msgid ""
"A condition can be a variable of type <tt>boolean</tt>. The code between "
"curly braces will get executed if the variable is <tt>true</tt> and it will "
"be ignored if it is <tt>false</tt>."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:83
msgid ""
"A condition can be a variable of type <tt>boolean</tt>. The code in the "
"inner bloc will get executed if the variable is <tt>True</tt> and it will be "
"ignored if it is <tt>False</tt>."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:88
msgid ""
"The condition can also be an arithmetic test, such as <tt>x</tt> <b>==</b> "
"<tt>5</tt>, which checks whether the current value of <tt>x</tt> is 5, or "
"such as <b>!=</b> (checking inequality), <b>&lt;</b> (smaller than), "
"<b>&gt;</b> (larger than), <b>&lt;=</b> (smaller or equal to), <b>&gt;=</b> "
"(larger or equal to)."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Conditions.html:94
msgid ""
"Beware of the classical trap, which consists in testing the equality of a "
"variable using = instead of ==. Hopefully, the compiler detects this problem "
"most of the time, but not always. If the variable is of type boolean, it can "
"get trapped, so you have to be careful..."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Conditions.html:99
msgid ""
"The condition can also be a call to some perticular methods returning a "
"boolean. For example, the <tt>isFacingWall()</tt> method of the buggle "
"returns true if the buggle is facing a wall, and false in the other case."
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Conditions.html:103
msgid ""
"Finally, a condition can be composed of several sub-conditions connected by "
"boolean operations."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:106
msgid ""
"<tt>cond1 && cond2</tt> is true when <tt>cond1</tt> <b>and</b> "
"<tt>cond2</tt> are both true (if <tt>cond1</tt> is false, <tt>cond2</tt> is "
"not even evaluated)."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:109
msgid ""
"<tt>cond1 || cond2</tt> is true if <tt>cond1</tt> <b>or</b> <tt>cond2</tt> "
"are true (if <tt>cond1</tt> is true, <tt>cond2</tt> is not even evaluated)."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:111
msgid "<tt>!cond</tt> is true if <tt>cond</tt> is false."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:112 src/lessons/welcome/Conditions.html:125
msgid ""
"It is possible to force the order of evaluation by adding parenthesis. In "
"ambigous cases, do not hesitate to add more parenthesis to remove any "
"ambiguities on evaluation order."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:118
msgid ""
"<tt>cond1 and cond2</tt> is true when <tt>cond1</tt> <b>and</b> "
"<tt>cond2</tt> are both true (if <tt>cond1</tt> is false, <tt>cond2</tt> is "
"not even evaluated)."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:121
msgid ""
"<tt>cond1 or cond2</tt> is true if <tt>cond1</tt> <b>or</b> <tt>cond2</tt> "
"are true (if <tt>cond1</tt> is true, <tt>cond2</tt> is not even evaluated)."
msgstr ""

#. type: Content of: <p><p><p><p><ul><li>
#: src/lessons/welcome/Conditions.html:124
msgid "<tt>not cond</tt> is true if <tt>cond</tt> is false."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Conditions.html:130
msgid ""
"Finally, it is possible to specify what to do when the condition is false "
"using the following syntax:"
msgstr ""

#. type: Content of: <p><p><p><p><p><pre>
#: src/lessons/welcome/Conditions.html:132
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoIfTheConditionIsTrue();</b>\n"
"} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoIfItsFalse();</b>\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><p><p><pre>
#: src/lessons/welcome/Conditions.html:138
#, no-wrap
msgid ""
"if (<b>condition</b>):\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoIfTheConditionIsTrue()</b>\n"
"else:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<b>whatToDoIfItsFalse()</b>\n"
msgstr ""

#. type: Content of: <p><p><p><p><p><p>
#: src/lessons/welcome/Conditions.html:144
msgid ""
"Don't forget the colon (:) after the else, it is indicating that a new block "
"is beginning."
msgstr ""

#. type: Content of: <p><p><p><p><p><a>
#: src/lessons/welcome/Conditions.html:147
msgid ""
"<a name=\"Objectives\">If the buggle is facing a wall (predicate "
"<tt>isFacingWall()</tt>), you must move one step back. If not, you must move "
"one step forward."
msgstr ""

#. type: Content of: <p><p><p><p><p><a><p>
#: src/lessons/welcome/Conditions.html:151
msgid ""
"This exercise is a bit different: your code has to work for several buggles, "
"each of them being in a specific initial condition. The same code will be "
"executed for each of them."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/Conditions.html:155 src/lessons/welcome/LoopWhile.html:32
msgid "When your program works, move forward to the next exercise."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/LoopWhile.html:3
msgid ""
"In addition to conditionals, another handy construction is the ability to "
"repeat an action while a specific condition does not appear. A while loop is "
"used for that, with the following syntax:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/LoopWhile.html:6
#, no-wrap
msgid ""
"while (<b>condition</b>) {\n"
"&nbsp;&nbsp;<b>action()</b>;\n"
"}"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/LoopWhile.html:9
#, no-wrap
msgid ""
"while <b>condition</b>:\n"
"&nbsp;&nbsp;<b>action()</b>"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/LoopWhile.html:12
msgid ""
"Naturally, if the chosen action does not modify the value of the condition, "
"the buggle will do the action endlessly. The <b>stop</b> button of the "
"interface becomes then handy. To test this, you can try to type the "
"following code in the editor:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/LoopWhile.html:17
#, no-wrap
msgid ""
"while (true) {\n"
"&nbsp;&nbsp;turnLeft();\n"
"}"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/LoopWhile.html:20
#, no-wrap
msgid ""
"while True:\n"
"&nbsp;&nbsp;turnLeft()"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/LoopWhile.html:23
msgid ""
"The buggle will turn left while true is true (ie, endlessly), or until you "
"stop it manually using the stop button."
msgstr ""

#. type: Content of: <p><a>
#: src/lessons/welcome/LoopWhile.html:26
msgid ""
"<a name=\"Objective\">You now have to write some code so that your buggles "
"move forward until they encounter a wall. The idea is thus to do something "
"like:"
msgstr ""

#. type: Content of: <p><a><pre>
#: src/lessons/welcome/LoopWhile.html:29
#, no-wrap
msgid ""
"while we are not facing a wall, do:\n"
"&nbsp;&nbsp;moveForward()"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/LoopDoWhile.html:3
msgid ""
"Warning, this lesson is currently written in Java only, and deals with a "
"notion that does not exist in Python. Forget about it"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/LoopDoWhile.html:6
msgid ""
"In a <tt>while</tt> loop, the condition is evaluated before anything else, "
"and if it's false, the loop body is never evaluated. Sometimes (although not "
"that often), you would prefer the loop body to get evaluated at least once, "
"even if the condition is initially false. For that, a variation of the "
"<tt>while</tt> loop gets used, using the following syntax in Java:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/LoopDoWhile.html:12
#, no-wrap
msgid ""
"do {\n"
"&nbsp;&nbsp;<b>action()</b>;\n"
"} while (<b>condition</b>);"
msgstr ""

#. type: Content of: <p><a>
#: src/lessons/welcome/LoopDoWhile.html:16
msgid ""
"<a name=\"Objectives\"> Some cells of the world are yellow, but your buggle "
"cannot stand being in such cells as it is right now. Write the code needed "
"to move forward until the ground gets white. You can use for that the "
"isGroundWhite() method, that only the buggle of this exercise knows."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/LoopDoWhile.html:21
msgid "The general idea is to do something like:"
msgstr ""

#. type: Content of: <p><a><p><pre>
#: src/lessons/welcome/LoopDoWhile.html:22
#, no-wrap
msgid "move forward until located in a white cell"
msgstr ""

#. type: Content of: <p><a><p><p>
#: src/lessons/welcome/LoopDoWhile.html:24
msgid ""
"<i>Remark:</i> it is also possible to solve this exercise with a classical "
"<tt>while</tt> loop, but it's not the goal."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BaggleSeeker.html:2
msgid ""
"The buggle world can sometimes contain some <i>baggles</i>, which are little "
"biscuits that buggles can carry from one point to another. For that, they "
"have to use specific methods such as <code>isOverBaggle(), "
"isCarryingBaggle(), pickUpBaggle()</code> or "
"<code>dropBaggle()</code>. Check their documentation in \"Help/About this "
"world\" for more details."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/BaggleSeeker.html:10
msgid ""
"Let each buggle find its baggle by adapting the code you wrote in previous "
"exercise (copy/paste what you've done before to save time)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Variables.html:2
msgid ""
"The programs we wrote so far are missing a fundamental point in computing.  "
"Actually, it is all about processing <b>data</b> through specific "
"<b>instructions</b>. In the buggle world, the main data are a bit hidden "
"behind the graphical representation, but that's no reason to never "
"manipulate some data explicitly."
msgstr ""

#. type: Content of: <p><h3>
#: src/lessons/welcome/Variables.html:8
msgid "Data in Java"
msgstr ""

#. type: Content of: <p><h3>
#: src/lessons/welcome/Variables.html:9
msgid "Data in Python"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Variables.html:10
msgid ""
"In a program, you can use several <i>types</i> of data, such as integers or "
"strings of chars. If you want to use a data several times, you need to store "
"it within a <i>variable</i>, which is a memory cell containing a value. It's "
"not very different from a shelve containing a book: you put your data (say "
"'5') in the variable (say 'length'), and you can retrieve it latter when you "
"need it."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Variables.html:16
msgid ""
"Java is said to be a <i>typed</i> language, which means that it is only "
"possible to store a value in a variable of the right type. Don't think about "
"storing the letters of your name into an integer variable. In other "
"languages (such as Python)  allow you to store any kind of data in any "
"variable without such restriction, but not in Java."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Variables.html:20
msgid ""
"The Python language is said to <i>not typed</i>, which means you can store "
"any type of data into a given variable. Other languages (such as Java) "
"mandate that each variable store only data of a given type, but there is no "
"such difficulties here."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Variables.html:25
msgid ""
"To <i>declare</i> (ie, create) a variable, you just need to write its type, "
"a space, and the variable name. From the existing types, we can speak of "
"<b>int</b> (for integers), <b>double</b> for dot numbers, <b>boolean</b> for "
"booleans (ie, values being either true or false) and <b>String</b> for char "
"strings. If you want, you can specify the initial value of the variable by "
"adding a equal sign (=) followed by the value after the declaration."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Variables.html:31
msgid ""
"So, to create a variable named <b>x</b> intended to contain integers, one "
"can write:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Variables.html:32
#, no-wrap
msgid "int x;"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Variables.html:33
msgid "If you want that the variable contains 5 as initial value, you should type:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Variables.html:33
#, no-wrap
msgid "int x = 5;"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Variables.html:34 src/lessons/welcome/Variables.html:48
msgid ""
"Later in the program, if you want to <i>affect</i> a new value to the "
"variable, that's really easy:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Variables.html:35
#, no-wrap
msgid "x = 3;"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Variables.html:36
msgid ""
"The syntax to create an integer variable <code>x</code> with 4 as initial "
"value is the following:"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/Variables.html:38
#, no-wrap
msgid "int x = 4;"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Variables.html:39 src/lessons/welcome/Variables.html:50
msgid ""
"This quite the same story for strings, floating point numbers and boolean "
"values."
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Variables.html:41
#, no-wrap
msgid ""
"String name = \"Martin Quinson\";\n"
"double height=1.77; <span class=\"comment\">// in meters</span>\n"
"boolean married=true;"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Variables.html:45
msgid ""
"<i>Declaring</i> (ie, creating) a variable in Python is dead simple: you "
"just need to give it an initial value by writing its name, the equal sign "
"and the value."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Variables.html:47
msgid ""
"So, to create a variable named <b>x</b> which initial value should be 5, you "
"should type:"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/Variables.html:47
#, no-wrap
msgid "x = 5"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/Variables.html:49
#, no-wrap
msgid "x = 3"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/Variables.html:52
#, no-wrap
msgid ""
"firstName = \"Martin\"\n"
"lastName = 'Quinson' <span class=\"comment\"># both single and double quote "
"work here</span>\n"
"motto = \"I never finish anyth' (but I keep trying)\" <span "
"class=\"comment\"># having single quote within double quote is fine</span> "
"\n"
"height=1.77 <span class=\"comment\"># in meters</span>\n"
"married=True <span class=\"comment\"># the contrary would be written "
"False</span>"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Variables.html:59
msgid ""
"To the right of the equal symbol, you can put an expression containing "
"constants, variables and operations:"
msgstr ""

#. type: Content of: <p><p><p><p><pre>
#: src/lessons/welcome/Variables.html:62
#, no-wrap
msgid ""
"x = 3 + 2;\n"
"x = 3 * x;\n"
"greeting = \"Hello \"+name;\n"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/Variables.html:69
msgid ""
"It is now time to do more challenging exercises, don't you think? The "
"objective is now to move forward until you find a baggle, pick it up, and "
"then move back to your initial location before dropping the baggle."
msgstr ""

#. type: Content of: <p><p><p><p><h3>
#: src/lessons/welcome/Variables.html:74
msgid "How to do this?"
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:75
msgid ""
"To solve this problem, you have to decompose it in easier sub-parts. For "
"example, you may want to do the following steps:"
msgstr ""

#. type: Content of: <p><p><p><p><p><ol><li>
#: src/lessons/welcome/Variables.html:78
msgid "Move forward until located over a baggle"
msgstr ""

#. type: Content of: <p><p><p><p><p><ol><li>
#: src/lessons/welcome/Variables.html:79
msgid "Pickup the baggle"
msgstr ""

#. type: Content of: <p><p><p><p><p><ol><li>
#: src/lessons/welcome/Variables.html:80
msgid "Move backward of the same amount of steps than done in first step"
msgstr ""

#. type: Content of: <p><p><p><p><p><ol><li>
#: src/lessons/welcome/Variables.html:81
msgid "Drop back the baggle"
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:84
msgid ""
"Naturally, it is impossible to do the right amount of steps backward at step "
"3 if you didn't count the amount of steps done in the first phase. You can "
"use a variable for that, which can be named <code>stepAmount</code>."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:88
msgid ""
"Create a variable (of type <code>int</code>) before phase 1, initialize it "
"to 0, and each time you move one step forward, increment its value by one "
"(<code>stepAmount = stepAmount + 1;</code> or <code>stepAmount++;</code>, "
"both syntaxes being equivalent)."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:92
msgid ""
"Create a variable before phase 1, initialize it to 0, and each time you move "
"one step forward, increment its value by one (<code>stepAmount = stepAmount "
"+ 1</code>)."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:96
msgid ""
"Then, phase 3 consists in simply creating a new integer variable "
"<code>doneSteps</code> initialized to 0, and do one step backward until "
"<code>doneSteps</code> equals <code>stepAmount</code>, incrementing "
"<code>doneSteps</code> each time."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:101
msgid ""
"Please note that it is forbidden to use spaces in variable names. So you can "
"name you variable <code>stepAmount</code>, but <code>step Amount</code> is "
"not a valid name."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/Variables.html:105
msgid "It's your turn now!"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/LoopFor.html:3
msgid "Warning, this lesson is currently written in Java only. Adapt it yourself"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/LoopFor.html:5
msgid ""
"While loops are well adapted to situations where you want to achieve an "
"action while a condition stays true, but it is less adapted to achieve a "
"given action a predetermined amount of time. For example, when we wanted to "
"move <code>stepAmount</code> steps backward in previous exercise, you had to "
"create a new variable, initialize it, and move backward until the new "
"variable became equal to <code>stepAmount</code>, incrementing the new "
"variable manually at the end of the loop."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/LoopFor.html:13 src/lessons/welcome/LoopFor.html:26
msgid ""
"In such situations, <code>for</code> loops become handy. Their syntax is the "
"following:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/LoopFor.html:15 src/lessons/welcome/LoopFor.html:28
#, no-wrap
msgid ""
"for (<b>initializing</b>; <b>condition</b>; <b>incrementing</b>) {\n"
"&nbsp;&nbsp;&nbsp;<b>action</b>();\n"
"}"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/LoopFor.html:19 src/lessons/welcome/LoopFor.html:32
msgid "This code is perfectly equivalent to the following:"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/LoopFor.html:20 src/lessons/welcome/LoopFor.html:33
#, no-wrap
msgid ""
"<b>initializing</b>;\n"
"while (<b>condition</b>) {\n"
"&nbsp;&nbsp;&nbsp;<b>action</b>();\n"
"&nbsp;&nbsp;&nbsp;<b>incrementing</b>;\n"
"}"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/LoopFor.html:39
msgid ""
"For example, both following codes are equivalent. The latter is easier to "
"read, don't you think?"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/LoopFor.html:42
#, no-wrap
msgid ""
"int done = 0;\n"
"while (done &lt; stepAmount) {\n"
"&nbsp;&nbsp;&nbsp;backward();\n"
"&nbsp;&nbsp;&nbsp;done++;\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/LoopFor.html:47
#, no-wrap
msgid ""
"for (int done = 0; done &lt; stepAmount; done++) {\n"
"&nbsp;&nbsp;&nbsp;backward();\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/LoopFor.html:51
msgid ""
"It is possible to build more advanced <tt>for</tt> loops since any valid "
"instruction can be used as initialization, condition and incrementation. The "
"following example is a bit extrem since it compute the gcd (greatest common "
"divisor) of two numbers without loop body and initialization (everything is "
"in the condition and incrementation)."
msgstr ""

#. type: Content of: <p><p><p><p><pre>
#: src/lessons/welcome/LoopFor.html:57
#, no-wrap
msgid ""
"int x=20, y=3, tmp;\n"
"for (; y!=0 ; tmp=x, x=y, y=tmp%y) { }\n"
" <span class=\"comment\">/* the gcd is stored in x */</span>"
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/LoopFor.html:61
msgid ""
"If you don't understand every details of this example, don't panic. That's "
"quite logic since it uses some syntax details that we did not introduce yet."
msgstr ""

#. type: Content of: <p><p><p><p><a>
#: src/lessons/welcome/LoopFor.html:65
msgid ""
"<a name=\"Objectives\"> You now have to redo the same exercise than "
"previously (move forward until being over a baggle, pick it up, move back to "
"your original location, drop the baggle), but using a <tt>for</tt> loop "
"instead of a <tt>while</tt> loop to move back to the initial location."
msgstr ""

#. type: Content of: <p><p><p><p><a><p>
#: src/lessons/welcome/LoopFor.html:70
msgid "Once done, proceed to next exercise."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Methods.html:4
msgid ""
"We will now write our own methods. It somehow comes down to extending the "
"buggle vocabulary by learning it new tricks."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Methods.html:7
msgid ""
"For example, we saw in previous exercise how to ask the buggle to go get the "
"baggle in front of it, and bring it back. If there is several baggles on the "
"board, and if we want to bring all of them on the bottom line, you have to "
"repeate this code several times, or include it in a loop. In any case, the "
"result may reveal unpleasant to read, and it would be better if the buggle "
"could obey an <code>goAndGet()</code> order just like it understands a "
"<code>forward()</code> one."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Methods.html:16 src/lessons/welcome/Methods.html:22
msgid ""
"The syntax to write a simple method called <code>goAndGet</code> is the "
"following:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Methods.html:18
#, no-wrap
msgid ""
"def goAndGet():\n"
"  actions();\n"
"  to();\n"
"  do();"
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/Methods.html:24
#, no-wrap
msgid ""
"public void goAndGet() {\n"
"  actions();\n"
"  to();\n"
"  do();\n"
"}"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:30
msgid ""
"The method body (between curly braces) can contain as many instructions as "
"you want, and any construction we saw so far (for, while, if, etc)."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:32
msgid ""
"The method body (the code that is indended) can contain as many instructions "
"as you want, and any construction we saw so far (for, while, if, etc)."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:35
msgid ""
"We will come back later on the exact signification of the "
"<code>public</code> keyword. Let's say for now that it means that everybody "
"can use this method."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:39
msgid ""
"<code>void</code> means that the method does not return any result. We said "
"previously that the <code>isOverBaggle()</code> method returns a boolean and "
"can thus be used as a condition in a if or a while. This means that it is "
"declared the following way:"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/Methods.html:43
#, no-wrap
msgid "public boolean isOverBaggle() { ... }"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:45
msgid ""
"We will introduce in next exercise how to do this kind of tricks. For now, "
"let's just write <code>void</code> at this location."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/Methods.html:48
msgid ""
"In Java, the convention is to use lower case for the first letter of a "
"method name and concatenate every word describing the method using a upper "
"case for each first letter. It is forbidden to use spaces or accentuated "
"letters in a method name. That is why we write \"go and get\" as goAndGet()."
msgstr ""

#. type: Content of: <p><p><a>
#: src/lessons/welcome/Methods.html:59
msgid ""
"<a name=\"Objectives\"> The goal of this exercise is to write a method "
"called <code>goAndGet()</code> which does the same than in previous "
"exercises (move forward until over a baggle, pick it up, move back to "
"initial position, drop baggle)."
msgstr ""

#. type: Content of: <p><p><a><p>
#: src/lessons/welcome/Methods.html:64
msgid ""
"One particularity of this exercise is that all your code should be written "
"in this function, with nothing out of it. The code that calls your function "
"will be automagically added when you click on <b>Start</b>."
msgstr ""

#. type: Content of: <p><p><a><p>
#: src/lessons/welcome/Methods.html:68
msgid ""
"One particularity of this exercise is that you shouldn't write directly the "
"code that the buggle should execute, but a method it should use. Actually, "
"in any previous exercise, you wrote the body of a specific method called "
"<code>run()</code> which gets invoked by the environment when you click on"
msgstr ""

#. type: Content of: <p><p><a>
#: src/lessons/welcome/Methods.html:73
msgid "<b>Start</b>."
msgstr ""

#. type: Content of: <p><p><a><p>
#: src/lessons/welcome/Methods.html:74
msgid ""
"Don't try to define this method here, since the buggle already knows "
"it. This would cause trouble to the compiler, which would give you an error "
"message in exchange. For your information, here is the <code>run()</code> "
"method of this exercise:"
msgstr ""

#. type: Content of: <p><p><a><p><pre>
#: src/lessons/welcome/Methods.html:79
#, no-wrap
msgid ""
"public void run() {\n"
"&nbsp;&nbsp;for (int i=0; i&lt;7; i++) { \n"
"&nbsp;&nbsp;&nbsp;&nbsp;goAndGet();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;turnRight();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;forward();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;turnLeft();\n"
"&nbsp;&nbsp;}\n"
"}"
msgstr ""

#. type: Content of: <p><p><a><p>
#: src/lessons/welcome/Methods.html:88
msgid ""
"Your buggle will repeat 7 times (which matches the world's dimension)  "
"sequence constituted of a call to the <code>goAndGet()</code> method that "
"you should write, plus a move to get to the next row (turn right, move "
"forward, turn left). As you can see, the buggle will do one step right from "
"the right border of the world. It will bring it back to the left side since "
"its world is a torus."
msgstr ""

#. type: Content of: <p><p><a><p>
#: src/lessons/welcome/Methods.html:95
msgid "You should now write this goAndGet() method."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsDogHouse.html:3
msgid ""
"We now would like to learn the buggle to build a doghouse. The seamingly "
"simpler approach consists in directly writing the needed code as follows (it "
"works because the buggle of this exercise leaves a red path as it moves)."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/MethodsDogHouse.html:8
#, no-wrap
msgid ""
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
"forward();\n"
"forward();\n"
"turnLeft(); \n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsDogHouse.html:22
msgid ""
"It becomes harder when we want to draw two doghouses: we have to rewrite the "
"same code twice, which is not really handy. Even worse: it's definitively "
"not good form to dupplicate code this way. Indeed, if you realize that an "
"error sneaked into a code that you copied at several locations, you will "
"have to fix it several times. And mind your back if you forget one of these "
"locations."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsDogHouse.html:29
msgid ""
"It is good form to <b>factorize your code</b>, ie to write it only once, for "
"example in a method. This is what you will do now. It is even possible to go "
"further by factorizing the method body with a <code>for</code> loop, as seen "
"previously."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsDogHouse.html:34
msgid ""
"The goal of this exercise is to write a method called <code>dogHouse</code> "
"achieving the same result than the code above. The buggle will call your "
"creation to create several dog houses around its world. Remind to factorize "
"your method with a for loop."
msgstr ""

#. type: Content of: <a><p>
#: src/lessons/welcome/MethodsDogHouse.html:39 src/lessons/welcome/Array.html:161 src/lessons/welcome/Array2.html:26 src/lessons/maze/RandomMouseMaze.html:41
msgid "You're up."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsReturning.html:3
msgid ""
"Writing a method returning a result is not really more work than writing a "
"method without any result. You simply have to specify the data type of "
"expected results before the method name, and then write a "
"<code>return</code> instruction in your method body to specify the actual "
"value to return."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/MethodsReturning.html:9
#, no-wrap
msgid ""
"double pi() {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return 3.14159;\n"
"}\n"
"boolean isNumberTwoEven() {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;return true;\n"
"}\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:17
msgid ""
"It is possible to have several <code>return</code> instructions in several "
"branches of a conditional. It is even forbiden to have one execution path of "
"your body without any <code>return</code>, or to write some code after the "
"<code>return</code> instruction."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:22
msgid ""
"Indeed, if the machine reaches the end of the method without finding any "
"<code>return</code>, it cannot know what actual value to give back to the "
"method caller. Moreover, <code>return</code> interrupts immediately the "
"method execution (why bother looking further when you know the method "
"result?). So, if there is some code after a <code>return</code>, it must be "
"an error and the compiler warns you."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/MethodsReturning.html:29
#, no-wrap
msgid ""
"boolean negation(boolean cond) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;if (cond == true) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* "
"no code allowed here */</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* "
"here neither */</span>\n"
"&nbsp;&nbsp;&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">/* even here, forget it "
"*/</span>\n"
"}"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsReturning.html:41
msgid ""
"You will once again write a method that the buggle will use. Its name must "
"be <code>haveBaggle</code>, and it returns a boolean value indicating "
"whether the row in front of the buggle contains a baggle or not. The buggle "
"will use it to search the first row containing a baggle, and stop here."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:46
msgid ""
"The easier for this method is to use a boolean variable called "
"<code>seenBaggle</code> indicating whether or not we saw a baggle so far. It "
"initial value is 'false'."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:50
msgid ""
"Then, move 6 steps forward (the world contains 7 cells and we already are "
"one one of them). For each cell, if it contains a baggle, we store true in "
"<code>sawBaggle</code> (and we don't do anything but moving forward if not)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:54
msgid ""
"At the end, we move back by 6 steps, and we return the value of "
"<code>seenBaggle</code> to the caller."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:58
msgid ""
"This exercise is a bit different since there is two initial worlds, each "
"with a specific objective. Your code must work for each of them. Observe "
"that the world selection scrolling menu (right below the speed slider)  "
"allows to switch the observed world."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsReturning.html:63
msgid "When your method <code>haveBaggle</code> works, proceed to next exercise."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsArgs.html:3
msgid ""
"Don't you get tired of writing again and again the code to move by a fixed "
"amount of steps? On the other hand, writting <tt>forward2()</tt>, "
"<tt>forward3()</tt>, <tt>forward4()</tt>, as well as <tt>backward2()</tt>, "
"<tt>backward3()</tt>, <tt>backward4()</tt>, and so on does not really help"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsArgs.html:8
msgid ""
"Luckily, it is possible to pass <b>parameters</b> to your methods. You have "
"to specifiy their type and name between the parenthesis after the method "
"name. Then, you can use them in the method body as if it were variables "
"defined in there, and which initial value is what the caller specified."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/MethodsArgs.html:13
#, no-wrap
msgid ""
"double divideByTwo(double x) {\n"
"&nbsp;&nbsp;return x / 2;\n"
"}"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/MethodsArgs.html:17
msgid ""
"As caller, you have to specify the initial value of this \"variables\" "
"between the call's parenthesis."
msgstr ""

#. type: Content of: <p><p><pre>
#: src/lessons/welcome/MethodsArgs.html:19
#, no-wrap
msgid "double y = divideByTwo(3.14);"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/MethodsArgs.html:21
msgid ""
"If you want several parameters, you need to separate them with comas (,)  "
"both in the declaration and calls."
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/MethodsArgs.html:24
#, no-wrap
msgid ""
"double divide(double x, double y) {\n"
"&nbsp;&nbsp;return x / y;\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/MethodsArgs.html:27
#, no-wrap
msgid "double y = divide(3.14 , 1.5);"
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:29
msgid ""
"In Java, you can declare several methods of the same name as long as they "
"don't have the same parameter types and number (they are said to have "
"different <b>signature</b>)."
msgstr ""

#. type: Content of: <p><p><p><p><pre>
#: src/lessons/welcome/MethodsArgs.html:32
#, no-wrap
msgid ""
"int max(int x, int y) {\n"
"  if (x > y) {\n"
"    return x;\n"
"  }\n"
"  return y;\n"
"}\n"
"int max(int x, int y, int z) {\n"
"  if (x > y && x > z) {\n"
"    return x;\n"
"  }\n"
"  if (y > z) {\n"
"    return y;\n"
"  }\n"
"  return z;\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:48
msgid ""
"Observe that we omitted the <tt>else</tt> branches of each <tt>if</tt>. It "
"works anyway because a <tt>return</tt> interrupts the method execution. If "
"we arrive to the last line of <code>max(int,int)</code>, we know that "
"<code>x&lt;=y</code> because on the other case, the <tt>return</tt> of line "
"2 would have stopped the execution."
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:54
msgid ""
"This time, you have to write a <code>move(int stepCount,boolean "
"forward)</code> method which move forward of <code>stepCount</code> if "
"<code>forward</code> is true, and move back of that amount of steps if the "
"boolean is false. The buggle will use some methods we did not introduce yet "
"to guess its position and orientation in order to determine the amount of "
"steps to do and their direction, but it is not relevant here."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:61
msgid ""
"This time, there is only one world, and seven buggles. But it does not "
"change anything for you, since the same code is used for any buggles."
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:64
msgid "The code of the method to write should not be really problematic for you."
msgstr ""

#. type: Content of: <p><p><p><p><h2>
#: src/lessons/welcome/MethodsArgs.html:66
msgid "What's coming next?"
msgstr ""

#. type: Content of: <p><p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:67
msgid ""
"You now know the very basics of Java Programming. At least, we introduced "
"all the important concepts, and you should be able to read most Java code by "
"now. If you want to play safe, you should proceed to the next exercises of "
"this lesson to solidify your knowledge by reusing these concepts in various "
"simple situations. After taking them, you'll master what's called \"Tactical "
"programming\", meaning that you will master the Java syntax enough to not "
"have any issue with it, allowing you to focus on the fundamental problems of "
"what you want to solve instead of struggling with syntaxic "
"difficulties. Some of these exercises are even fun to do ;)"
msgstr ""

#. type: Content of: <p><p><p><p><p><p>
#: src/lessons/welcome/MethodsArgs.html:75
msgid ""
"If you are in a hurry and want more, you can skip these exercises and "
"proceed directly to more interesting challenges. For example, the "
"<i>Labyrinths</i> lesson will teach you about maze escaping algorithms, "
"which are not rocket science but require several improvements to work for "
"any kind of maze. The <i>Lightbot</i> lesson is a little programming game "
"where you control a little robot wanting to light the world. Since it is not "
"programmed in Java but graphically, the first exercises can be used as an "
"introduction activity to what programming means for real beginners, but the "
"last exercises constitute challenges and brain teaser even to professional "
"programmers."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsPicture.html:3
msgid ""
"In this exercise, we will reproduce the geometric drawing that you can see "
"in the \"Objective\" tab."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture.html:6
msgid ""
"Your goal (here and in any well written program) is to write the simplest "
"possible <code>run()</code>. For that, you have to decompose your work in "
"sub-steps, and write a specific method for each sub-step."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture.html:10
msgid ""
"If you observe carefully the picture to draw, it is constituted of four "
"parts depicting a sort of V using a different color. A possible "
"decomposition is to write a method in charge of drawing a V of the specified "
"color from the current position. Its prototype can be:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/MethodsPicture.html:14
#, no-wrap
msgid "void makeV(Color c)"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/MethodsPicture.html:16
msgid ""
"The <code>Color</code> data type naturally describes a particular "
"color. Your <code>run()</code> method should probably call "
"<code>makeV</code> with the following arguments (a different color for each "
"call):"
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/welcome/MethodsPicture.html:21
msgid "Color.yellow"
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/welcome/MethodsPicture.html:22
msgid "Color.red"
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/welcome/MethodsPicture.html:23
msgid "Color.blue"
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/welcome/MethodsPicture.html:24
msgid "Color.green"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/MethodsPicture.html:27
msgid ""
"In <code>makeV()</code>, you should use the <code>setBrushColor()</code> "
"method (predefined in the buggle) to change the color of the buggle's brush, "
"as well as <code>brushUp()</code> and <code>brushDown()</code> to change the "
"brush position."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/MethodsPicture.html:32
msgid ""
"It may be wise to write the <code>makeV()</code> so that it places directly "
"the buggle in position for the next V."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/MethodsPicture.html:35
msgid ""
"Your turn. The <code>run()</code> method should not be longer than 4 "
"lines..."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsPicture2.html:3
msgid ""
"We will now reproduce an even bigger geometrical drawing. Once again, you "
"can see the model by clicking on the \"Objective\" tab."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture2.html:6
msgid ""
"You can naturally reuse all the code you typed in previous exercise (select "
"the other exercise, do Ctrl-C, come back to the code of this exercise, do "
"Ctrl-V)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture2.html:10
msgid ""
"But you want to keep your <code>run()</code> as simple as possible. For "
"that, define new methods to deal simply with the repetitions in the "
"pattern. For example, a method <code>makePattern()</code> achieving the "
"pattern of previous example seems to be a good idea (but this may not be "
"enough)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture2.html:16
msgid ""
"Why don't you give it a shot? The <code>run()</code> method shouldn't take "
"more than 2 lines (included in a for loop)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture2.html:19
msgid ""
"To proceed to the next exercise, you need to remark that the combobox used "
"to switch the exercise have a scroll bar that you can use to see the next "
"exercises of the lesson."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsPicture3.html:3
msgid ""
"As you can imagine, you have to reproduce the geometric drawing depicted in "
"the \"Objectives\" tab. As you can see, it is even bigger than the previous "
"one."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture3.html:7
msgid ""
"You thus have to declare even more methods to use the repetitions of the "
"pattern and factorize your code. Another solution is to <i>parametrize</i> "
"your functions to reuse the code you wrote previously by changing the size."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture3.html:11 src/lessons/welcome/Snake.html:44 src/lessons/welcome/TraversalByColumn.html:49 src/lessons/welcome/TraversalByLine.html:10 src/lessons/welcome/TraversalDiagonal.html:10 src/lessons/welcome/TraversalZigZag.html:6
msgid "Your turn..."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/BDR.html:1
msgid "Buggle Dance Revolution (BDR)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:3
msgid ""
"Today is a great day: we will learn the buggles to play Dance Revolution, "
"this game beloved of some students where the player has to move its feet on "
"the carpet according to the instructions presented on the screen, and "
"following the music. But before that, we have some details to study first."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/BDR.html:8
msgid "Conditionals without curly braces"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:10
msgid ""
"There is one detail we omitted about the conditional syntax: if a branch "
"contains only one instruction, then the curly braces become optional. So, "
"the two chunk of code are equivalent:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:14
#, no-wrap
msgid ""
"if (<b>condition</b>) {\n"
"    <b>whatToDoIfTheConditionIsTrue();</b>\n"
"} else {\n"
"    <b>whatToDoElse();</b>\n"
"}"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:19
#, no-wrap
msgid ""
"if (<b>condition</b>) \n"
"    <b>whatToDoIfTheConditionIsTrue();</b>\n"
"else\n"
"    <b>whatToDoElse();</b>"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:24
msgid ""
"But beware, this becomes dangerous if you chain the <tt>if</tt> instructions "
"like this:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:26
#, no-wrap
msgid ""
"if (isOverBaggle())    \n"
"     if (x == 5)\n"
"          turnLeft();\n"
"else\n"
"     turnRight();\n"
"forward();"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:33
msgid ""
"In fact, it does not turn right when there is no baggle on the ground AND x "
"equals 5, but when the buggle found a baggle on the ground and x equals "
"anything but 5. Putting this otherwise, the buggle understands the previous "
"code as if it were written the following way (note that the <tt>else</tt> "
"were moved to the right):"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:38
#, no-wrap
msgid ""
"if (isOverBaggle())    \n"
"        if (x == 5)\n"
"            turnLeft();\n"
"        else\n"
"            turnRight();\n"
"forward();"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:45
msgid ""
"The first lesson of this is that the indentation is very helpful to help "
"humans understanding, but it's of no importance for the actual meaning of "
"the code. We could have written the following code and obtain the same "
"result. But beware, if you want a human to read and review your code, you "
"really want to indent it correctly. That's for example the case if you want "
"a professor to read it (to grade it or to answer a question about it), or if "
"you want to reuse your code later."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:53
#, no-wrap
msgid "if (isOverBaggle()) if (x == 5) turnLeft(); else turnRight(); forward();"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:55
msgid ""
"The second lesson is that a <tt>else</tt> branch always connects to the "
"closest <tt>if</tt>. This may be a bit troublesome in some case, and it may "
"be easier to add more braces than strictly needed to remove any ambiguity."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/BDR.html:59
msgid "Chaining conditionals"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:61
msgid "You sometimes want to ask the buggle something similar to:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:62
#, no-wrap
msgid ""
"if it's raining, take an umbrella;\n"
"if not, and if it's a hot day, take a bottle of water;\n"
"if not and if it's July 4th, take an american flag"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:66
msgid ""
"The trap is that we want at most one of these actions to be taken. That is "
"to say, if it's raining a very hot July 4th, we don't want the buggle to get "
"outside with an umbrella, some water and a flag, but simply with an "
"umbrella. The following code is thus WRONG."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:71
#, no-wrap
msgid ""
"if (rainy()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella();\n"
"}\n"
"if (hot()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeWater();\n"
"} \n"
"if (todayIsJuly4th()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeFlag();\n"
"}"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:81
#, no-wrap
msgid ""
"if rainy():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella()\n"
"if hot():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeWater()\n"
"if todayIsJuly4th():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeFlag()\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:90
msgid ""
"Indeed, since the conditions are evaluated one after the other, there is a "
"risk that you go to the July 4th march on a rainy day. Instead, we should "
"use something like this:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:94
#, no-wrap
msgid ""
"if (rainy()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella();\n"
"} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;if (hotDay()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takeWater();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;} else {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (todayIsJuly4th()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takeFlag();\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n"
"&nbsp;&nbsp;&nbsp;&nbsp;}\n"
"}"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:106
#, no-wrap
msgid ""
"if rainy():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella()\n"
"else:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;if hotDay():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takeWater()\n"
"&nbsp;&nbsp;&nbsp;&nbsp;else:\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if todayIsJuly4th():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takeFlag()\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:117
msgid ""
"Such a cascade of conditionals are quite difficult to read, and it is better "
"to omit the curly braces for the <tt>else</tt> statements. Some languages "
"even introduce a specific construct for these <tt>else if</tt> (but Java "
"doesn't)."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR.html:121
#, no-wrap
msgid ""
"if (rainy()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella();\n"
"} else if (hotDay()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeWater();\n"
"} else if (todayIsJuly4th()) {\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeFlag();\n"
"}"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:129
msgid ""
"Such a cascade of conditionals are quite difficult to read, and it is better "
"to omit extra indentation for the <tt>else</tt> statements. In Python, there "
"is a specific construct for this: <tt>elif</tt>."
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/BDR.html:132
#, no-wrap
msgid ""
"if rainy():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeUmbrella()\n"
"elif hotDay():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeWater()\n"
"elif todayIsJuly4th():\n"
"&nbsp;&nbsp;&nbsp;&nbsp;takeFlag()\n"
"}"
msgstr ""

#. type: Content of: <p><h3>
#: src/lessons/welcome/BDR.html:140
msgid "Graffitis in the Buggle World"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR.html:142
msgid ""
"Buggles can write graffitis on the ground of their world. For that, they use "
"the four following methods:"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/BDR.html:146
msgid ""
"<code>boolean isOverMessage()</code>: returns true if and only if there is a "
"message on the ground."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/BDR.html:148
msgid ""
"<code>String readMessage()</code>: returns the message written on the ground "
"(or an empty string if nothing is written)."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/BDR.html:150
msgid ""
"<code>void writeMessage(String msg)</code>: writes the specified message "
"down on the ground. If there is already a message on the ground, the new "
"content is added at the end of the existing message."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/BDR.html:153
msgid "<code>void clearMessage()</code>: clears what is written on the ground."
msgstr ""

#. type: Content of: <p><a>
#: src/lessons/welcome/BDR.html:157
msgid ""
"<a name=\"Objectives\">The goal is then to organize a BDR game between the "
"buggles by learning them to move according to the instructions written on "
"the ground. These instructions are messages written on the ground, with the "
"following signification:"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:163 src/lessons/welcome/BDR2.html:121
msgid "Message"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:164 src/lessons/welcome/BDR2.html:122
msgid "What to do"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:165
msgid "Mnemonic"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/BDR.html:167 src/lessons/welcome/BDR2.html:124 src/lessons/welcome/cells/TurmiteCreator.html:30 src/lessons/welcome/cells/TurmiteCreator.html:33
msgid "R"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:167 src/lessons/welcome/BDR2.html:124
msgid "Turn right and move one step forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:167
msgid "Right"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:168 src/lessons/welcome/BDR2.html:125
msgid "L"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:168 src/lessons/welcome/BDR2.html:125
msgid "Turn left and move one step forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:168
msgid "Left"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:169 src/lessons/welcome/BDR2.html:126
msgid "I"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:169
msgid "Turn back (U-turn) and move one step forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:169
msgid "Inverse"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:171 src/lessons/welcome/BDR2.html:128
msgid "A"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:171 src/lessons/welcome/BDR2.html:128
msgid "Move one step forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:171
msgid "First letter of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:172 src/lessons/welcome/BDR2.html:129
msgid "B"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:172 src/lessons/welcome/BDR2.html:129
msgid "Move two steps forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:172
msgid "Second letter of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:173 src/lessons/welcome/BDR2.html:130
msgid "C"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:173 src/lessons/welcome/BDR2.html:130
msgid "Move three steps forward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:173
msgid "Third letter of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:175 src/lessons/welcome/BDR2.html:135
msgid "Z"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:175 src/lessons/welcome/BDR2.html:135
msgid "Move one step backward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:175
msgid "One letter before the end of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:176 src/lessons/welcome/BDR2.html:136
msgid "Y"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:176 src/lessons/welcome/BDR2.html:136
msgid "Move two steps backward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:176
msgid "Two letters before the end of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:177 src/lessons/welcome/BDR2.html:137
msgid "X"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR.html:177 src/lessons/welcome/BDR2.html:137
msgid "Move three steps backward"
msgstr ""

#. type: Content of: <p><a><table><tr><td>
#: src/lessons/welcome/BDR.html:177
msgid "Three letters before the end of the alphabet"
msgstr ""

#. type: Content of: <p><p><p><a><p><p>
#: src/lessons/welcome/BDR.html:180 src/lessons/welcome/BDR2.html:143
msgid "In any other case, you should stop"
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/BDR.html:182
msgid ""
"Write the code of the dance in the <code>run()</code> method which prototype "
"is already in the editor."
msgstr ""

#. type: Content of: <p><a><h3>
#: src/lessons/welcome/BDR.html:185
msgid "Indications"
msgstr ""

#. type: Content of: <p><a>
#: src/lessons/welcome/BDR.html:187
msgid ""
"This exercise may seem a bit complex at the first glance, but it comes down "
"to summarizing the information above in a sequence of conditionals."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/BDR.html:192
msgid ""
"The first subtlety is that we use the <code>char getIndication()</code> "
"instead of <code>String readMessage()</code>. This method, only known by the "
"buggles of this exercise, return the first char of the message written on "
"the ground (or ' ' if nothing is written down)."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/BDR.html:197
msgid ""
"The other subtlety is to keep working as long as there is some work to do, "
"i.e., as long as we did not find a cell which content is not described in "
"the table. The easier for that is to use an infinite loop (<code>while "
"(true)</code>) with all the tests in the loop body. If we find a cell not "
"described in the table, we stop everything using a simple "
"<code>return;</code>."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/BDR.html:204
msgid ""
"The functions having <code>void</code> as return type can contain some "
"<tt>return</tt> without any associated value. It interrupts immediately "
"their execution."
msgstr ""

#. type: Content of: <p><a><h3>
#: src/lessons/welcome/BDR.html:208
msgid "Tips and Hints"
msgstr ""

#. type: Content of: <p><a>
#: src/lessons/welcome/BDR.html:210
msgid ""
"If you fail understanding why the buggle does not execute the expected "
"steps, try adding <code>brushDown()</code> in your method. This asks the "
"buggle to put down a brush leaving a trail when it moves. It should help you "
"understanding its trajectory, but do not forget to remove this call when you "
"want to test whether your code is a valid solution to the exercise: you are "
"asked to let the buggle dance, not to vandalize the dance floor."
msgstr ""

#. type: Content of: <p><a><p>
#: src/lessons/welcome/BDR.html:217
msgid "When your program finally works, move on to the next exercise."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/BDR2.html:2
msgid "(BDR2)"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BDR2.html:4
msgid ""
"BDR is cool, but it's a bit chaotic. First, the buggles giggle in any "
"directions, and then the code you had to write to let them move is rather "
"difficult to read. Here is a new BDR world where the buggle will dance a "
"gentle circle. We will benefit this tranquillity to clean up a bit our code "
"thanks to the new constructs we will introduce."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/BDR2.html:10
msgid "<tt>switch</tt> conditionals"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BDR2.html:12
msgid ""
"The hardest part of previous code is certainly the conditional "
"cascading. Somewhere in your code, you certainly had something similar to:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR2.html:15
#, no-wrap
msgid ""
"if (getIndication() == 'R') {\n"
"  turnRight();\n"
"  forward();\n"
"} else if (getIndication() == 'L') {\n"
"  turnLeft();\n"
"  forward();\n"
"} else if (getIndication() == 'I') {\n"
"  turnBack();\n"
"  forward();\n"
"/* other else if */\n"
"} else {\n"
"  return;\n"
"}\n"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BDR2.html:30
msgid ""
"When you review this code, it may not be clear at the first glance that it "
"is simply a choice with 4 branches depending on the value of "
"getIndication(). To improve this, we will use a <code>switch</code> "
"construct, which Java syntax is the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR2.html:36
#, no-wrap
msgid ""
"switch (<b>expression</b>) {\n"
"  case <b>firstValue</b>: \n"
"    <b>whatToDoIfExpressionEqualsFirstValue();</b>\n"
"    break;\n"
"  case <b>secondValue</b>: \n"
"    <b>whatToDoIfExpressionEqualsSecondValue();</b>\n"
"    break;\n"
"  case <b>thirdValue</b>: \n"
"    <b>whatToDoIfExpressionEqualsThirdValue();</b>\n"
"    break;\n"
"    /* as much similar cases as you want */\n"
"  default: \n"
"    <b>whatToDoIfExpressionDoesNotEqualsAnySeenValues();</b>\n"
"}"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BDR2.html:51
msgid ""
"Observe that each branch of a <tt>switch</tt> must be ended by a "
"<code>break</code>. If you forget this, the machine keeps going and execute "
"the next branch in the list after the branch it jumped to. There is even "
"some <b>rare</b> cases where this behavior reveals helpful."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR2.html:56
msgid ""
"It is then possible to rewrite previous BDR code in a cleaner way using the "
"<tt>switch</tt> construct:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/BDR2.html:59
#, no-wrap
msgid ""
"switch (getIndication()) {\n"
"  case 'R':\n"
"    turnRight(); \n"
"    forward(); \n"
"    break;\n"
"  case 'L':\n"
"    turnLeft();\n"
"    forward(); \n"
"    break;\n"
"  case 'U':\n"
"    turnBack();\n"
"    forward();\n"
"    break;\n"
"  default: \n"
"    return;\n"
"}"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/BDR2.html:77
msgid "Variables shared between methods"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/BDR2.html:79
msgid ""
"Another issue in your code is that it begins to be a bit long to be written "
"as a single method. We would like to split it up in two methods:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BDR2.html:82
msgid "<code>danceOneStep()</code> would take care of achieving a single dance step"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/BDR2.html:83
msgid ""
"<code>run()</code> would take care of the dance as a whole. It would do the "
"steps while we didn't encounter a cell not asking any further move."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/BDR2.html:87
msgid ""
"The difficulty is to make sure that <tt>danceOneStep()</tt> keeps "
"<tt>run()</tt> informed that there is no further dance step to achieve. The "
"simpler solution is to have a boolean function visible from both methods "
"indicating whether there is more steps to do or if we're done. For that, we "
"have to write out the following of any method:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/BDR2.html:92
#, no-wrap
msgid "boolean moreMusic = true;"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/BDR2.html:94
msgid ""
"Note that it is possible to write variable declarations out of any methods, "
"but that instructions must be in a method. In Java such <i>global</i> "
"variables are called <b>fields</b>."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/BDR2.html:98
msgid ""
"Then, the <tt>danceOneStep()</tt> must be changed to update this variable to "
"<tt>false</tt> when there is nothing more to do. For that, simply add "
"<code>moreMusic = false;</code> before any <tt>return</tt>."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/BDR2.html:102
msgid "It is then possible to use the following <tt>run()</tt> method:"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/welcome/BDR2.html:103
#, no-wrap
msgid ""
"public void run() {\n"
"  while (moreMusic)\n"
"    danseOneStep();\n"
"}"
msgstr ""

#. type: Content of: <p><p><p><a>
#: src/lessons/welcome/BDR2.html:108
msgid ""
"<a name=\"Objective\">Apply the improvement we just saw to rewrite your "
"buggle code."
msgstr ""

#. type: Content of: <p><p><p><a><p>
#: src/lessons/welcome/BDR2.html:111
msgid ""
"You don't have to write the <tt>run()</tt> method since the buggle already "
"know it. If you put it anyway, the compiler will complain about this "
"multiple definition without noticing that both declarations match. Simply "
"declare the variable <tt>moreMusic</tt> and the <tt>danceOneStep()</tt> "
"method."
msgstr ""

#. type: Content of: <p><p><p><a><p>
#: src/lessons/welcome/BDR2.html:117
msgid ""
"Here are the ground indications to use for BRD2. Note that we can now move a "
"bugle up to 6 cells in one dance step."
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:126
msgid "Turn back and move one step forward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:131
msgid "D"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:131
msgid "Move four cells forward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:132
msgid "E"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:132
msgid "Move five cells forward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:133
msgid "F"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:133
msgid "Move six cells forward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:138
msgid "W"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:138
msgid "Move four cells backward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:139
msgid "V"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:139
msgid "Move five cells backward"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:140
msgid "U"
msgstr ""

#. type: Content of: <p><p><p><a><p><table><tr><td>
#: src/lessons/welcome/BDR2.html:140
msgid "Move six cells backward"
msgstr ""

#. type: Content of: <p><p><p><a><p><p>
#: src/lessons/welcome/BDR2.html:145
msgid "When you program works again, proceed to next exercise."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/SlugHunting.html:3
msgid ""
"After all this excitation of dance revolution, we will move on to a slower "
"activity : the slug hunting. Your buggle just happened to found the trail of "
"a slug: a green dribbling tracks. If it manage to follow it to its end, it "
"will find a baggle representing an appetizing slug (from a buggle point of "
"view)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugHunting.html:9
msgid ""
"To reach that goal, you have a boolean method <tt>isFacingTrail</tt>, which "
"determine whether we are facing a green cell or not. Of course, if we are "
"facing a wall, it returns false.In addition, this method preserve the state "
"of the calling buggle and of the world. Such a method is said to have no "
"<b>side effect</b>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugHunting.html:16
msgid ""
"It takes the color of the trail we want to follow as an argument. Slugs "
"leave green trails, but other prey leave trails of other colors. In Java, "
"there is a <i>data type</i> <tt>Color</tt> to indicate the colors. The green "
"color is defined by <code>Color.green</code>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugHunting.html:21
msgid ""
"In order to hunt your prey, you should not mistake the part of the tracks to "
"follow with the one your buggle comes from, you should ask your buggle to "
"leave a tracks behind it. Don't forget to use the <code>brushDown()</code> "
"method to put your brush down and <code>brushUp()</code> to move it up "
"again."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugHunting.html:26
msgid ""
"A buggle can know the color of the cell it is over using the <code>Color "
"getGroundColor()</code> method."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugHunting.html:29
msgid ""
"Finally, do not forget to capture your prey once you found it (using "
"<code>pickUpBaggle()</code>)."
msgstr ""

#. type: Content of: <a>
#: src/lessons/welcome/SlugHunting.html:33
msgid ""
"<a name=\"Objectives\">Complete the <code>hunt()</code> method (which gets "
"called by <code>run()</code> automatically). You should use the "
"<code>isFacingTrail()</code> method that is provided."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/SlugTracking.html:3
msgid ""
"After all this excitation of slug hunting, we will have to learn hot to "
"track their trail. Your buggle just happened to found the trail of a slug: a "
"green dribbling tracks. If it manage to follow it to its end, it will find a "
"baggle representing an appetizing slug (from a buggle point of view)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugTracking.html:9
msgid ""
"To reach that goal, you had to write the previously given boolean method "
"<tt>isFacingTrail</tt>, which should determine whether we are facing a green "
"cell or not. Of course, if we are facing a wall, it should return false. It "
"would be great if this method could have no <b>side effect</b>.  on the "
"calling buggle and on the world."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/SlugTracking.html:15
msgid ""
"Remember that this method takes the color of the trail we want to follow as "
"an argument. Slugs leave green trails, but other prey leave trails of other "
"colors. In Java, there is a <i>data type</i> <tt>Color</tt> to indicate the "
"colors. The green color is defined by <code>Color.green</code>."
msgstr ""

#. type: Content of: <a>
#: src/lessons/welcome/SlugTracking.html:20
msgid ""
"<a name=\"Objectives\">Complete the <code>isFacingTrail()</code> method "
"(which gets called by <code>hunt()</code> automatically). You don't have to "
"write the <code>hunt()</code> method."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Snake.html:3
msgid ""
"We will now teach the buggle to explore its world. Its initial position is "
"the bottom left corner, and it should visit any cells up to the top "
"(coloring the ground on its path. The main loop of the <code>run()</code> "
"method (that you should write) is something like:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/Snake.html:8
#, no-wrap
msgid ""
" move brush down\n"
" while we did not reach the final position\n"
"   move like a snake\n"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Snake.html:13
msgid "The prototype of this method (its first line) must be:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/Snake.html:14
#, no-wrap
msgid "public void run()"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Snake.html:15
msgid ""
"(we will come back later on the meaning of <code>public</code>). We thus "
"have to write two methods in addition to <code>run()</code>. The former "
"returns a boolean indicating whether we are on a final position while the "
"latter does not return any result and move one snake step forward."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Snake.html:20
msgid "We reached the final position if and only if:"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/Snake.html:22
msgid "We are facing a wall"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/Snake.html:23
msgid ""
"There is a wall on the north of the buggle. So, if the buggle is facing "
"east, you should check whether there is a wall on the left, and if the "
"buggle is facing west, you should check on the right side."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/Snake.html:26
msgid ""
"We can get the current heading of the buggle using the "
"<code>getDirection()</code>, and we know whether it looks east using "
"<code>getDirection() == Direction.EAST</code> (WEST for west)."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/welcome/Snake.html:29
msgid ""
"For the checking itself, nothing magical: you have to turn the buggle and "
"check whether it is facing a wall afterward."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Snake.html:33
msgid ""
"Then, a snake step can be achieved by moving one step forward if we are not "
"facing a wall, and moving to the upper line else (ie, if you look to the "
"west facing a wall, you have to turn right, forward and turn right)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Snake.html:37
msgid ""
"Hint: the main loop of the <code>run()</code> method must continue while the "
"testing function returns false. Their is thus two way of writing it:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Snake.html:39
#, no-wrap
msgid "while (testingFunction() == false)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Snake.html:40
msgid "or"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Snake.html:41
#, no-wrap
msgid "while (! testingFunction())"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Snake.html:42
msgid "It works because the exclamation mark (!) means in Java a boolean negation."
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/MethodsPicture4.html:2
msgid "(and methods to write)"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/MethodsPicture4.html:4
msgid ""
"Here is yet another exercise where you have to reproduce the pattern "
"provided in the \"Objective\" tab."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture4.html:7
msgid ""
"This one is a bit more difficult than the one seen previously. Look for "
"repeating patterns, even if the color changes, and write a method drawing "
"each of them."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/MethodsPicture4.html:11
msgid "Good luck!"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Array.html:3
msgid ""
"The goal of this exercise is to reproduce the pattern of the first row in "
"the other rows with a shift of one cell (see the Objective tab for "
"details). The biggest difference between this exercise and the other we had "
"on patterns is that you have to read the pattern (on first row) before "
"reproducing it. You cannot do otherwise because the same code will be "
"executed on three different worlds, each of them having its specific "
"pattern."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array.html:11
msgid ""
"One solution is to read the next cell, and go copy it in position before "
"comming back to read the second cell. But since it is forbiden to use the "
"methods to teleport the buggle to a specific position (<code>setPos()</code> "
"and similar), this approach will be a pain to implement."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array.html:16
msgid "The simplest is to store the whole color pattern in an <b>array</b>."
msgstr ""

#. type: Content of: <p><h2>
#: src/lessons/welcome/Array.html:18
msgid "Arrays in Java"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array.html:19
msgid ""
"An array is a sequence of positions in which one can store values of the "
"same kind (one value per cell). It is thus a sequence of values of the same "
"kind:"
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:28
msgid ""
"T is the array's name, T[0] is the name of the first cell, T[1] the name of "
"the second cell, T[2] the third one, etc. And yes, the first cell in "
"numbered T[0] and the last one of an array of size N is T[N-1]."
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:32
msgid ""
"We can use an integer variable <i>i</i> to access with T[i] to the array's "
"cells: when the value of <i>i</i> is 0, then T[i] accesses T[0], when the "
"value of <i>i</i> is 10, then T[i] accesses T[10]. <i>i</i> is said to be "
"the indice in the array T."
msgstr ""

#. type: Content of: <br><p><h2>
#: src/lessons/welcome/Array.html:37
msgid "Initializing an array"
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:38
msgid ""
"Let <code>T</code> be an array of 10 integer elements. It can then be "
"initialized this way:"
msgstr ""

#. type: Content of: <br><p><pre>
#: src/lessons/welcome/Array.html:41
#, no-wrap
msgid ""
"for (int i = 0; i&lt;10; i++) {\n"
"   T[i] = 3;\n"
"}\n"
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:46
msgid "<code>T[i]</code> can be used just like a variable. We can set a new value:"
msgstr ""

#. type: Content of: <br><p><pre>
#: src/lessons/welcome/Array.html:47
#, no-wrap
msgid "T[i] = 78;"
msgstr ""

#. type: Content of: <br><p><p>
#: src/lessons/welcome/Array.html:49
msgid "We can access its value:"
msgstr ""

#. type: Content of: <br><p><p><pre>
#: src/lessons/welcome/Array.html:50
#, no-wrap
msgid "x = T[i];"
msgstr ""

#. type: Content of: <br><p><p>
#: src/lessons/welcome/Array.html:52
msgid "We can test this value:"
msgstr ""

#. type: Content of: <br><p><p><pre>
#: src/lessons/welcome/Array.html:54
#, no-wrap
msgid ""
"if (T[i] > 0 ) {\n"
"    // instructions...\n"
"}\n"
msgstr ""

#. type: Content of: <br><p><h3>
#: src/lessons/welcome/Array.html:59
msgid "Declaring an array"
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:60
msgid "An array can be declared the following way:"
msgstr ""

#. type: Content of: <br><p><pre>
#: src/lessons/welcome/Array.html:61
#, no-wrap
msgid "int[] T;"
msgstr ""

#. type: Content of: <br><p><p>
#: src/lessons/welcome/Array.html:63
msgid ""
"<code>int</code> means that the elements of the array are of type integer; "
"<code>T</code> is the name of the array and <code>[]</code> means that we "
"are speaking of an array. It is also possible to declare the same array the "
"following way. Both writings are equivalent, but the first one is often "
"prefered in Java."
msgstr ""

#. type: Content of: <br><p><p><pre>
#: src/lessons/welcome/Array.html:68
#, no-wrap
msgid "int T[];"
msgstr ""

#. type: Content of: <br><p><h3>
#: src/lessons/welcome/Array.html:70
msgid "Allocating an array"
msgstr ""

#. type: Content of: <br><p>
#: src/lessons/welcome/Array.html:72
msgid ""
"Declaring an array <code>T</code> only reserve the name <code>T</code> for "
"later use. But the array is not initialized yet: it does not have any "
"value. What would <code>T[4]</code> mean if we didn't say that the array is "
"at least 5 cells long?"
msgstr ""

#. type: Content of: <br><p><p>
#: src/lessons/welcome/Array.html:77
msgid "First and foremost, we have to give a value to <code>T</code>:"
msgstr ""

#. type: Content of: <br><p><p><pre>
#: src/lessons/welcome/Array.html:78
#, no-wrap
msgid "T = new int[10];"
msgstr ""

#. type: Content of: <br><p><p>
#: src/lessons/welcome/Array.html:79
msgid ""
"<code>new</code> means that we want to create something, and "
"<code>int[10]</code> means that it is an array of 10 integer values. In "
"return, an array of 10 integer cells is created in memory, and the "
"<code>T</code> variable reference this array."
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:84
msgid ""
"The size of an array is fixed and cannot be changed after the creation of "
"the array. To know the size of a <code>T</code> array, we can consult the "
"value of the variable <code>T.length</code>."
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:89
msgid "It is forbidden to write:"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:90
#, no-wrap
msgid "int T[10]; // WRONG!!!"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:91
msgid ""
"You are required to use the <code>new</code> instruction. On the other hand, "
"you perfectly can specify the size with a variable <code>i</code>."
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:93
#, no-wrap
msgid "T = new int[i];"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:94
msgid ""
"In this case, the array's size will be set to the value of <code>i</code> "
"<b>when <code>new</code> gets called</b>. If the variable changes afterward, "
"it won't change the array's size."
msgstr ""

#. type: Content of: <br><p><p><p><h4>
#: src/lessons/welcome/Array.html:98
msgid "Declaration and allocation"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:99
#, no-wrap
msgid "int[] T = new int[10];"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:101
msgid "We declare and allocate the array on the same line."
msgstr ""

#. type: Content of: <br><p><p><p><h4>
#: src/lessons/welcome/Array.html:103
msgid "Declaration and initialization"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:104
#, no-wrap
msgid "int[] T = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:106
msgid ""
"We declare, allocate and initialize the array on the same line. To know the "
"size of the array to allocate, the compiler counts the provided values. This "
"code is equivalent to:"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:110
#, no-wrap
msgid ""
"int[] T = new int[10];\n"
"T[0] = 1;\n"
"T[1] = 2;\n"
"...\n"
"T[9] = 10;\n"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:117
msgid "It is also equivalent to:"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:119
#, no-wrap
msgid ""
"int[] T = new int[10];\n"
"for (int i=0; i&lt;T.length; i++) {\n"
"  T[i] = i+1;\n"
"}\n"
msgstr ""

#. type: Content of: <br><p><p><p><h3>
#: src/lessons/welcome/Array.html:125
msgid "Arrays and method parameters"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:126
msgid ""
"It is perfectly ok to pass an array to a method as a parameter. The method "
"must have a prototype similar to:"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:128
#, no-wrap
msgid ""
"void myMethod(int[] values) {\n"
"  // do something\n"
"}"
msgstr ""

#. type: Content of: <br><p><p><p>
#: src/lessons/welcome/Array.html:132
msgid "On the caller side, that also very simple:"
msgstr ""

#. type: Content of: <br><p><p><p><pre>
#: src/lessons/welcome/Array.html:134
#, no-wrap
msgid ""
"int[] tab = new int[10];\n"
"// initalize the values\n"
"myMethod(tab);\n"
msgstr ""

#. type: Content of: <br><p><p><p><p>
#: src/lessons/welcome/Array.html:139
msgid "We can also have methods returns arrays as results:"
msgstr ""

#. type: Content of: <br><p><p><p><p><pre>
#: src/lessons/welcome/Array.html:140
#, no-wrap
msgid ""
"int[] otherMethod() {\n"
"  int[] result = new int[10];\n"
"  // do something\n"
"  return result;\n"
"}"
msgstr ""

#. type: Content of: <h3>
#: src/lessons/welcome/Array.html:146 src/lessons/recursion/Square.html:43 src/lessons/recursion/Circle.html:14 src/lessons/recursion/HanoiBoard.html:20
msgid "Goal of this exercise"
msgstr ""

#. type: Content of: <br><p><p><p><p>
#: src/lessons/welcome/Array.html:147
msgid ""
"The <code>run()</code> method that you should write must declare an array of "
"colors (<code>Color[]</code>) and allocate it. Beware, the first world is "
"6x6, but this is not the case of the others. Use the "
"<code>getWorldHeight()</code> method to retrieve the amount of lines in the "
"current world."
msgstr ""

#. type: Content of: <br><p><p><p><p><p>
#: src/lessons/welcome/Array.html:153
msgid ""
"Once the array allocated, we have to fill it. For each cel of the row, read "
"the ground color (with <code>getGroundColor()</code>), and store it in the "
"right cell of the array."
msgstr ""

#. type: Content of: <br><p><p><p><p><p>
#: src/lessons/welcome/Array.html:157
msgid ""
"Once hte array initialized, you have to reapply the pattern on every rows, "
"for example by excuting <code>getWorldHeight()</code> times a method written "
"specifically for this."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/Array2.html:3
msgid ""
"This exercise is similar to the previous one: you have to reproduce the "
"color pattern of the first cell into the other ones."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array2.html:6
msgid ""
"The first difference is that the world is bordered of walls: you thus have "
"to slightly modify your trajectory to ensure that the buggle does not crash "
"into a wall. The simpler for that is to handle the first cell out of the "
"<code>for</code> loop and do only <code>getWorldHeight()-1</code> steps in "
"the loop."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array2.html:12
msgid ""
"The other difference is that the offset to apply between columns is not "
"fixed, but written on the first cell of each column. To get the info as an "
"integer, we can use:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/Array2.html:15
#, no-wrap
msgid "int offset = Integer.parseInt(readMessage())"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/Array2.html:17
msgid ""
"<code>readMessage()</code> gets the message on the ground as a String, while "
"<code>Integer.parseInt()</code> transforms a String into an integer by "
"<i>reading</i> it."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/Array2.html:21
msgid ""
"Then, to pick the right color, the easier is to use the <code>%</code> "
"(modulo) operator. For example, <code>(i + 5) % size</code> allows to "
"retrieve teh <code>i</code>th cell of an array of size <code>size</code> "
"with an offset of <code>5</code>."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/TraversalByColumn.html:3
msgid ""
"The goal of this serie of exercises is to let the buggle traverse its "
"world. It must number the cells it walks on to show its traversal order."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:6
msgid ""
"The main loop of the <code>run()</code> method (that you must write) is "
"something like:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/TraversalByColumn.html:9
#, no-wrap
msgid ""
" while we are not on the final position\n"
"   go to the next position\n"
"   label the cell with its number\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:14
msgid ""
"In contrary to the exercises we saw so far, we won't use the "
"<code>forward()</code>, <code>backward()</code> and similar "
"methods. Instead, we will compute the coordinate of the next buggle position "
"and use the <code>setPos(int, int)</code> method to <i>teleport</i> the "
"buggle directly to this position. For example, <code>setPos(3, 5)</code> "
"teleports the buggle to the cell where x=3 and y=5."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:21
msgid ""
"Your first task is thus to write a boolean function indicating whether the "
"buggle the final position or not, ie if it reached the bottom right corner "
"of the world. For this, you can use <code>getWorldWidth()</code> and "
"<code>getWorldHeight()</code> which return respectively the world's width "
"and height. Your test is about comparing the buggle's current position (that "
"you can access with <code>getX()</code> and <code>getY()</code>) to the "
"world dimensions."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:28
msgid "Beware, the first line and column are numbered 0 and not 1..."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:30
msgid ""
"Then, you have to write the code to reach the next position. In this "
"exercise, you have to traverse the world row after row. So, if you are at "
"the bottom of a row, you have to move to the top of next row, and you have "
"to move to the cell below else."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:35
msgid ""
"At this point, you can launch your program to check that the buggle "
"correctly traverse the world in the expected order, and that it stops when "
"it has to. Use the <b>stop</b> button if the buggle does not stop correctly."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalByColumn.html:39
msgid ""
"It is now time to write done the cell numbers. For that, you will need a "
"counter initialiser to zero at the begining of your <code>run()</code> "
"method, and incremented by one at each step (for example with "
"<code>counter++;</code>). Then, you have to write the value on the ground, "
"for example with <code>writeMessage(counter);</code>."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/TraversalByColumn.html:45
msgid ""
"You probably need to write the first or last value out of the main loop, "
"depending on whether you prefer to use a <code>while {}</code> or a <code>do "
"{} while</code>..."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/TraversalByLine.html:3
msgid ""
"You once again have to let the buggle traverse the world numbering the cells "
"on its way, but the goal of this exercise is to write a line traversal. Most "
"of the code you wrote for previous exercise remains usable here. Simply, the "
"method computing the coordinates of the next buggle position has to be "
"correctly updated: if you are at the right of a line, you have to go to the "
"begining of the next one. If not, you have to go to the right cell."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalDiagonal.html:3
msgid ""
"This time, you are asked to traverse the world one diagonal after the "
"other. Have a look at the objective world for more details on the requested "
"traversal order."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/TraversalDiagonal.html:7
msgid ""
"You may find useful to use an integer variable <code>diag</code> storing the "
"number of the diagonal you are traversing."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/TraversalZigZag.html:3
msgid ""
"This time, you have to zigzag on the way up. Have a look at the objective "
"world for more details on the requested traversal order."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/Langton.html:1
msgid "Langton's ant"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:3
msgid ""
"In this exercise, you will turn your buggle into a <i>Langton's "
"ant</i>. These artificial little animals are very interesting because they "
"are given simple rules that depend only on their local environment, and "
"after a period of apparent chaotic behavior, a general pattern "
"<i>emerges</i>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:8
msgid ""
"The rules are absolutely trivial: to compute what the next step should be, "
"you should check the current color of the ground (using "
"<code>getGroundColor()</code>). If it's white, change it to black, turn "
"right and move forward by one cell. If the ground is currently black, change "
"it to white, turn left and move forward by one cell."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:14
msgid ""
"It's hard to come up with simpler rules isn't it? Well, let's go and code it "
"now. You have to complete the <code>step()</code> method, which encodes the "
"behavior of the ant at each step. You will probably use the "
"<code>getGroundColor()</code> method to retrieve the color of the cell on "
"which the ant is currently. To compare colors, you cannot use the equal sign "
"(=), because these things are not scalar values but objects. Instead, you "
"need to write something like the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/cells/Langton.html:22
#, no-wrap
msgid ""
"Color c /* = some initialization */;\n"
"if (c.equals(Color.black)) {\n"
"  /* that's equal */\n"
"} else {\n"
"  /* that was not equal */\n"
"}\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:30
msgid ""
"Changing the ground color is not difficult, but a bit long: you have to "
"change the brush color of your buggle, set the brush down (to mark the "
"current cell -- with <code>brushDown()</code>), and set the brush back up "
"(with <code>brushUp()</code>) to avoid further issues when the buggle will "
"move. You are naturally free of organizing your code the way you want, but "
"you may want to write a <code>void setGroundColor(Color c)</code> method to "
"factorize things a bit."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/Langton.html:38
msgid "More information on Langton's ant"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:40
msgid ""
"As you can see from the execution of this exercise, the interest in this "
"algorithm is that after about 10000 steps of relative chaotic behavior, the "
"ant start building a regular pattern. This emergence of a regular pattern "
"from the chaos is rather fascinating, isn't it?"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:45
msgid ""
"This mechanism were invented in 1986 by Chris Langton, and later generalized "
"in several ways (as we shall see in the next exercises). It was proven in "
"2000 that the ant's trajectory can be used to compute any boolean circuit, "
"and thus that the ant is capable of universal computation (ie, any possible "
"computation can be achieved using the ant as a computing device). Yet "
"another subject of fascination..."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/Langton.html:51
msgid ""
"Check the corresponding wikipedia web page, of which this exercise is "
"inspired, for further details."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/LangtonColors.html:1
msgid "Multicolor Langton's ant"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/LangtonColors.html:3
msgid ""
"There is several ways to extend the concept of Langton's ant. In this "
"exercise, we explore first one, using more than two colors. It remains very "
"similar to the base case: the behavior at each step still depends on the "
"ground color, but you have more than 2 possibilities. It allows to have more "
"than one kind of ant, depending on what you decide to do for each color. For "
"example, the ant LRL takes 3 colors. It turns left on the first color, right "
"on the second one and left on the third color. According to this definition, "
"the basic ant is a RL (since it turns right on white cells and left on black "
"ones)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/LangtonColors.html:12
msgid ""
"Some of these ants draw fascinating patterns (switch the world to see them): "
"LLRR build a symmetric figure resembling loosely to a ball, LRRRRRLLR draws "
"a square, LLRRRLRLRLLR draws a convoluted regular pattern after a period of "
"seemingly chaotic behavior, and RRLLLRLLLRRR seems to fill a hour glass..."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/LangtonColors.html:17
msgid ""
"Changing your buggle into a generic Langton's ant is not very complicated, "
"although it is not completely trivial. As previously, you have to write a "
"<code>step</code> function. But this time, it receives two arrays as "
"parameters.  The first one defines the rules to follow depending on the "
"ground color while the second one gives the sequence of colors to use. For "
"example, the basic ant would have <code>{'R', 'L'}</code> and "
"<code>{Color.white, Color.black}</code> as arguments."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/LangtonColors.html:24
msgid "At each step, you thus have to apply the following pseudo-code:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/cells/LangtonColors.html:26
msgid "Find the position of the ground color in the color sequence;"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/cells/LangtonColors.html:27
msgid ""
"Turn left or right depending on the content of the rule array at that "
"position;"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/cells/LangtonColors.html:28
msgid ""
"Mark the current ground with the next color in the sequence (the last color "
"being followed by the first one);"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/welcome/cells/LangtonColors.html:29
msgid "Move forward by one step."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/cells/LangtonColors.html:32 src/lessons/welcome/cells/HelloTurmite.html:52
msgid "You now should have enough information to succeed."
msgstr ""

#. type: Content of: <p><h2>
#: src/lessons/welcome/cells/LangtonColors.html:34 src/lessons/welcome/cells/HelloTurmite.html:54
msgid "Bibliographical notes"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/LangtonColors.html:35
msgid ""
"According to wikipedia, multicolor Langton's ants were discovered in 1995 by "
"Propp et Al. Another funny fact is that the ants which name is a list of "
"consecutive pair of identical letters (LL and RR) produce symmetric "
"patterns. This fact was even formally proved."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/HelloTurmite.html:1
msgid "Turmites"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:3
msgid ""
"This exercise explores a new way to extend the concept of Langton's "
"ant. Now, the behavior of the ant not only depends on the color on the "
"ground, but also on its internal state (represented by an integer "
"value). The idea of changing the ant into such an automata naturally comes "
"from the Turing machine concept. This explains the name of these new "
"animals, which is a portemanteau of <i>Turing</i> and <i>Termite</i> (if you "
"don't know what a Turing machine is, you should run to wikipedia, because it "
"is simply impossible to be a real computer scientist before that)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:12
msgid ""
"Once again, you just have to write the <code>step()</code> method, in charge "
"of doing one turmite's step. Once again, you should first find the rank of "
"the current's cell ground color in the color sequence. The "
"<code>colors</code> array is not passed as parameter but declared as global "
"variable. It shouldn't change anything for us since this array was never "
"modified during the execution. This trick to pass constant parameters is not "
"very clean, but it should help performance a bit."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:20
msgid ""
"The second step is to use the <code>rule</code> data depending on the "
"current color and the current state. <code>rule</code> actually contains 3 "
"information in each situation: the color to write, the move to do, and the "
"next state value. For example, rule[1][0] contains the informations to use "
"when <code>state==1</code> and <code>color==0</code>. In other worlds, you "
"can retrieve the information relative to your current situation by using "
"<code>rule[state][currentColor]</code>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:27
msgid ""
"Each such information set contains 3 values. The first one is the rank of "
"the color to write on the ground. The second is the move to do, with the "
"following notation: 0=stop, 1=noturn, 2=right, 4=u-turn, 8=left. Note that "
"if the command is stop, you shouldn't even move forward on that step (but "
"you shouldn't stop your program either: the next steps can do something "
"else). Finally, the third integer is the next <code>state</code> value to go "
"into after this iteration."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:34
msgid ""
"Since these arbitrary notations are somehow difficult to remember, the "
"template code defines a set of constants that you should use instead of the "
"direct numerical values. Their names are NOTURN, LEFT, RIGHT and so on. The "
"modifiers <code>final static</code> before their type is the way to mark "
"variables as constant in Java (sorry if the notation seems complex). Using "
"such constants greatly help making the code easier to read, since"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/cells/HelloTurmite.html:41
#, no-wrap
msgid ""
"  if (rule[state][currentColor][NEXT_MOVE] == LEFT) {\n"
"    turnLeft();\n"
"  }\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/HelloTurmite.html:45
msgid "is much more easier to read than"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/welcome/cells/HelloTurmite.html:47
#, no-wrap
msgid ""
"  if (rule[x][y][1] == 2) {\n"
"    turnLeft();\n"
"  }\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/welcome/cells/HelloTurmite.html:55
msgid ""
"According to wikipedia, turmites were invented independently by the end of "
"the eighties. It has been shown that turmites in general are exactly "
"equivalent in power to one-dimensional Turing machines with an infinite "
"tape, as either can simulate the other. This means that absolutely any "
"program that you can think of could theoretically be computed on this "
"device..."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/TurmiteCreator.html:1
msgid "Creating Turmites"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:3
msgid ""
"This exercise allows you to build your own turmites. To pass the exercise, "
"you should simply write a <code>init()</code> method which initializes the "
"<code>rule</code> to use the following transitions table (from wikipedia), "
"set the buggle initial position at (8;33), and ask for 8342 steps."
msgstr ""

#. type: Content of: <table><tr><th>
#: src/lessons/welcome/cells/TurmiteCreator.html:10
msgid "Current color"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/cells/TurmiteCreator.html:13 src/lessons/welcome/cells/TurmiteCreator.html:28 src/lessons/welcome/cells/TurmiteCreator.html:31 src/lessons/welcome/cells/TurmiteCreator.html:39 src/lessons/welcome/cells/TurmiteCreator.html:41 src/lessons/welcome/cells/TurmiteCreator.html:42
msgid "0"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/cells/TurmiteCreator.html:14 src/lessons/welcome/cells/TurmiteCreator.html:29 src/lessons/welcome/cells/TurmiteCreator.html:32 src/lessons/welcome/cells/TurmiteCreator.html:34 src/lessons/welcome/cells/TurmiteCreator.html:37 src/lessons/welcome/cells/TurmiteCreator.html:44
msgid "1"
msgstr ""

#. type: Content of: <table><tr><th>
#: src/lessons/welcome/cells/TurmiteCreator.html:18 src/lessons/welcome/cells/TurmiteCreator.html:21
msgid "Write color"
msgstr ""

#. type: Content of: <table><tr><th>
#: src/lessons/welcome/cells/TurmiteCreator.html:19 src/lessons/welcome/cells/TurmiteCreator.html:22
msgid "Turn"
msgstr ""

#. type: Content of: <table><tr><th>
#: src/lessons/welcome/cells/TurmiteCreator.html:20 src/lessons/welcome/cells/TurmiteCreator.html:23
msgid "Next state"
msgstr ""

#. type: Content of: <table><tr><th>
#: src/lessons/welcome/cells/TurmiteCreator.html:26
msgid "Current state"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/lessons/welcome/cells/TurmiteCreator.html:40 src/lessons/welcome/cells/TurmiteCreator.html:43
msgid "N"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:48
msgid ""
"where the direction to turn is one of <b>L</b> (90Â° left), <b>R</b> (90Â° "
"right), <b>N</b> (no turn) and <b>U</b> (180Â° U-turn)."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/welcome/cells/TurmiteCreator.html:50
msgid "Going further"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:51
msgid ""
"This exercise is naturally an excuse to let you experiment with your own "
"turmites.  Feel free to change the transition table and the amount of steps "
"to experiment by yourself. To that extend, you may find the Ed Pegg Jr's "
"library useful. If you find new interesting patterns, send them per email so "
"that we can integrate them to this list!"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:57
msgid ""
"In addition, wikipedia is desperately missing some good looking colorful "
"turmites: only black and white ones are depicted.  You should consider "
"submitting your creations directly to the free encyclopedia."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/welcome/cells/TurmiteCreator.html:63
#, no-wrap
msgid ""
"EdPeggJrTurmiteLibrary = [\n"
"# source: http://demonstrations.wolfram.com/Turmites/\n"
"# Translated into his later notation: 1=noturn, 2=right, 4=u-turn, 8=left\n"
"# (all these are 2-color patterns)\n"
"\"{{{1, 2, 0}, {0, 8, 0}}}\",  # 1: Langton's ant\n"
"\"{{{1, 2, 0}, {0, 1, 0}}}\",  # 2: binary counter\n"
"\"{{{0, 8, 1}, {1, 2, 1}}, {{1, 1, 0}, {1, 1, 1}}}\", # 3: (filled "
"triangle)\n"
"\"{{{0, 1, 1}, {0, 8, 1}}, {{1, 2, 0}, {0, 1, 1}}}\", # 4: spiral in a box\n"
"\"{{{0, 2, 1}, {0, 8, 0}}, {{1, 8, 1}, {0, 2, 0}}}\", # 5: stripe-filled "
"spiral\n"
"\"{{{0, 2, 1}, {0, 8, 0}}, {{1, 8, 1}, {1, 1, 0}}}\", # 6: stepped pyramid\n"
"\"{{{0, 2, 1}, {0, 1, 1}}, {{1, 2, 1}, {1, 8, 0}}}\", # 7: contoured "
"island\n"
"\"{{{0, 2, 1}, {0, 2, 1}}, {{1, 1, 0}, {0, 2, 1}}}\", # 8: woven placemat\n"
"\"{{{0, 2, 1}, {1, 2, 1}}, {{1, 8, 1}, {1, 8, 0}}}\", # 9: snowflake-ish\n"
"\"{{{1, 8, 0}, {0, 1, 1}}, {{0, 8, 0}, {0, 8, 1}}}\", # 10: slow city "
"builder\n"
"\"{{{1, 8, 0}, {1, 2, 1}}, {{0, 2, 0}, {0, 8, 1}}}\", # 11: framed computer "
"art\n"
"\"{{{1, 8, 0}, {1, 2, 1}}, {{0, 2, 1}, {1, 8, 0}}}\", # 12: balloon bursting "
"(makes a spreading highway)\n"
"\"{{{1, 8, 1}, {0, 8, 0}}, {{1, 1, 0}, {0, 1, 0}}}\", # 13: makes a "
"horizontal highway\n"
"\"{{{1, 8, 1}, {0, 8, 0}}, {{1, 2, 1}, {1, 2, 0}}}\", # 14: makes a 45 "
"degree highway\n"
"\"{{{1, 8, 1}, {0, 8, 1}}, {{1, 2, 1}, {0, 8, 0}}}\", # 15: makes a 45 "
"degree highway\n"
"\"{{{1, 8, 1}, {0, 1, 0}}, {{1, 1, 0}, {1, 2, 0}}}\", # 16: spiral in a "
"filled box\n"
"\"{{{1, 8, 1}, {0, 2, 0}}, {{0, 8, 0}, {0, 8, 0}}}\", # 17: glaciers\n"
"\"{{{1, 8, 1}, {1, 8, 1}}, {{1, 2, 1}, {0, 1, 0}}}\", # 18: golden "
"rectangle!\n"
"\"{{{1, 8, 1}, {1, 2, 0}}, {{0, 8, 0}, {0, 8, 0}}}\", # 19: fizzy spill\n"
"\"{{{1, 8, 1}, {1, 2, 1}}, {{1, 1, 0}, {0, 1, 1}}}\", # 20: nested "
"cabinets\n"
"\"{{{1, 1, 1}, {0, 8, 1}}, {{1, 2, 0}, {1, 1, 1}}}\", # 21: (cross)\n"
"\"{{{1, 1, 1}, {0, 1, 0}}, {{0, 2, 0}, {1, 8, 0}}}\", # 22: saw-tipped "
"growth\n"
"\"{{{1, 1, 1}, {0, 1, 1}}, {{1, 2, 1}, {0, 1, 0}}}\", # 23: curves in blocks "
"growth\n"
"\"{{{1, 1, 1}, {0, 2, 0}}, {{0, 8, 0}, {0, 8, 0}}}\", # 24: textured "
"growth\n"
"\"{{{1, 1, 1}, {0, 2, 1}}, {{1, 8, 0}, {1, 2, 0}}}\", # 25: (diamond "
"growth)\n"
"\"{{{1, 1, 1}, {1, 8, 0}}, {{1, 2, 1}, {0, 1, 0}}}\", # 26: coiled rope\n"
"\"{{{1, 2, 0}, {0, 8, 1}}, {{1, 8, 0}, {0, 1, 1}}}\", # 27: (growth)\n"
"\"{{{1, 2, 0}, {0, 8, 1}}, {{1, 8, 0}, {0, 2, 1}}}\", # 28: (square "
"spiral)\n"
"\"{{{1, 2, 0}, {1, 2, 1}}, {{0, 1, 0}, {0, 1, 1}}}\", # 29: loopy growth "
"with holes\n"
"\"{{{1, 2, 1}, {0, 8, 1}}, {{1, 1, 0}, {0, 1, 0}}}\", # 30: Lanton's Ant "
"drawn with squares\n"
"\"{{{1, 2, 1}, {0, 2, 0}}, {{0, 8, 1}, {1, 8, 0}}}\", # 31: growth with "
"curves and blocks\n"
"\"{{{1, 2, 1}, {0, 2, 0}}, {{0, 1, 0}, {1, 2, 1}}}\", # 32: distracted "
"spiral builder\n"
"\"{{{1, 2, 1}, {0, 2, 1}}, {{1, 1, 0}, {1, 1, 1}}}\", # 33: cauliflower "
"stalk (45 deg highway)\n"
"\"{{{1, 2, 1}, {1, 8, 1}}, {{1, 2, 1}, {0, 2, 0}}}\", # 34: worm trails "
"(eventually turns cyclic!)\n"
"\"{{{1, 2, 1}, {1, 1, 0}}, {{1, 1, 0}, {0, 1, 1}}}\", # 35: eventually makes "
"a two-way highway!\n"
"\"{{{1, 2, 1}, {1, 2, 0}}, {{0, 1, 0}, {0, 1, 0}}}\", # 36: almost symmetric "
"mould bloom\n"
"\"{{{1, 2, 1}, {1, 2, 0}}, {{0, 2, 0}, {1, 1, 1}}}\", # 37: makes a 1 in 2 "
"gradient highway\n"
"\"{{{1, 2, 1}, {1, 2, 1}}, {{1, 8, 1}, {0, 2, 0}}}\", # 38: immediately "
"makes a 1 in 3 highway\n"
"\"{{{0, 2, 1}, {1, 2, 1}}, {{0, 8, 2}, {0, 8, 0}}, {{1, 2, 2}, {1, 8, "
"0}}}\", # 39: squares and diagonals growth\n"
"\"{{{1, 8, 1}, {0, 1, 0}}, {{0, 2, 2}, {1, 8, 0}}, {{1, 2, 1}, {1, 1, "
"0}}}\", # 40: streak at approx. an 8.1 in 1 gradient\n"
"\"{{{1, 8, 1}, {0, 1, 2}}, {{0, 2, 2}, {1, 1, 1}}, {{1, 2, 1}, {1, 1, "
"0}}}\", # 41: streak at approx. a 1.14 in 1 gradient\n"
"\"{{{1, 8, 1}, {1, 8, 1}}, {{1, 1, 0}, {0, 1, 2}}, {{0, 8, 1}, {1, 1, "
"1}}}\", # 42: maze-like growth\n"
"\"{{{1, 8, 2}, {0, 2, 0}}, {{1, 8, 0}, {0, 2, 0}}, {{0, 8, 0}, {0, 8, "
"1}}}\", # 43: growth by cornices \n"
"\"{{{1, 2, 0}, {0, 2, 2}}, {{0, 8, 0}, {0, 2, 0}}, {{0, 1, 1}, {1, 8, "
"0}}}\", # 44: makes a 1 in 7 highway\n"
"\"{{{1, 2, 1}, {0, 8, 0}}, {{1, 2, 2}, {0, 1, 0}}, {{1, 8, 0}, {0, 8, "
"0}}}\", # 45: makes a 4 in 1 highway\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:114
msgid ""
"Langton's ants may not share the expressiveness power of the turmites, but "
"they remain fascinating too. You can experiment with them using the "
"initLangton() method, provided in your template, that allows to build a "
"Turmite transition table from a Langton's ant name. Tiny changes in the ant "
"may result huge changes. For example, \"RRL\" does not seem to lead to any "
"constructed pattern, even after a million steps, but \"RLL\" starts building "
"a very simple highway pattern after less than 100 steps!"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/cells/TurmiteCreator.html:121
msgid ""
"Quite a lot of Langton's ants build highways: RL, of course, but also "
"RLRLRLLRLR (about 2500 steps).  The chaotic behavior of ants before the "
"highway can be very short (as with RLL that only need 100 steps to converge) "
"or very long, as with LLLLLLRRLRRR which seems chaotic for more than 500,000 "
"steps before build the highway or even RRLLLRRRLRRR which needs 1170000 to "
"start converging. Some are narrow, and others are very large, such as "
"RRLRLLRLRR (200,000 steps). This ant is also notable since it is somehow "
"squarish even before the highway start where most others do not show "
"anything notable before their highway."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/cells/TurmiteCreator.html:129
msgid ""
"Some ants fill solid sectors, such as RRLLLRLLLRRR (16,000 steps), "
"RRLLLRLLLRRR (30,000 steps), RRLLLRRRRRLR (125,000 steps) or RRLRLLRRRRRR "
"(20,000 steps). Some even fill the whole space (RRLRR after 3000 "
"steps). Some of my personal favorite ones are the ones where the ant seem to "
"be bouncing within a box that gets bigger on each bump, such as LRRRRRLLR "
"(30,000 steps). LRRRRLLLRRR is even more impressing since the bounces within "
"the box are regular and since it converges more rapidly to its stable "
"behavior (15,000 steps are enough)."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/cells/TurmiteCreator.html:136
msgid ""
"Finally, some ants are just build artistic patterns. You should check this "
"video for some beautiful ones: "
"http://www.youtube.com/watch?v=1X-gtr4pEBU. If you want to convert them into "
"your code, you have to shift them by one: For example, the one depicted at "
"3:42 is not RRLRLRLLRL, but RLRLRLLRLR (the first visible move should be "
"read as last one)."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/welcome/cells/TurmiteCreator.html:141
msgid ""
"As you can see by exploring the above set of turmites, they are usually not "
"as colorful as the ants, but this may be because very few colors suffice to "
"exhibit complex behaviors. For example, there is a specific class of "
"turmites called <i>busy beavers</i> which are turmites that write a lot of "
"things before stopping (busy beavers are usually classical turing machines, "
"but the idea fits perfectly to turmites too). There is a sort of "
"international competition where people strive to find the turmite that "
"covers the biggest area before stopping. The web page is here: "
"http://code.google.com/p/ruletablerepository/wiki/TwoDimensionalTuringMachines"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/cells/TurmiteWorld.html:1
msgid "../../../jlm/universe/bugglequest/BuggleWorld.html"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/Main.html:1
msgid "Sorting Algorithms"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/sort/Main.html:3
msgid ""
"This lesson allows to experiment with some classical sorting algorithms (and "
"some less common variante of them). The goal is two fold: you can first "
"better understand the idea of these algorithms by writting them "
"yourself. But even if you don't code the algorithms, you can use the demo "
"mode to organize \"races\" between these algorithms to experiment in "
"practice what the different asymptotical complexity mean."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/Main.html:10
msgid ""
"An exercise on recursive sorting algorithms (such as QuickSort and "
"MergeSort) is planned for the future."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:1 src/lessons/sort/bubble/AlgBubbleSort2.html:1 src/lessons/sort/bubble/AlgBubbleSort3.html:1
msgid "BubbleSort and variations"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:3
msgid ""
"Welcome to the sorting world. It allows you to experiment with the existing "
"sorting algorithms. Please consult the world help (\"Help\"->\"About this "
"world\") for more information on the available buildins for your algorithms."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:7
msgid ""
"In this first exercise, we will explore some of the simpler of them. The tab "
"\"Source code\" contains several sub-tabs, corresponding to the different "
"algorithms to write. To succeed in this exercise, your solution must sort "
"the array using exactly the same amount of read and write than the "
"solution. That is why you have to follow strictly the pseudo-code of each "
"algorithm."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:14
msgid "BubbleSort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:16
msgid ""
"Bubble sort consists in progressively moving up the smaller elements of the "
"array, as if they were air bubbles moving up to the surface of a liquid. The "
"algorithm traverse the array, and compare any pair of adjacent elements. If "
"two adjacent elements are wrongly sorted, they are swapped. Once the array "
"was completely traversed, the operation starts again from the "
"beginning. When no elements were sorted after a full traversal, it means "
"that the array is completely sorted: the algorithm can stop. Bubble sort is "
"studied because of its simplicity, but it is almost never used in practice "
"because of its bad performance (O(n^2) on average)."
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:26 src/lessons/sort/bubble/AlgBubbleSort2.html:13 src/lessons/sort/bubble/AlgBubbleSort3.html:9
msgid "Show Tip (Pseudo-code)"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:27
msgid "The pseudo-code of the BubbleSort algorithm is the following:"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/sort/bubble/AlgBubbleSort1.html:28
#, no-wrap
msgid ""
"do: \n"
"        For each i in [0,len-2]\n"
"          If cells i and i+1 must be swapped, do it\n"
"while we swapped something during last traversal\n"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:3
msgid "BubbleSort2"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:5
msgid ""
"If you look carefully at the behavior of BubbleSort, a first easy "
"optimization appears: after one traversal, the last element of the array "
"must be the biggest of all since the traversal moved it up like a bubble to "
"its position. More generally, after N traversal, we know that the N last "
"elements of the array are already sorted. It is thus not necessary to "
"compare them again during the subsequent traversals. For now, we will have "
"as many traversal as there is in the array."
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:14
msgid "The pseudo-code of the BubbleSort2 algorithm is the following:"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:15
#, no-wrap
msgid ""
"For all i in [len-2,0] (traversing from biggest to smallest)\n"
"       For all j in [0, i]\n"
"          If cells j and j+1 must be swapped, do it\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:21
msgid ""
"When we run this algorithm, it is quite disappointing to see that it runs "
"approximately at the same speed than the basic version of BubbleSort. This "
"is a graphical effect only since only value changes are graphically "
"represented. Since this variation avoids some useless comparisons, it does "
"exactly the same amount of swaps that the basic version. It is thus quite "
"logical that the graphical interface draws this version at the same pace "
"than the base version. But the statistics on the amount of reads show that "
"we saved about the fourth of the amount of reads, which is not bad."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort2.html:30
msgid ""
"From the asymptotic complexity point of view, there is absolutely no "
"difference: this variation is still in O(n^2) on average (our gain is only "
"on the constant term, ignored when computing the asymptotic complexity)."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/bubble/AlgBubbleSort3.html:3
msgid "BubbleSort3"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort3.html:5
msgid ""
"Let's now reintroduce the little optimization we removed at previous step: "
"if a traversal does not swap any element, it means that the array is already "
"sorted."
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/sort/bubble/AlgBubbleSort3.html:10
msgid "The pseudo-code of the BubbleSort3 algorithm is the following:"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/sort/bubble/AlgBubbleSort3.html:11
#, no-wrap
msgid ""
"For all i in [len-2,0] (traversing from biggest to smallest)\n"
"       For all j in [0, i]\n"
"          If cells j and j+1 must be swapped, do it\n"
"       If traversal on j did not swap anything, return from the function\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/bubble/AlgBubbleSort3.html:18
msgid ""
"This optimization is even more disappointing: it only provide a gain of a "
"few percents on the amount of reads over BubbleSort2."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:1 src/lessons/sort/cocktail/AlgCocktailSort2.html:1 src/lessons/sort/cocktail/AlgCocktailSort3.html:1
msgid "CocktailSort and variations"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:3
msgid "CocktailSort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:5
msgid ""
"To improve further the BubbleSort algorithm, we need to look closer its "
"behavior. One can notice that big elements are moved very quickly in "
"position while small ones move very slowly to their destination. They are "
"thus traditionally referred to as \"rabbits\" and \"turtles\" respectively "
"for big fast values and small slow ones."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:11
msgid ""
"To help the turtles moving faster, the cocktail sort traverse alternatively "
"the array from right to left and from left to right. Here is the "
"pseudo-code:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:16
#, no-wrap
msgid ""
"Do\n"
"  For all i in [0,len-2], do:\n"
"    if i and i+1 must be swapped, do it\n"
"  For all i in [len-2,0] (downward), do:\n"
"    if i and i+1 must be swapped, do it\n"
"while at least one of the traversal swapped an element\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/cocktail/AlgCocktailSort1.html:24
msgid ""
"One can see that cocktail sort achieves exactly the same amount of swaps "
"than the bubble sort, but improves slightly on read amount. It is however "
"still worse than BubbleSort2 to that extend."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/cocktail/AlgCocktailSort2.html:3
msgid "CocktailSort2"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/cocktail/AlgCocktailSort2.html:5
msgid ""
"We will now apply to CocktailSort the same optimization than BubbleSort2 did "
"to BubbleSort. We must remember the limits of the array part not being "
"sorted yet, and traverse it alternatively from left to right and from right "
"to left:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/sort/cocktail/AlgCocktailSort2.html:10
#, no-wrap
msgid ""
"beg=0; end=len-2\n"
"do\n"
"  For all Pour i in [beg,end], do:\n"
"      If cells i and i+1 must be swapped, do it    \n"
"  end--\n"
"  For all Pour i in [beg,end] (downwards), do:\n"
"      If cells i and i+1 must be swapped, do it    \n"
"  beg++\n"
"while at least one of the traversal swapped an element\n"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/cocktail/AlgCocktailSort3.html:3
msgid "CocktailSort3"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/cocktail/AlgCocktailSort3.html:5
msgid ""
"Even if the asymptotic complexity of CocktailSort2 is the same than the one "
"of BubbleSort, it seem to perform better in practice. It is even possible to "
"improve a bit further by stopping it if the first traversal didn't found "
"anything to swap, without achieving the downwards traversal. Likewise, we "
"can stop if the upward traversal found something to swap, but not the "
"downwards one."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/insertion/AlgInsertionSort.html:1 src/lessons/sort/insertion/AlgShellSort.html:1
msgid "Insertion algorithms and variations"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:4
msgid ""
"This exercise allows you to experiment with the insertion sort and its major "
"variations."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/insertion/AlgInsertionSort.html:7
msgid "InsertionSort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:9
msgid ""
"This sorting algorithm is quite simple to understand and write, even if it "
"is not as efficient as possible. Its asymptotic complexity is in O(n2), but "
"it is more efficient in practice (linear in best case, ie when the array is "
"already sorted, and N2/4 on average)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:14
msgid ""
"The idea is to traverse all elements of the array, and to insert each of "
"them into its proper position in the already sorted part of the array. When "
"we look at an element x, the situation is the following: any elements to the "
"left of the array are already sorted, and we have to insert x at its "
"position in the array."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:22
msgid "Once this is done, the situation is the following:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:26
msgid "The pseudo-code of this algorithm is thus the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/sort/insertion/AlgInsertionSort.html:27
#, no-wrap
msgid ""
"For each i in [1,len]\n"
"  store the value of i in a variable val\n"
"  copy the cell i-1 into i if i-1 contains a value bigger than val\n"
"  copy the cell i-2 into i-1 if i-2 contains a value bigger than val\n"
"  copy the cell i-3 into i-2 if i-3 contains a value bigger than val\n"
"  copy the cell i-4 into i-3 if i-4 contains a value bigger than val\n"
"  ...\n"
"  copy val into the last cell copied above\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:37
msgid ""
"Naturally, you should use a loop to write the big permutation within the "
"given loop. Writing it this way would be really ... counter-productive."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:40
msgid ""
"If you've always wondered what computer science researchers do nowadays, "
"here is part of the answer: They improve fundamental algorithms so that "
"others can write efficient programs."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/insertion/AlgInsertionSort.html:44
msgid "Other variation of insertion sort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:46
msgid ""
"TreeSort builds a binary search tree to sort them. It leads to a O(n log(n))  "
"on average, but O(n^2) in worst cases. We won't study this algorithm here "
"since unterstanding its behavior requires to know what a binary tree is, "
"what is beyond our present goals."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:51
msgid ""
"There is other variations over the insertion sort, such as PatienceSort "
"which builds piles of values and sort each pile afterward. This algorithm "
"presents a 0(n log(n)) timing worst case and a 0(n) space "
"complexity. LibrarySort (proposed in 2004) also trades a bit space in "
"exchange for time since it provide a time complexity of O(n log(n)) but "
"needs to store some more data."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgInsertionSort.html:58
msgid ""
"Wikipedia provides a detailled description of all these algorithms we cannot "
"present here because of time constraints."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/insertion/AlgShellSort.html:3
msgid "ShellSort"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/sort/insertion/AlgShellSort.html:5
msgid ""
"This algorithm is named after its author, Donald Shell, who published it in "
"1959. It can be seen as an application of the CombSort idea (let elements "
"having a long path to travel take shortcuts) to the insertion sort (CombSort "
"is a variation of BubbleSort). Instead of comparing adjacent values during "
"the insertion sort, it compares values separated by a bigger gap. The bigger "
"the gap, the faster the elements are moved to their final destination, but "
"also the less precise is this move. It is thus mandatory to apply the "
"algorithm with a serie of decreasing gaps. At the last step, when the gap is "
"1, InsertionSort is used, but onto an array which is almost already sorted "
"by previous steps."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/insertion/AlgShellSort.html:16
msgid ""
"Donald Shell propose <code>len/2</code> as initial value of the gap, and "
"then to divide it by 2 at each step. The pseudo-code is thus the following:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/sort/insertion/AlgShellSort.html:19
#, no-wrap
msgid ""
"gap=len/2\n"
"while gap>0:\n"
"  apply InsertionSort, comparing i-gap and i, then i-2gap and i-gap, then "
"i-3gap and i-2gap, etc.\n"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/sort/insertion/AlgShellSort.html:24
msgid ""
"Just like in CombSort, the sequence of values taken by the gap is crucial "
"for Shell sort performance. In some rare pathological cases, the sequence we "
"used above can lead to a O(n^2) performance. Other sequences were proposed: "
"the Hibbard's increments of 2k â 1 lead to a complexity of O(n^(3/2)) in "
"worst cases. Pratt's increments 2^i3^j lead to a O(nlog(n)log(n) performance "
"in worst cases. The existance of a sequence leading to a O(n log(n)) was "
"precluded by Poonen, Plaxton, and Suel. Thanks to this performance, "
"ShellSort is a valid candidate for array of several hundred thousands when "
"correctly implemented."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/sort/insertion/AlgShellSort.html:34
msgid ""
"In our case, the array are ways too small to benefit of these "
"optimizations. If you ever need to do so, take as initial gap the biggest "
"value of the targeted serie still smaller than the array size, and then use "
"decreasing values of the serie."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/sort/insertion/AlgShellSort.html:39
msgid ""
"Interesingly enough, determining the best gap sequence for shell sort turns "
"into a contemporary research issue in computer science. For example, an "
"article of 2001 introduces the following sequence, which seems to be optimal "
"in practice for arrays of size up to 10^5: {1, 4, 10, 23, 57, 132, 301, 701, "
"1750} (Marcin Ciura, Best Increments for the Average Case of Shellsort, 13th "
"International Symposium on Fundamentals of Computation Theory, LNCS 2001; "
"Vol. 2138)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/selection/AlgSelectionSort.html:1
msgid "Selection Sort"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/sort/selection/AlgSelectionSort.html:3
msgid ""
"In this exercise we will implement another classical algorithm: selection "
"sort."
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/selection/AlgSelectionSort.html:6
msgid ""
"The idea is simply to select for each cell of the array the smallest value "
"from the part not already sorted. Thus for the first cell, it takes the "
"smallest value over the whole array. For the second one, it takes the second "
"smallest value, which is the smallest value from the cell not already "
"sorted."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/sort/selection/AlgSelectionSort.html:12
msgid ""
"More generally, for the cell N, it looks the cell M in [n;len] containing "
"the smallest possible value of the interval. Then, it swaps the content of "
"cell N with the one of cell M."
msgstr ""

#. type: Content of: <p><p><h2>
#: src/lessons/sort/selection/AlgSelectionSort.html:16
msgid "Existing variations"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/sort/selection/AlgSelectionSort.html:17
msgid ""
"Another classical algorithm which idea is based on the selection of good "
"elements is HeapSort, but it uses a heap data structure which we did not see "
"yet. Simply remember that HeapSort provides a O(n log n) performance in "
"worst case, which is why it is a very interesting algorithm in practice."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/sort/miscellaneous/AlgCombSort.html:1 src/lessons/sort/miscellaneous/AlgCombSort11.html:1 src/lessons/sort/miscellaneous/AlgGnomeSort.html:1
msgid "Miscellaneous sorting"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/miscellaneous/AlgCombSort.html:3
msgid "CombSort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/miscellaneous/AlgCombSort.html:5
msgid ""
"We saw that CocktailSort improve a bit for turtles (i.e. small values near "
"to the end of the array), but it is still possible to achieve "
"better. ComboSort comes down to providing them a short cut: instead of "
"comparing adjacent values, we compare values separated by a gap bigger than "
"1. That way, turtles we traverse <i>gap</i> cells at each "
"traversal. Naturally, we have to apply the algorithm with decreasing gaps, "
"and finish with <i>gap=1</i> to ensure that the array is correctly sorted "
"afterward. Choosing the right gap and how to decrease it is a difficult "
"question, but in practice, dividing it by 1.3 after each traversal leads to "
"good performance. Here is the corresponding pseudo-code:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/sort/miscellaneous/AlgCombSort.html:17
#, no-wrap
msgid ""
"gap = len;\n"
"do\n"
"   if gap>1 then\n"
"     gap = gap / 1.3\n"
"   i = O\n"
"   while i+gap &lt; len do:\n"
"     if i and i+gap must be swapped, do it\n"
"     increase i by the gap\n"
"while the gap is bigger than 1 or the last traversal swapped at least one "
"pair\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/miscellaneous/AlgCombSort.html:28
msgid ""
"This algorithm was invented by Wlodek Dobosiewicz in 1980, and later "
"rediscovered and popularized by Stephen Lacey and Richard Box, who described "
"it in Byte Magazine in April 1991."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/miscellaneous/AlgCombSort11.html:3
msgid "CombSort11"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/miscellaneous/AlgCombSort11.html:5
msgid ""
"The authors of this algorithm observed that the performance is increased if "
"we make sure that the last values of the gap are (11, 8, 6, 4, 3, 2, 1)  "
"rather than (9, 6, 4, 3, 2, 1) or (10, 7, 5, 3, 2, 1). Rework the code of "
"CombSort to ensure just after the gap update that if it is 9 or 10, we "
"should use 11 instead."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/sort/miscellaneous/AlgGnomeSort.html:3
msgid "GnomeSort"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/miscellaneous/AlgGnomeSort.html:5
msgid ""
"The Gnome sort is similar to insertion sort, but the elements are moved in "
"position by a serie of swaps just like in bubble sort. It is named after the "
"supposed behavior of garden gnomes when they sort flower pots. Here is a "
"description of the algorithm by its author:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/sort/miscellaneous/AlgGnomeSort.html:10
msgid ""
"Gnome Sort is based on the technique used by the standard Dutch Garden Gnome "
"(Du.: tuinkabouter). Here is how a garden gnome sorts a line of flower "
"pots. Basically, he looks at the flower pot next to him and the previous "
"one; if they are in the right order he steps one pot forward, otherwise he "
"swaps them and steps one pot backwards. Boundary conditions: if there is no "
"previous pot, he steps forwards; if there is no pot next to him, he is "
"done.  <i>âDick Grune</i>"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/recursion/Main.html:1
msgid "Recursive algorithms"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Main.html:2
msgid "This lesson allows to experiment with recursive algorithms."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Main.html:4
msgid ""
"If you need more recursive algorithms, an exercise on recursive sorting "
"algorithms (in particular QuickSort and MergeSort) is planned in the future "
"within the sorting lesson."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Square.html:1
msgid "The small cousines of Buggles"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Square.html:3
msgid ""
"Today, we will meet the small cousines of the buggles: the turtles. In fact, "
"turtles are much olders than the buggles. They were invented in the 70's by "
"a scientific from MIT called Seymour Papert to help teaching programming, "
"and the buggles are a variation on the idea invented by Lyn Turbak from "
"Wellesley College later."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Square.html:9
msgid ""
"Turtles are thus a bit like buggles, but smaller. Just like buggles, you can "
"order them to move forward, to turn, to move backward, etc. Just like "
"buggles, they leave a line on their path when they move (but the line is "
"much smaller)."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/recursion/Square.html:14
msgid ""
"The main difference is that where buggles can only move of right angles, "
"turtles can move of any arbitrary angles specified by a real number (a "
"double). This gives them much more liberty in their movings. The buggles can "
"do several other tricks, like reading and writting messages, picking or "
"dropping objects, and there is sometimes walls in their worlds (but all this "
"is completely above the capacities of turtles)."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/recursion/Square.html:21
msgid ""
"From a practical point of view, most of the methods you knew about buggles "
"still work with turtles, with some minor adaptations. In particular, the "
"<code>forward()</code> method takes the amount of steps to do as a double "
"(see \"About this world\" for more details)."
msgstr ""

#. type: Content of: <p><p><p><h3>
#: src/lessons/recursion/Square.html:26
msgid "Doubles? But what is it?"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/recursion/Square.html:27
msgid "It's simply a point number. Example:"
msgstr ""

#. type: Content of: <p><p><p><pre>
#: src/lessons/recursion/Square.html:29
#, no-wrap
msgid ""
"double x = 3.72;\n"
"x + 1.234 // Value = 4.954\n"
"x + 2 // Value = 5.72 (2 converted to 2.0 automatically)\n"
"x * 2 // Value = 7.44 (2 converted to 2.0 automatically)\n"
"x / 2 // Value = 1.86 (2 converted to 2.0 automatically)\n"
"(int) x // Value = 1 (âcasting to intâ, converted to integer by "
"truncating)\n"
"Math.round(x) // Value = 2 (1.86 rounded to nearest integer)\n"
"Math.floor(x) // Value = 1 (1.86 rounded toward minus infinity)\n"
"Math.floor(-5.12) // Value = -6 (rounded toward minus infinity)\n"
"Math.ceiling(x) // Value = 2 (1.86 rounded toward plus infinity)\n"
"Math.ceiling(-5.12) // Value = -5 (rounded toward plus infinity)\n"
"(double) 17 // Value = 17.0 (âcasted to doubleâ, converted to double)\n"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/recursion/Square.html:44
msgid ""
"Even if this is the first exercise on the recursivity lesson, the code you "
"have to write is not recursive. The goal is to get familiar with the turtle "
"world before getting on serious matter."
msgstr ""

#. type: Content of: <p><p><p><p>
#: src/lessons/recursion/Square.html:48
msgid ""
"You must reproduce a simple geometrical painting constituted of four 100 "
"steps long squares (see the objective world for more details). It is "
"obviously a good idea to write a method to draw a square, and then use it in "
"your <code>run()</code> in charge of doing the work. You must absolutely "
"write at least the run method, which prototype is the following:"
msgstr ""

#. type: Content of: <p><p><p><p><pre>
#: src/lessons/recursion/Square.html:54
#, no-wrap
msgid ""
"public void run() {\n"
"  // write here what your turtle is supposed to do\n"
"}"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/PolygonFractal.html:1
msgid "Fractal of polygons"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/PolygonFractal.html:3
msgid ""
"The fractal we will now draw is formed of a polygon, with little polygons on "
"each corner. The prototype of the method drawing it is the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/PolygonFractal.html:5
#, no-wrap
msgid "void polygonFractal (int levels, int sides, double length, double shrink)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/PolygonFractal.html:7 src/lessons/recursion/Sierpinski.html:8 src/lessons/recursion/DragonCurve1.html:27 src/lessons/recursion/DragonCurve2.html:50
msgid ""
"Have a look at each world's objective view to understand how to write the "
"function."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Koch.html:1
msgid "Snow flake"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Koch.html:3
msgid ""
"We will now draw snow flakes using the Koch fractal. A fractal is a "
"geometrical pattern repeated at every scale."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Koch.html:6
msgid ""
"The general form is a triangle, with each side given by a serie of recursive "
"calls. The general form is given by something like this:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/recursion/Koch.html:8
#, no-wrap
msgid ""
"void snowFlake (int levels, double length) {\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"   snowSide(levels, length);\n"
"   turnRight(120);\n"
"}"
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/recursion/Koch.html:17
msgid ""
"Observe the drawing in each world's objective to understand the pattern's "
"logic, and then reproduce it. You must write the <code>snowSide()</code> "
"method, which is recursive."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Star.html:1
msgid "Turtles in the stars"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Star.html:3
msgid ""
"This is the last hand-on turtles exercise before recursion. The goal is to "
"draw three 5-branches stars. Like any regular stars with N branches, the "
"angle at each external corners are 360/N degrees while the angles between "
"branches are of 2*360/N degrees."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Star.html:8
msgid ""
"The first star to draw is black (<code>Color.black</code>) and its branches "
"are 100 steps long. The second is blue (<code>Color.blue</code>) and its "
"branches are 80 steps long. It's shifted of 45 degrees from the first "
"one. The last star is red (<code>Color.red</code>), its branches are 60 "
"steps long and it's shifted of 45 degrees from the previous one."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Star.html:14
msgid "Observe the world's objective to visualize the picture to draw."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Circle.html:1
msgid "Three little circles"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Circle.html:3
msgid ""
"As we saw (and as you can check in the documentation of this world under "
"\"About this world\"), turtles can only draw straight lines. Despite of "
"this, the goal of this world is to draw circles... This can be achived "
"simply by realizing that a circle can be seen as a concatenation of very "
"little segments."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Circle.html:9
msgid ""
"Differential calculus would even argue that a circle is the asymptotical "
"limit of such construct when the size of each segment becomes infinitely "
"small while their amount becomes infinitely large (but it is still possible "
"to solve this exercise without understanding differential calculus)."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Circle.html:16
msgid ""
"Write a function drawing a circle, taking the size of each of the 360 "
"segments as parameter. Then use it in your <code>run()</code> method to draw "
"the whole picture. The first circle is obtained with segments of size 0.5, "
"the second with segments of size 1 and the last one with 1.5-long "
"segments. Once again, this is a hand-on exercise, no recursion is needed."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Tree.html:1
msgid "Trees"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Tree.html:3
msgid ""
"We will now draw trees. For that, we will write a method using double "
"recursion following this prototype"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/Tree.html:5
#, no-wrap
msgid "void tree(int steps, double length, double angle, double shrink)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/Tree.html:7
msgid ""
"To draw a tree of four levels, you have to draw a trunk of the given length, "
"turn right of the given angle, draw a tree of level 3, turn left twice of "
"the given angle, draw another tree of level 3, and come back to your initial "
"location."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/recursion/Tree.html:12
msgid ""
"If a tree's trunk is of length 'len', the trunk of the next level tree will "
"be of length 'len*shrink'."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Sierpinski.html:1
msgid "Sierpinski's Triangle"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Sierpinski.html:3
msgid ""
"The fractal we will now draw is formed of a big triangle inside which "
"several smaller triangles are embeeded. The prototype of the fuction to draw "
"it is the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/Sierpinski.html:6
#, no-wrap
msgid "void sierpinski(int level, double length)"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/Spiral.html:1
msgid "Spirals"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Spiral.html:3
msgid ""
"We will now draw our first recursive function with the turtle. The goal is "
"to draw different kind of spirals with the same function, which prototype is "
"the following:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/Spiral.html:6
#, no-wrap
msgid "void spiral(int steps, int angle, int length, int increment)"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/Spiral.html:8
msgid ""
"To help you understanding how to write it, here is an example of how the "
"parameters change during one specific call:"
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/Spiral.html:11
#, no-wrap
msgid ""
"spiral(5, 90, 0, 3);\n"
"  forward(0);\n"
"  turnLeft(90);\n"
"  spiral(4,90,3,3);\n"
"    forward(3);\n"
"    turnLeft(90);\n"
"    spiral(3,90,6,3);\n"
"      forward(6);\n"
"      turnLeft(90);\n"
"      spiral(2,90,9,3);\n"
"        forward(9);\n"
"        turnLeft(90);\n"
"        spiral(1,90,12,3);\n"
"          forward(12);\n"
"          turnLeft(90);\n"
"          spiral(0,90,12,3);\n"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/DragonCurve1.html:1
msgid "Dragon curve (1)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:3
msgid "The dragon curve is a classical example of recursive method."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:5
msgid "The definition of this curve is the following:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:6
msgid "the dragon curve of order 1 is a vector between to arbitrary points P and Q,"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:7
msgid ""
"the dragon curve of order n is the dragon curve of order n-1 between P and "
"R, followed by the same curve of order n-1 between R and Q (reverse side), "
"where PRQ is an isoscele triangle with angle R being a right angle, and R "
"being at the right of the PQ vector. Thus, if P and Q coordinates are (x, y)  "
"and (z, t), the coordinate (u, v) of R are given by:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/recursion/DragonCurve1.html:13 src/lessons/recursion/DragonCurve2.html:27
#, no-wrap
msgid ""
"u = (x + z)/2 + (t - y)/2\n"
"v = (y + t)/2 - (z - x)/2\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:19
msgid "The prototype of the method drawing the curve is the following:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/recursion/DragonCurve1.html:20 src/lessons/recursion/DragonCurve2.html:22
#, no-wrap
msgid "void dragon(int ordre, double x, double y, double z, double t)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve1.html:23
msgid ""
"You should use the method <code>setPos(x,y)</code> to put your turtle at "
"coordinates (x,y) and the method <code>moveTo(z,t)</code> to draw a line "
"between the turtle position and the point (z,t)."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/DragonCurve2.html:1
msgid "The dragon curve (2)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:3
msgid ""
"Previous solution induce that the turtle teleports to other location, or at "
"the very least, that it moves its pen up during the drawing. Indeed, the end "
"of the drawing of the first recursive call does not match the begining of "
"the second recursive call. That is why we had to use the method "
"<code>setPos()</code>"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:9
msgid ""
"In this lesson, you will write a recursive method allowing to draw the "
"dragon curve without taking the pen up. For that, we need another recursive "
"method drawing the mirror side of the curve."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:13
msgid ""
"The method <code>dragon()</code> is then recursively defined using itself "
"and <code>dragonReverse()</code>. Likewise, the method "
"<code>dragonReverse()</code> is defined recursively using itself and "
"<code>dragon()</code>. This is thus an example of <i>mutual recursion</i>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:20
msgid ""
"The prototype of the <code>dragon()</code> method remains unchanged from "
"previous exercise:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:24
msgid ""
"The new point's coordinate (u, v) introduced by the <code>dragon()</code> "
"are:"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:33
msgid "The prototype of the method <code>dragonReverse</code> is similar:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/recursion/DragonCurve2.html:34
#, no-wrap
msgid "void dragonReverse(int ordre, double x, double y, double z, double t)"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:36
msgid ""
"The new point's coordinate (u, v) introduced by the "
"<code>dragonReverse()</code> are:"
msgstr ""

#. type: Content of: <p><pre>
#: src/lessons/recursion/DragonCurve2.html:39
#, no-wrap
msgid ""
"u = (x + z)/2 - (t - y)/2\n"
"v = (y + t)/2 + (z - x)/2\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/DragonCurve2.html:45
msgid ""
"To make the work of each method recursiv more visible, the line painted by "
"the <code>dragon()</code> must be red (<code>Color.red</code>) while the "
"line painted by the <code>dragonReverse()</code> must be blue "
"(<code>Color.blue</code>)."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/SpiralUse.html:1
msgid "Drawing spirals"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/SpiralUse.html:3
msgid ""
"Can you reproduce the provided patterns of this exercise using the "
"<code>spiral()</code> method?"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/SpiralUse.html:6
msgid ""
"You must provide a method called <code>doit(int)</code> taking the number of "
"the page to draw as parameter. Its code is as following, with A0, B0, etc "
"being integers. The goal of this exercise is to find the good values for "
"each page."
msgstr ""

#. type: Content of: <pre>
#: src/lessons/recursion/SpiralUse.html:12
#, no-wrap
msgid ""
"void doit(int page) {\n"
"  switch (page) {\n"
"    case 0: /* Drawing of the first page, dubbed \"One\" */\n"
"      spiral(A0,B0,C0,D0);\n"
"      break;\n"
"    case 1: /* Drawing of the second page, dubbed \"Two\" */\n"
"      spiral(A1,B1,C1,D1);\n"
"      break;\n"
"    case 2: /* Drawing of the page dubbed \"Three\" */\n"
"      spiral(A2,B2,C2,D2);\n"
"      break;\n"
"    case 3: /* Drawing of the page dubbed \"Four\" */\n"
"      spiral(A3,B3,C3,D3);\n"
"      break;\n"
"    case 4: /* Drawing of the page dubbed \"Five\" */\n"
"      spiral(A4,B4,C4,D4);\n"
"      break;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/recursion/SpiralUse.html:34
msgid ""
"No need to copy over the method of <code>spiral()</code>, the turtle of this "
"exercise already knows it."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/recursion/HanoiBoard.html:1
msgid "Tower of Hanoi"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/HanoiBoard.html:3
msgid ""
"The Tower of Hanoi or Towers of Hanoi , also called the Tower of Brahma or "
"Towers of Brahma, is a mathematical game or puzzle. It consists of three "
"rods, and a number of disks of different sizes which can slide onto any "
"rod. The puzzle starts with the disks in a neat stack in ascending order of "
"size on one rod, the smallest at the top, thus forming a pyramid.  The "
"objective of the puzzle is to move the entire stack to another rod, obeying "
"the following rules:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:11
msgid "Only one disk may be moved at a time."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:13
msgid ""
"Each move consists of taking the upper disk from one of the rods and sliding "
"it onto another rod, on top of the other disks that may already be present "
"on that rod."
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:17
msgid "No disk may be placed on top of a smaller disk."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/HanoiBoard.html:22
msgid ""
"Write the core of the method: <code>public void solve(int src, int dst, int "
"height) throws HanoiInvalidMove</code> This method will recursively solve "
"the presented problem. First parameter named <code>src</code> is the index "
"of the initial tower, second parameter <code>dst</code> is the index of the "
"expected final tower, and the third parameter <code>height</code> is the "
"height of the tower.  A key to solving this puzzle is to recognize that it "
"can be solved by breaking the problem down into a collection of smaller "
"problems and further breaking those problems down into even smaller problems "
"until a solution is reached.  The following procedure demonstrates this "
"approach:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:36
msgid "label the pegs A, B, C (these labels may move at different steps)"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:37
msgid "let n be the total number of discs (the height of the initial tower)"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:38
msgid "number the discs from 1 (smallest, topmost) to n (largest, bottommost)"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/recursion/HanoiBoard.html:41
msgid "To move n discs from peg A to peg C:"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:43
msgid "move nâ1 discs from A to B. This leaves disc #n alone on peg A"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:44
msgid "move disc #n from A to C"
msgstr ""

#. type: Content of: <ul><li>
#: src/lessons/recursion/HanoiBoard.html:45
msgid "move nâ1 discs from B to C so they sit on disc #n"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/maze/Main.html:1
msgid "Labyrinths"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/Main.html:3
msgid "This lesson propose several exercises about labyrinths in the buggle world."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/RandomMouseMaze.html:1
msgid "The crazy mouse"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/RandomMouseMaze.html:3
msgid ""
"The day of your buggle starts badly. Out of luck, it got trapped into a "
"maze. Help it finding its path out of there."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/RandomMouseMaze.html:8
msgid ""
"The exit is represented by a baggle and you need to pick this baggle in "
"order to exit the maze."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/RandomMouseMaze.html:13
msgid ""
"Since the maze is so small, we can write the dumbest possible algorithm to "
"do so. It relies on randomness and proves quite inefficient."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/RandomMouseMaze.html:18
msgid ""
"While the buggle didn't find the path to the escape, it must proceed the "
"following way: pick a random integer between 0 and 2 by using the "
"<code>random3()</code> method and make one of the following actions: moving "
"forward if possible, turn left or turn right."
msgstr ""

#. type: Content of: <a>
#: src/lessons/maze/RandomMouseMaze.html:23
msgid "<a name=\"Objectives\">"
msgstr ""

#. type: Content of: <a><p>
#: src/lessons/maze/RandomMouseMaze.html:26
msgid ""
"This exercise's objective is to write an algorithm allowing the buggle to "
"find its path out of the maze. Do not forget to let your buggle pick up the "
"baggle once it found the way out."
msgstr ""

#. type: Content of: <a><p>
#: src/lessons/maze/RandomMouseMaze.html:32
msgid ""
"Write the <code>run()</code> method so that your buggle takes a random "
"decision (forward, turn left or turn right). You can use the "
"<code>random3()</code> method which returns randomly either 0, 1 or 2."
msgstr ""

#. type: Content of: <a><p>
#: src/lessons/maze/RandomMouseMaze.html:38
msgid "Don't forget to pick up the baggle once you've reached it."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/WallFollowerMaze.html:1
msgid "Following the walls"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:3
msgid ""
"This time, the maze is a bit more complicated. Random won't be enough, we "
"ough to be smart!"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:6
msgid ""
"Hopefully, this maze is simpler that it seems at the first glance: every "
"wall are connected to each other. To get out of this kind of maze, the "
"buggle only have to follow a wall (the one on its left or the one on its "
"right, it doesn't matter).  While keeping a paw on the wall, the buggle must "
"move forward until it finds the maze exit and this biscuit it loves so much."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:13
msgid ""
"This algorithm works here because there is no island of isolated walls, so "
"our buggle cannot loop around for ever without encountering the baggle it "
"looks for."
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/maze/WallFollowerMaze.html:17
msgid ""
"The goal of this exercise is to write an algorithm allowing the buggle to "
"get out of this maze."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:20
msgid ""
"As said in the introduction, it is exactly the same if you decide to follow "
"the left wall or the right one. Simply, the demo follows the left one, so "
"you should do the same in your solution to ease the comparison of your "
"solution and the demo."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:25
msgid ""
"Write a method <code>void keepHandOnSideWall()</code> which lets the buggle "
"move one step forward while keeping the paw on the wall of the selected "
"side. You thus have to ensure that the buggle always keep the paw on the "
"wall, but also that it won't crash into a wall. You can check the tip for "
"more info on this, but only do so if you're stuck. Try to do it without the "
"tip first."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFollowerMaze.html:32
msgid ""
"Then, write a <code>run()</code> method which traverse the maze step by step "
"(using <code>void keepHandOnSideWall()</code>) until it finds the biscuit "
"and the exit. Don't forget to pick the baggle up once you've found it."
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/maze/WallFollowerMaze.html:37
msgid "I'm lost, please give me some extra indications"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/maze/WallFollowerMaze.html:38
msgid ""
"When your buggle has a wall on the left, there is three situations to "
"consider, depending on the surrounding walls. The following table depicts "
"each initial situation, and where you should let your buggle end after one "
"step."
msgstr ""

#. type: Content of: <div><table><tr><td>
#: src/lessons/maze/WallFollowerMaze.html:45
msgid "Case 1"
msgstr ""

#. type: Content of: <div><table><tr><td>
#: src/lessons/maze/WallFollowerMaze.html:46
msgid "Case 2"
msgstr ""

#. type: Content of: <div><table><tr><td>
#: src/lessons/maze/WallFollowerMaze.html:47
msgid "Case 3"
msgstr ""

#. type: Content of: <div><table><tr><td>
#: src/lessons/maze/WallFollowerMaze.html:49
msgid "Initial situation"
msgstr ""

#. type: Content of: <div><table><tr><td>
#: src/lessons/maze/WallFollowerMaze.html:54
msgid "Where is the next step"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/maze/WallFollowerMaze.html:60
msgid ""
"If you do a <code>turnRight()</code> in any case at the end of your "
"function, it's possible to write it in 3 lines with a <code>while()</code> "
"loop."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/PledgeMaze.html:1
msgid "Pledge algorithm"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:3
msgid ""
"Once again, you thought that your algorithm were good enough to escape the "
"maze, and once again, you buggle is now in a maze where your previous "
"algorithm fails. Just give it a try: hit the \"Run\" button and see your "
"creation fail. The trap is shaped like an upper case \"G\". The buggle "
"enters the trap and follows the inner border. At some point, it finds the "
"north direction free, run into that direction, and falls again in the trap."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:12
msgid ""
"The Pledge's algorithm (named after Jon Pledge of Exeter) can solve this "
"maze."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:15
msgid ""
"This algorithm is a modification of the previous one thought to avoid "
"obstacles. It randomly picks a heading and let the buggle move in that "
"direction. When it encounters an obstacle, a paw (for example the left one)  "
"is kept on the wall following the obstacle while counting the turns. When "
"the buggle is back to its original heading and when the sum of the turns is "
"0, the buggle leaves the obstacle and continues keeping its original "
"heading."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:23
msgid ""
"Note that the use of \"total turning\" rather than just the \"current "
"direction\" allows the algorithm to avoid G-shapped traps. If one proceeds "
"left into the trap, one gets turned around a full 360 degrees by the "
"walls. As we said before, the naive \"current direction\" algorithm gets "
"into a limit cycle as it leaves the lower rightmost wall heading left and "
"runs into the curved section on the left again."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:30
msgid ""
"The Pledge's algorithm does not leave the rightmost wall due to the total "
"turning not being zero at that point. It follows the wall all the way "
"around, finally leaving it heading left on the bottom outside"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:37
msgid ""
"<a name=\"Objective\"/>You now have to modify your solution to implement the "
"Pledge algorithm to escape this maze."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:40
msgid ""
"Change your <code>void keepHandOnSideWall()</code> method to count the "
"amount of turns done by the buggle (+1 when it turns left, and -1 when it "
"turns right). This counting may require the addition of an "
"<code>angleSum</code> integer value in your program."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:45
msgid ""
"Write a <code>boolean isChosenDirectionFree()</code> method indicating if "
"the arbitrary direction you picked up is free, ie, if you can move in that "
"direction. (Note that the demo uses the NORTH direction for that).  You can "
"retrieve the current direction of the buggle using the <code>Direction "
"getDirection()</code> method. You can change your direction (without moving) "
"using <code>void setDirection(Direction d)</code>. Don't forget to store the "
"previous direction of your buggle (in a variable of type Direction) before "
"checking if your favorite direction is free in order to restore your state "
"afterward."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/PledgeMaze.html:55
msgid ""
"You may have to change the rest of your code also, but these changes should "
"remain limited."
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/maze/PledgeMaze.html:58
msgid "Show an additional tip"
msgstr ""

#. type: Content of: <div>
#: src/lessons/maze/PledgeMaze.html:59
msgid ""
"The <code>void run()</code> method should move in your favorite direction "
"(NORTH is advised). Then, you should write the algorithm main loop. In other "
"words, while your buggle did not find its biscuit, you have to move forward "
"until next obstacle in the favorite direction. Then, put a paw on a wall "
"(using (<code>void keepHandOnSideWall()</code>) while the sum of turns is "
"not null and the favorite direction is not free. Do that until you find your "
"baggle."
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/IslandMaze.html:1
msgid "Lost between islands"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/IslandMaze.html:3
msgid ""
"You thought that your algorithm was enough to escape mazes? Well, not every "
"mazes..."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/IslandMaze.html:7
msgid ""
"The <i>wall follower algorithm</i> we used so far only works if the entry "
"and the exit are placed near to walls connected to the external wall. But if "
"the buggle begins in the middle of the maze, it may exist wall sections "
"disconnected from the external wall."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/maze/IslandMaze.html:12
msgid ""
"That is why the previous strategy would let the buggle round around for "
"ever. Indeed, the maze you should now escape from contains islands, and the "
"buggle does not start along one of the external walls. Just give it a try if "
"you want: push the run button and see your previous solution fail "
"miserabily."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/maze/IslandMaze.html:18
msgid ""
"The method of following a wall is still good and allow to escape very "
"efficiently some sections of the maze, so we do not want to remove it "
"entierely. Instead, we want to stop following the wall under some "
"conditions. Notice that the baggle lays near to the external border of the "
"maze. So, we want to reach the border and then follow that wall. We need for "
"example to search for the north wall before following it to the baggle."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/maze/IslandMaze.html:26
msgid ""
"To find the north wall, you simply run to the north as long as it's "
"possible, and when facing an obstacle, you avoid it (using previous method)."
msgstr ""

#. type: Attribute 'alt' of: <p><p><div>
#: src/lessons/maze/IslandMaze.html:30
msgid "I'm lost now, please give me some extra indications"
msgstr ""

#. type: Content of: <p><p><div>
#: src/lessons/maze/IslandMaze.html:31
msgid ""
"Our new run() method will consist in two modes: our buggle will alternate "
"between the \"north runner mode\" and the \"left follower mode\". You begin "
"in \"north runner mode\", and switch to \"left follower\" when you have a "
"wall at the north (do not forget to make sure you have a wall at your left "
"before switching to \"left follower\" mode). You switch to \"north runner\" "
"as soon as your buggle is facing north and is not in front of a wall during "
"its trip around its left wall. The easiest way to write such a state machine "
"is something like"
msgstr ""

#. type: Content of: <p><p><div><pre>
#: src/lessons/maze/IslandMaze.html:40
#, no-wrap
msgid ""
"\t<code>int state=0;\n"
"switch (state) {\n"
"  case 0: \n"
"     ...\n"
"     state = 1;\n"
"     break;\n"
"  case 1:\n"
"     ...\n"
"     state = 0;\n"
"     break;\n"
"}\n"
"</code>\n"
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/maze/IslandMaze.html:55
msgid "Don't forget to let the buggle pick the baggle at the end of your code."
msgstr ""

#. type: Content of: <p><p><p>
#: src/lessons/maze/IslandMaze.html:58
msgid ""
"You're up. That should be enough for you to figure out how to escape this "
"maze, but if not, you can always request for the tip. But you do not need "
"any more help, do you?"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/ShortestPathMaze.html:1
msgid "Basic Shortest Path algorithm"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:3
msgid ""
"To conclude with this introductory lesson to maze solving algorithms, we "
"will investigate another way to find the exit. The buggle in this lesson is "
"a special buggle: he is a jedi. He can feel the Force. This means he is able "
"to feel his environment."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:7
msgid ""
"By using method <code>BuggleWorld getMyWorld()</code> he can retrieve "
"information about the world he is leaving in."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:9
msgid ""
"A <code>BuggleWorld</code> object is an object on which you can perform the "
"following operations:"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:11
msgid "<code>int getHeight()</code> to know the height of the world."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:12
msgid "<code>int getWidth()</code> to know the width of the world."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:13
msgid ""
"<code>BuggleWorldCell getCell(int x, int y)</code> to retrieve the "
"<code>BuggleWorldCell</code> object located at a specific position in the "
"world."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:19
msgid ""
"A <code>BuggleWorldCell</code> is an object that represents a cell of the "
"world. On an object of this type, it is possible to call the following "
"methods:"
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:22
msgid ""
"<code>boolean hasContent()</code> to know if something is written on the "
"floor of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:23
msgid ""
"<code>void setContentFromInt(int v)</code> to write an integer value on the "
"floor of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:24
msgid ""
"<code>int getContentAsInt()</code> to retrieve the integer value which is "
"written on the floor of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:25
msgid "<code>void emptyContent()</code> to clean the floor of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:26
msgid ""
"<code>boolean hasTopWall()</code> to know if a wall is built on the top edge "
"of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:27
msgid ""
"<code>boolean hasLeftWall()</code> to know if a wall is built on the left "
"edge of this cell."
msgstr ""

#. type: Content of: <p><ul><li>
#: src/lessons/maze/ShortestPathMaze.html:28
msgid ""
"<code>boolean hasBaggle()</code> to know if a baggle is present on this "
"cell."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:32
msgid ""
"It has to be noted that it is not possible to build a wall on the bottom "
"edge or on the right edge of a cell.  Therefore when such wall exists, it "
"means it was built on a sibling cells -- as a top (respectively left) wall "
"on the cell that is located below (respectively at the right of) the current "
"cell."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:38
msgid ""
"<a name=\"Objective\"/>Write a method <code>evaluatePaths()</code> which "
"computes a very basic shortest path algorithm. This algorithm will write on "
"each world cell (or at least the one that are useful) the distance from this "
"cell to the maze exit."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:41
msgid ""
"To achieve this objective, your algorithm has to find the exit of the maze "
"on the map. Then, for every cells next to the cell where the exit is "
"located, it has to mark these cells with a integer value of 1 (indicating "
"the distance). Then, it has to iterate the same process to mark the cells "
"which are at a distance of 2 and so on until it marks the cell where the "
"buggle is located."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/ShortestPathMaze.html:46
msgid ""
"Write a method <code>followShortestPath()</code> that will make the jedi "
"buggle to follow the shortest path.  Basically the buggle has only to walk "
"on each case with the lesser distance from the exit. You can use the method "
"<code>void setDirection(Direction d)</code> to make your buggle look at the "
"specific direction such as <code>Direction.NORTH</code> or "
"<code>Direction.EAST</code>."
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/maze/ShortestPathMaze.html:51
msgid "I'm lost now. Please give me some extra indications."
msgstr ""

#. type: Content of: <div>
#: src/lessons/maze/ShortestPathMaze.html:52
msgid "Use the Force Luke!"
msgstr ""

#. type: Content of: <h2>
#: src/lessons/maze/WallFindFollowMaze.html:1
msgid "Finding the walls to follow"
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFindFollowMaze.html:3
msgid ""
"This is exactly the same maze than before, but the buggle does not start at "
"the same location. In particular, it does not have any wall to its left at "
"the beginning."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFindFollowMaze.html:7
msgid ""
"As a result, the method you wrote for the previous exercise probably don't "
"work for this one. If you click on the run button with no modification, your "
"buggle probably start looping over the four free cells around its start "
"position (if that's not the case, well, you didn't really stick to the "
"mission on previous exercise. Feel lucky and move to the next one once "
"you've read this text)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFindFollowMaze.html:14
msgid ""
"This is because your <code>keepHandOnSideWall()</code> method has an "
"implicit <b>pre-condition</b>: it works well if and only if the buggle has a "
"wall to its left when you call it. Such pre-condition are very heavily used "
"when programming. Specifying them explicitly helps understanding the code "
"written by other, and they even allow sometimes to prove that the code works "
"correctly."
msgstr ""

#. type: Content of: <p>
#: src/lessons/maze/WallFindFollowMaze.html:24
msgid ""
"Fixing the problem should be very easy. Simply make sure that the "
"pre-condition of <code>keepHandOnSideWall()</code> is verified before "
"calling it. For that, update your run() method to first look for a wall on "
"its left before the big <code>while</code> loop."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/lightbot/LightBotWorld.html:1
msgid "LightBotWorld"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/jlm/universe/lightbot/LightBotWorld.html:3
msgid ""
"This world introduces a little programming puzzle which can somehow be used "
"to introduce programmation to non-reading kids since it is programmed "
"graphically.  The goal of each board is to light up all the lights. Your "
"robot understands the following orders:"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:7
msgid "<b>Order</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:7
msgid "<b>Meaning</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:8
msgid "<b>Move forward</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:8
msgid "Cannot be done if the destination cell is of another height than source cell"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:9
msgid "<b>Jump forward</b>"
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:9
msgid ""
"Can only be done if the destination cell is one step higher than source "
"cell, or if destination is lower than source. Cannot be used for plain "
"moves."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:10
msgid "<b>Turn left</b>."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:11
msgid "<b>Turn right</b>."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:12
msgid "<b>Switch the light</b>."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:12
msgid ""
"Turn it on if it was off, and off if it was on. No effect if the cell does "
"not contain any light."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:13
msgid "<b>Call function 1</b>."
msgstr ""

#. type: Content of: <table><tr><td>
#: src/jlm/universe/lightbot/LightBotWorld.html:14
msgid "<b>Call function 2</b>."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/lightbot/LightBotWorld.html:17
msgid ""
"Please note that this world is not completely suited to small kids since the "
"main difficulty comes from the fact that your are highly limited in the "
"amount of instructions you can give to your robot. Advanced levels thus "
"require to write sound functions, and are often above the capacities of "
"small kids."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/lightbot/LightBotWorld.html:19
msgid ""
"This game is heavily inspirated from a flash game of the same name, which "
"can for example be played on kongregate.com. It was written by Danny "
"Yaroslavski (Coolio-Niato), the original idea being of Matt Chase."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Main.html:1
msgid "LightBot"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/lightbot/Main.html:2
msgid ""
"This lesson introduces a little programming puzzle inspired from a flash "
"game."
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Main.html:4
msgid "See the <i>About this world</i> dialog for more details."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board01TwoSteps.html:1
msgid "Welcome"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board01TwoSteps.html:3
msgid ""
"Welcome to the lightbot world. This is merely a programmer puzzle rather "
"than a real lesson (although some use it to teach programming).  The robot "
"is not programmed in Java, but rather graphically. You can see the existing "
"orders in the documentation using the <i>About this world</i> menu."
msgstr ""

#. type: Content of: <p><</p><p>
#: src/lessons/lightbot/Board01TwoSteps.html:6
msgid ""
"The goal of each board is simply to switch on every lights of the board "
"using your little robot."
msgstr ""

#. type: Content of: <p><</p><p>
#: src/lessons/lightbot/Board01TwoSteps.html:8
msgid ""
"This is a introduction exercise, which should be solvable by only moving "
"forward and switching the light, using respectively"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board01TwoSteps.html:8 src/lessons/lightbot/Board02Turn.html:3 src/lessons/lightbot/Board06Func.html:3
msgid "and"
msgstr ""

#. type: Content of: <p><</p><p>
#: src/lessons/lightbot/Board01TwoSteps.html:8
msgid "."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board02Turn.html:1
msgid "Turn around"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board02Turn.html:3
msgid "Now, you probably need to turn in addition (using"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board02Turn.html:3
msgid ")."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board03Jump.html:1
msgid "Jump"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board03Jump.html:3
msgid "You can also jump using"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board03Jump.html:3
msgid ""
"to pass obstacles. You can either jump one level up or any amount of levels "
"down, but you cannot jump to go on a cell of the same height."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board04Stairs.html:1
msgid "Stairs"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board04Stairs.html:3
msgid "Can you pass these stairs?"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board05Higher.html:1
msgid "Higher"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board05Higher.html:3
msgid "Let's go higher"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board06Func.html:1
msgid "Functions"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board06Func.html:3
msgid "You can use"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board06Func.html:3
msgid ""
"to call respectively the first and second functions. Define their code in "
"their own tab."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/lightbot/Board06Func.html:5
msgid "This is great if you get out of space in your main function"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board07Repeat.html:1
msgid "Repetitive tasks"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board07Repeat.html:3
msgid "Functions are also of great use for repetitive tasks"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board08Rec.html:1
msgid "Calling functions from functions"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board08Rec.html:3
msgid "It is perfectly okay to call a function from within a function!"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board09Castle.html:1
msgid "Castle"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board09Castle.html:3
msgid "You're getting good at this..."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board10Wall.html:1
msgid "Wall"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board10Wall.html:3
msgid "Ready to climb the wall?"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board11Sea.html:1
msgid "Sea"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board11Sea.html:3
msgid "You now have to surf these waves of lamps."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/lightbot/Board12Escher.html:1
msgid "Escher Castle"
msgstr ""

#. type: Content of: <p>
#: src/lessons/lightbot/Board12Escher.html:3
msgid "This one aint easy."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/Close10.html:1
msgid "Close to 10"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/Close10.html:2
msgid ""
"Given 2 int values, return whichever value is nearest to the value 10, or "
"return 0 in the event of a tie. Note that Math.abs(n) returns the absolute "
"value of a number."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool1/Close10.html:6 src/lessons/welcome/bool1/Diff21.html:5 src/lessons/welcome/bool1/HasTeen.html:6 src/lessons/welcome/bool1/IcyHot.html:5 src/lessons/welcome/bool1/In1020.html:5 src/lessons/welcome/bool1/In3050.html:5 src/lessons/welcome/bool1/LastDigit.html:9 src/lessons/welcome/bool1/LoneTeen.html:6 src/lessons/welcome/bool1/Main.html:11 src/lessons/welcome/bool1/Makes10.html:5 src/lessons/welcome/bool1/Max1020.html:8 src/lessons/welcome/bool1/MonkeyTrouble.html:7 src/lessons/welcome/bool1/NearHundred.html:5 src/lessons/welcome/bool1/ParotTrouble.html:8 src/lessons/welcome/bool1/PosNeg.html:5 src/lessons/welcome/bool1/SleepIn.html:7 src/lessons/welcome/bool1/SumDouble.html:5 src/lessons/welcome/bool2/AlarmClock.html:11 src/lessons/welcome/bool2/AnswerCell.html:8 src/lessons/welcome/bool2/BlueTicket.html:10 src/lessons/welcome/bool2/CaughtSpeeding.html:11 src/lessons/welcome/bool2/CigarParty.html:9 src/lessons/welcome/bool2/DateFashion.html:12 src/lessons/welcome/bool2/GreenTicket.html:9 src/lessons/welcome/bool2/In1To10.html:8 src/lessons/welcome/bool2/InOrderEqual.html:9 src/lessons/welcome/bool2/InOrder.html:8 src/lessons/welcome/bool2/LastDigit2.html:8 src/lessons/welcome/bool2/LessBy10.html:5 src/lessons/welcome/bool2/Main.html:4 src/lessons/welcome/bool2/MaxMod5.html:9 src/lessons/welcome/bool2/NearTen.html:8 src/lessons/welcome/bool2/RedTicket.html:9 src/lessons/welcome/bool2/ShareDigit.html:9 src/lessons/welcome/bool2/SortaSum.html:7 src/lessons/welcome/bool2/SquirrelPlay.html:10 src/lessons/welcome/bool2/TeaParty.html:11 src/lessons/welcome/bool2/TeenSum.html:8 src/lessons/welcome/bool2/TwoAsOne.html:5 src/lessons/welcome/bool2/WithoutDoubles.html:8 src/lessons/bat/string1/AltPairs.html:4 src/lessons/bat/string1/Array123.html:4 src/lessons/bat/string1/Array667.html:7 src/lessons/bat/string1/ArrayCount9.html:4 src/lessons/bat/string1/ArrayFront9.html:4 src/lessons/bat/string1/FrontTimes.html:7 src/lessons/bat/string1/Has271.html:8 src/lessons/bat/string1/Last2.html:7 src/lessons/bat/string1/Main.html:8 src/lessons/bat/string1/NoTriples.html:7 src/lessons/bat/string1/StringBits.html:4 src/lessons/bat/string1/StringMatch.html:8 src/lessons/bat/string1/StringSplosion.html:4 src/lessons/bat/string1/StringTimes.html:4 src/lessons/bat/string1/StringX.html:6 src/lessons/bat/string1/StringYak.html:7
msgid ""
"This exercise was converted to JLM from the excellent exercising site "
"http://javabat.com/"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/CountTeen.html:1
msgid "Count Teen"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/CountTeen.html:2
msgid ""
"We'll say that a number is \"teen\" if it is in the range 13..19 "
"inclusive. Given 4 int values, return the amount of teen ones."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool1/CountTeen.html:5
msgid "This exercise was written by Martin Quinson."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/Diff21.html:1
msgid "Diff 21"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/Diff21.html:2
msgid ""
"Given an int n, return the absolute difference between n and 21, except "
"return double the absolute difference if n is over 21."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/HasTeen.html:1
msgid "Has Teen"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/HasTeen.html:2
msgid ""
"We'll say that a number is \"teen\" if it is in the range 13..19 "
"inclusive. Given 3 int values, return true if 1 or more of them are teen."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/IcyHot.html:1
msgid "Icy Hot"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/IcyHot.html:2
msgid ""
"Given two temperatures, return true if one is less than 0 and the other is "
"greater than 100."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/In1020.html:1
msgid "In [10;20]"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/In1020.html:2
msgid ""
"Given 2 int values, return true if either of them is in the range 10..20 "
"inclusive."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/In3050.html:1
msgid "In [30;50]"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/In3050.html:2
msgid ""
"Given 2 int values, return true if they are both in the range 30..40 "
"inclusive, or they are both in the range 40..50 inclusive."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/LastDigit.html:1
msgid "LastDigit"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/LastDigit.html:2
msgid ""
"Given two non-negative int values, return true if they have the same last "
"digit, such as with 27 and 57. Note that the % \"mod\" operator computes "
"remainders, so 17 % 10 is 7."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/LoneTeen.html:1
msgid "Lone Teen"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/LoneTeen.html:2
msgid ""
"We'll say that a number is \"teen\" if it is in the range 13..19 "
"inclusive. Given 2 int values, return true if one or the other is teen, but "
"not both."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/Main.html:1
msgid "Boolean fun"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool1/Main.html:3
msgid ""
"Boolean operations are one of the very basic task in programming.  As long "
"as you cannot write a not so simple boolean test under the minute, you "
"probably will have a very bad time writing a real program."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool1/Main.html:8
msgid ""
"That is why this lesson provides you a bunch of such exercises, so that you "
"can get trained in this."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/Makes10.html:1
msgid "Makes 10"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/Makes10.html:2
msgid ""
"Given 2 ints, a and b, return true if one if them is 10 or if their sum is "
"10."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/Max1020.html:1
msgid "Max1020"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/Max1020.html:2
msgid ""
"Given 2 positive int values, return the larger value that is in the range "
"10..20 inclusive, or return 0 if neither is in that range."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/MonkeyTrouble.html:1
msgid "MonkeyTrouble"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/MonkeyTrouble.html:3
msgid ""
"We have two monkeys, a and b, and the parameters aSmile and bSmile indicate "
"if each is smiling.  We are in trouble if they are both smiling or if "
"neither of them is smiling.  Return true if we are in trouble."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/NearHundred.html:1
msgid "Near Hundred"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool1/NearHundred.html:2
msgid ""
"Given an int n, return true if it is within 10 of 100 or 200. Note "
"Math.abs(n) returns the absolute value of a number."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/ParotTrouble.html:1
msgid "Parot Trouble"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/ParotTrouble.html:3
msgid ""
"We have a loud talking parrot. The \"hour\" parameter is the current hour "
"time in the range 0..23. We are in trouble if the parrot is talking and the "
"hour is before 7 or after 20. Return true if we are in trouble."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/PosNeg.html:1
msgid "Positive Negative"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/PosNeg.html:2
msgid ""
"Given 2 int values, return true if one is negative and one is "
"positive. Unless negative is true, then they both must be negative."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/SleepIn.html:1
msgid "SleepDay"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/SleepIn.html:3
msgid ""
"The parameter weekday is true if it is a weekday, and the parameter vacation "
"is true if we are on vacation. We sleep in if it is not a weekday or we're "
"on vacation. Return true if we sleep in."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool1/SumDouble.html:1
msgid "Sum Double"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool1/SumDouble.html:2
msgid ""
"Given two int values, return their sum. Unless the two values are the same, "
"then return double their sum."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/AlarmClock.html:1
msgid "AlarmClock"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/AlarmClock.html:2
msgid ""
"Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat, and a "
"boolean indicating if we are on vacation, return a string of the form "
"\"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm "
"should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are "
"on vacation -- then on weekdays it should be \"10:00\" and weekends it "
"should be \"off\"."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/AnswerCell.html:1
msgid "AnswerCell"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/AnswerCell.html:2
msgid ""
"Your cell phone rings. Return true if you should answer it. Normally you "
"answer, except in the morning you only answer if it is your mom calling. In "
"all cases, if you are asleep, you do not answer."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/BlueTicket.html:1
msgid "BlueTicket"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/BlueTicket.html:2
msgid ""
"You have a blue lottery ticket, with ints a, b, and c on it. This makes "
"three pairs, which we'll call ab, bc, and ac. Consider the sum of the "
"numbers in each pair. If any pair sums to exactly 10, the result is 10.  "
"Otherwise if the ab sum is exactly 10 more than either bc or ac sums, the "
"result is 5. Otherwise the result is 0."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/CaughtSpeeding.html:1
msgid "CaughtSpeeding"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/CaughtSpeeding.html:2
msgid ""
"You are driving a little too fast, and a police officer stops you. Write "
"code to compute the result, encoded as an int value: 0=no ticket, 1=small "
"ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is "
"between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the "
"result is 2. Unless it is your birthday -- on that day, your speed can be 5 "
"higher in all cases."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/CigarParty.html:1
msgid "CigarParty"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/CigarParty.html:2
msgid ""
"When squirrels get together for a party, they like to have cigars. A "
"squirrel party is successful when the number of cigars is between 40 and 60, "
"inclusive. Unless it is the weekend, in which case there is no upper bound "
"on the number of cigars. Return true if the party with the"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/DateFashion.html:1
msgid "DateFashion"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/DateFashion.html:2
msgid ""
"You and your date are trying to get a table at a restaurant. The parameter "
"\"you\" is the stylishness of your clothes, in the range 0..10, and \"date\" "
"is the stylishness of your date's clothes. The result getting the table is "
"encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very "
"stylish, 8 or more, then the result is 2 (yes). With the exception that if "
"either of you has style of 2 or less, then the result is 0 (no). Otherwise "
"the result is 1 (maybe)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/GreenTicket.html:1
msgid "GreenTicket"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/GreenTicket.html:2
msgid ""
"You have a green lottery ticket, with ints a, b, and c on it. If the numbers "
"are all different from each other, the result is 0. If all of the numbers "
"are the same, the result is 20. If two of the numbers are the same, the "
"result is 10."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/In1To10.html:1
msgid "In1To10"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/In1To10.html:2
msgid ""
"Given a number n, return true if n is in the range 1..10, inclusive. Unless "
"\"outsideMode\" is true, in which case return true if the number is less or "
"equal to 1, or greater or equal to 10."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/InOrderEqual.html:1
msgid "InOrderEqual"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/InOrderEqual.html:2
msgid ""
"Given three ints, a b c, return true if they are in strict increasing order, "
"such as 2 5 11, or 5 6 7, but not 6 5 7 or 5 5 7. However, with the "
"exception that if \"equalOk\" is true, equality is allowed, such as 5 5 7 or "
"5 5 5."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/InOrder.html:1
msgid "InOrder"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/InOrder.html:2
msgid ""
"Given three ints, a b c, return true if b is greater than a, and c is "
"greater than b. However, with the exception that if \"bOk\" is true, b does "
"not need to be greater than a."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/LastDigit2.html:1
msgid "LastDigit 2"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/LastDigit2.html:2
msgid ""
"Given three ints, a b c, return true if two or more of them have the same "
"rightmost digit. The ints are non-negative. Note: the % \"mod\" operator "
"computes the remainder, e.g. 17 % 10 is 7."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/LessBy10.html:1
msgid "LessBy10"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/LessBy10.html:2
msgid ""
"Given three ints, a b c, return true if one of them is 10 or more less than "
"one of the others."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/Main.html:1
msgid "Boolean (even more) fun"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/bool2/Main.html:3
msgid ""
"A very good introduction to this type is available here: "
"http://javabat.com/doc/ifboolean.html."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/MaxMod5.html:1
msgid "MaxMod5"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/MaxMod5.html:2
msgid ""
"Given two int values, return whichever value is larger. However if the two "
"values have the same remainder when divided by 5, then the return the "
"smaller value. However, in all cases, if the two values are the same, return "
"0.  Note: the % \"mod\" operator computes the remainder, e.g. 7 % 5 is 2."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/NearTen.html:1
msgid "NearTen"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/NearTen.html:2
msgid ""
"Given a non-negative number \"num\", return true if num is within 2 of a "
"multiple of 10. Note: (a % b) is the remainder of dividing a by b, so (7 % "
"5) is 2."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/RedTicket.html:1
msgid "RedTicket"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/RedTicket.html:2
msgid ""
"You have a red lottery ticket showing ints a, b, and c, each of which is 0, "
"1, or 2. If they are all the value 2, the result is 10. Otherwise if they "
"are all the same, the result is 5. Otherwise so long as both b and c are "
"different from a, the result is 1. Otherwise the result is 0."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/ShareDigit.html:1
msgid "ShareDigit"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/ShareDigit.html:2
msgid ""
"Given two ints, each in the range 10..99, return true if there is a digit "
"that appears in both numbers, such as the 2 in 12 and 23. (Note: division, "
"e.g. n/10, gives the left digit while the % \"mod\" n%10 gives the right "
"digit.)"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/SortaSum.html:1
msgid "SortaSum"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/SortaSum.html:2
msgid ""
"Given 2 ints, a and b, return their sum. However, sums in the range 10..19 "
"inclusive, are forbidden, so in that case just return 20."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/SquirrelPlay.html:1
msgid "SquirrelPlay"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/SquirrelPlay.html:2
msgid ""
"The squirrels in Palo Alto spend most of the day playing. In particular, "
"they play if the temperature is between 60 and 90 (inclusive). Unless it is "
"summer, then the upper limit is 100 instead of 90. Given an int temperature "
"and a boolean isSummer, return true if the squirrels play and false "
"otherwise."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/TeaParty.html:1
msgid "TeaParty"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/TeaParty.html:2
msgid ""
"We are having a party with amounts of tea and candy. Return the int outcome "
"of the party encoded as 0=bad, 1=good, or 2=great. A party is good (1) if "
"both tea and candy are at least 5. However, if either tea or candy is at "
"least double the amount of the other one, the party is great (2).  However, "
"in all cases, if either tea or candy is less than 5, the party is always bad "
"(0)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/TeenSum.html:1
msgid "TeenSum"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/TeenSum.html:2
msgid ""
"Given 2 ints, a and b, return their sum. However, \"teen\" values in the "
"range 13..19 inclusive, are extra lucky. So if either value is a teen, just "
"return 19."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/TwoAsOne.html:1
msgid "TwoAsOne"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/TwoAsOne.html:2
msgid ""
"Given three ints, a b c, return true if it is possible to add two of the "
"ints to get the third."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/bool2/WithoutDoubles.html:1
msgid "WithoutDoubles"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/welcome/bool2/WithoutDoubles.html:2
msgid ""
"Return the sum of two 6-sided dice rolls, each in the range 1..6. However, "
"if noDoubles is true, if the two dice show the same value, increment one die "
"to the next value, wrapping around to 1 if its value was 6."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/bat/BatWorld.html:1
msgid "BatWorld"
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/bat/BatWorld.html:3
msgid ""
"This world is a simplistic testing environment largely inspired from the "
"http://codingbat.com invented by Nick Parlente."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/bat/BatWorld.html:6
msgid ""
"The typical exercises are very short ones, aiming at improving the tactical "
"programming abilities of the students. That is to say that you will be "
"presented a quite long list of very little exercises about rather simple "
"things. The idea is to train you on these issues until they become automatic "
"to you."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/bat/BatWorld.html:12
msgid ""
"In contrary to the other worlds, the BatWorld does not provide any fancy "
"abstraction nor visualization. You have to fill a function, which gets "
"called for a bunch of parameter sets, and that's it."
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/bat/BatWorld.html:16
msgid ""
"For more information, you should refer to the CodingBat.com documentation, "
"which contains for example a very useful documentation on boolean operators: "
"http://codingbat.com/doc/ifboolean.html"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/AltPairs.html:1
msgid "AltPairs"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/AltPairs.html:2
msgid ""
"Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 "
"... so \"kittens\" yields \"kien\"."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/Array123.html:1
msgid "Array123"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/Array123.html:2
msgid ""
"Given an array of ints, return true if .. 1, 2, 3, .. appears in the array "
"somewhere."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/Array667.html:1
msgid "Array667"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/Array667.html:2
msgid ""
"Given an array of ints, return the number of times that two 6's are next to "
"each other in the array. Also count instances where the second \"6\" is "
"actually a 7."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/ArrayCount9.html:1
msgid "ArrayCount9"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/ArrayCount9.html:2
msgid "Given an array of ints, return the number of 9's in the array."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/ArrayFront9.html:1
msgid "ArrayFront9"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/ArrayFront9.html:2
msgid ""
"Given an array of ints, return true if one of the first 4 elements in the "
"array is a 9. The array length may be less than 4."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/FrontTimes.html:1
msgid "FrontTimes"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/FrontTimes.html:2
msgid ""
"Given a string and a non-negative int n, we'll say that the front of the "
"string is the first 3 chars, or whatever is there if the string is less than "
"length 3. Return n copies of the front;"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/Has271.html:1
msgid "Has271"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/Has271.html:2
msgid ""
"Given an array of ints, return true if it contains a 2, 7, 1 pattern -- a "
"value, followed by the value plus 5, followed by the value minus 1.  "
"Additionally the 271 counts even if the \"1\" differs by 2 or less from the "
"correct value."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/Last2.html:1
msgid "Last2"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/Last2.html:2
msgid ""
"Given a string, return the count of the number of times that a substring "
"length 2 appears in the string and also as the last 2 chars of the string, "
"so \"hixxxhi\" yields 1 (we won't count the end substring)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/Main.html:1
msgid "String fun"
msgstr ""

#. type: Content of: <p>
#: src/lessons/bat/string1/Main.html:3
msgid ""
"Strings are the simplest of the complex data types :) They provide several "
"operations, such as getting the length of the string, or a substring of it.."
msgstr ""

#. type: Content of: <p>
#: src/lessons/bat/string1/Main.html:7
msgid ""
"A very good introduction to this type is available here: "
"http://javabat.com/doc/string.html."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/NoTriples.html:1
msgid "NoTriples"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/NoTriples.html:2
msgid ""
"Given an array of ints, we'll say that a triple is a value appearing 3 times "
"in a row in the array. Return true if the array does not contain any "
"triples."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringBits.html:1
msgid "StringBits"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringBits.html:2
msgid ""
"Given a string, return a new string made of every other char starting with "
"the first, so \"Hello\" yields \"Hlo\"."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringMatch.html:1
msgid "StringMatch"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringMatch.html:2
msgid ""
"Given 2 strings, a and b, return the number of the positions where they "
"contain the same length 2 substring. So \"xxcaazz\" and \"xxbaaz\" yields 3, "
"since the \"xx\", \"aa\", and \"az\" substrings appear in the same place in "
"both strings."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringSplosion.html:1
msgid "StringSplosion"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringSplosion.html:2
msgid "Given a non-empty string like \"Code\" return a string like \"CCoCodCode\"."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringTimes.html:1
msgid "StringTimes"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringTimes.html:2
msgid ""
"Given a string and a non-negative int n, return a larger string that is n "
"copies of the original string."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringX.html:1
msgid "StringX"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringX.html:2
msgid ""
"Given a string, return a version where all the \"x\" have been "
"removed. Except an \"x\" at the very start or end should not be removed."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/bat/string1/StringYak.html:1
msgid "StringYak"
msgstr ""

#. type: Content of: outside any tag (error?)
#: src/lessons/bat/string1/StringYak.html:2
msgid ""
"Suppose the string \"yak\" is unlucky. Given a string, return a version "
"where all the \"yak\" are removed, but the \"a\" can be any char. The "
"\"yak\" strings will not overlap."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/array/IndexOfValue.html:1
msgid "Searching a given value"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:3
msgid ""
"The goal of this exercise is to search the cell of value 17 in an array, and "
"return its position."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:5
msgid ""
"To that extend, you should fill the method <code>indexOf(int[] tab, int "
"lookingFor)</code>, which parameters are the array to explore, and the value "
"to search. If the value <code>lookingFor</code> is not in the array "
"<code>tab</code>, the method should return -1."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:10
msgid ""
"The idea of the algorithm is to sweep over the whole array, checking the "
"value of each cell. If it's the searched value, you should return the index "
"of the cell currently checked."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:14
msgid ""
"The first thing to remember about arrays is that their indices begin at "
"0. So, if there is 3 cells, their indices will be 0, 1 and 2. There would "
"not be any cell numbered 3."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:18
msgid ""
"Then, remember that the amount of cells in an array can be retrieved using "
"the <code>length</code> attribute. So, if your array is called "
"<code>tab</code>, its size can be retrieved as <code>tab.length</code>.  "
"Note that there is no () after <code>length</code>. An attribute is a sort "
"of variable embedded in another object (here, the array)."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfValue.html:24
msgid "So, the last value of an array is given by <code>tab[tab.length - 1]</code>."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/array/AverageValue.html:1
msgid "Average value"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/AverageValue.html:4
msgid ""
"The objective of this exercise is to compute the average value of the "
"integer values stored in an array."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/AverageValue.html:6
msgid ""
"You have to fill the body of the method <code>average(int[] tab)</code> "
"which takes as parameter the array of integers of which it computes and "
"returns the average value. Please note that the return type of the method "
"has type <code>int</code>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/AverageValue.html:8
msgid ""
"To compute the average value of an integer, it is necessary to traverse the "
"whole array and to compute the sum of all its values (so you will need a "
"variable to store this temporary result), then you have to divide this sum "
"by the size of the array. In Java, you can get the size of an array "
"<code>myarray</code> by consulting its <code>length</code> attribute (in "
"other words, <code>myarray.length</code>)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/array/IndexOfMaxValue.html:1
msgid "Index of the maximum value"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfMaxValue.html:3
msgid ""
"In this exercise, you must compute the indice of the tab cell containing the "
"biggest value."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfMaxValue.html:5
msgid ""
"For that, fill the <code>indexOfMaximum(int[] tab)</code> method. Its "
"parameter is the array to explore. Should the array contain the searched "
"value several times, you should return the indice of the first occurrence."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/IndexOfMaxValue.html:9
msgid ""
"To solve this exercise, you should sweep over the whole array. For each "
"value, if it's bigger than the biggest value you saw so far, you must save "
"this new champion and its position.  You will thus need 2 extra variables; "
"the initial value of the champion could be the value of the first cell."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/array/MaxValue.html:1
msgid "Maximal value"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/MaxValue.html:3
msgid ""
"In this exercise, you must compute the maximal value contained in an array.  "
"For that, fill the <code>maximum(int[] tab)</code> method, which parameter "
"is the array to explore."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/MaxValue.html:7
msgid ""
"To compute this value, sweep over the whole parameter. For each value, if "
"it's bigger than the biggest value you saw so far, you must save this value "
"somewhere to remember it afterward. You thus need an extra variable, which "
"can be initialized to the value of the first array cell. Another possibility "
"is to initialize it to the smallest integer that Java knows about (which can "
"be retrieved through <code>Integer.MIN_VALUE</code>)."
msgstr ""

#. type: Content of: <h1>
#: src/lessons/welcome/array/OccurrenceOfValue.html:1
msgid "Occurrence of a value"
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/OccurrenceOfValue.html:3
msgid ""
"In this exercise, you must compute the amount of occurrences of a given "
"value in an array (that is, the amount of time that this value appears in "
"the array). For that, fill the <code>occurrences(int[] tab, int "
"lookingFor)</code> method, which returns the number of occurrence of "
"<code>lookingFor</code> in <code>tab</code>."
msgstr ""

#. type: Content of: <p>
#: src/lessons/welcome/array/OccurrenceOfValue.html:8
msgid ""
"To compute this value, simply sweep over the array counting for the amount "
"of cells containing the searched value. You thus need an extra variable for "
"that."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:1 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:1 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:1 src/lessons/smn/pancake/raw/RawPancakePlate.html:1
msgid "PancakeWorld"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:3
msgid "Functions provided :"
msgstr ""

#. type: Content of: <div><p><pre>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:5 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:6 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:11 src/lessons/smn/pancake/raw/RawPancakePlate.html:12
#, no-wrap
msgid "int getStackSize()"
msgstr ""

#. type: Content of: <div><p>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:7 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:8 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:13 src/lessons/smn/pancake/raw/RawPancakePlate.html:14
msgid ""
"Returns the size of the stack, in other words the amount of pancakes it "
"contains."
msgstr ""

#. type: Content of: <div><p><pre>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:9 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:10 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:15 src/lessons/smn/pancake/raw/RawPancakePlate.html:16
#, no-wrap
msgid "int getPancakeRadius(int pancakeNumber)"
msgstr ""

#. type: Content of: <div><p>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:11 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:12 src/lessons/smn/pancake/raw/RawPancakePlate.html:18
msgid "Returns the radius of the pancake you gave in argument."
msgstr ""

#. type: Content of: <div><p><pre>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:13 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:19
#, no-wrap
msgid "boolean isPancakeUpsideDown(int pancakeNumber)"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:15
msgid ""
"Returns true if the burned side of the pancake you gave in argument is up, "
"false if not."
msgstr ""

#. type: Content of: <div><p><pre>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:17 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:14 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:23 src/lessons/smn/pancake/raw/RawPancakePlate.html:20
#, no-wrap
msgid "void flip(int numberOfPancakes)"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:19
msgid ""
"Flips the <code>numberOfPancakes</code>code> first pancakes composing the "
"stack, from the top of it."
msgstr ""

#. type: Content of: <div><pre>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:21 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:18
#, no-wrap
msgid "boolean isSorted()"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/pancake/burned/PancakeWorld.html:23 src/jlm/universe/smn/pancake/raw/PancakeWorld.html:20
msgid ""
"Tells if the stack of pancakes is correctly sorted according to the control "
"freak pancake seller"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/pancake/raw/PancakeWorld.html:4
msgid "Function provided:"
msgstr ""

#. type: Content of: <div><p>
#: src/jlm/universe/smn/pancake/raw/PancakeWorld.html:16 src/lessons/smn/pancake/burned/BurnedPancakePlate.html:25 src/lessons/smn/pancake/raw/RawPancakePlate.html:22
msgid ""
"Flips the <code>numberOfPancakes</code> first pancakes composing the stack, "
"from the top of it."
msgstr ""

#. type: Content of: <h1>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:1 src/lessons/smn/baseball/BaseballGame.html:1 src/lessons/smn/baseball/BaseballGameMorePlayers.html:1
msgid "Baseball"
msgstr ""

#. type: Content of: <p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:3
msgid ""
"The color of a base is given by its index.  The hole has a color of -1.  The "
"base which has only one player on the field has <i>getAmountOfBases()-1</i> "
"as index"
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:10
msgid "<u>Functions provided:</u>"
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:12 src/lessons/smn/baseball/BaseballGame.html:25 src/lessons/smn/baseball/BaseballGameMorePlayers.html:39
#, no-wrap
msgid "void move(int baseSrc, int playerSrc)"
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:14 src/lessons/smn/baseball/BaseballGame.html:27 src/lessons/smn/baseball/BaseballGameMorePlayers.html:41
msgid ""
"Move the player on position <code>playerLocation</code> from the base "
"<code>baseSrc</code> to the hole."
msgstr ""

#. type: Content of: <div><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:16
#, no-wrap
msgid " int getPlayerColor(int baseIndex, int playerLocation) "
msgstr ""

#. type: Content of: <div>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:18
msgid ""
"Return the color of the player on position <code>playerLocation</code> ( 0 "
"or 1 ) from the base <code>baseIndex</code>."
msgstr ""

#. type: Content of: <div><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:20
#, no-wrap
msgid " int getHoleBase() "
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:22 src/lessons/smn/baseball/BaseballGame.html:36 src/lessons/smn/baseball/BaseballGameMorePlayers.html:50
msgid "Return the index of the base where the hole is located"
msgstr ""

#. type: Content of: <div><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:24
#, no-wrap
msgid " int getHolePositionInBase()"
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:26 src/lessons/smn/baseball/BaseballGame.html:40 src/lessons/smn/baseball/BaseballGameMorePlayers.html:54
msgid "Return the player's position in the base where the hole is located"
msgstr ""

#. type: Content of: <div><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:28
#, no-wrap
msgid " boolean isBaseSorted( int baseIndex)"
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:30 src/lessons/smn/baseball/BaseballGame.html:44 src/lessons/smn/baseball/BaseballGameMorePlayers.html:58
msgid "Return TRUE if all players of the base <code>baseSrc</code> are home"
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:32 src/lessons/smn/baseball/BaseballGame.html:46 src/lessons/smn/baseball/BaseballGameMorePlayers.html:60
#, no-wrap
msgid "int getAmountOfBases()"
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:34 src/lessons/smn/baseball/BaseballGame.html:48 src/lessons/smn/baseball/BaseballGameMorePlayers.html:62
msgid "Return the amount of bases in the field."
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:36 src/lessons/smn/baseball/BaseballGameMorePlayers.html:65
#, no-wrap
msgid "int getLocationsAmount()"
msgstr ""

#. type: Content of: <p><div><p>
#: src/jlm/universe/smn/baseball/BaseballWorld.html:38 src/lessons/smn/baseball/BaseballGameMorePlayers.html:67
msgid "Return the amount of players locations available on each base of the field"
msgstr ""

#. type: Content of: <h1>
#: src/lessons/smn/Main.html:1
msgid "Computer Science in Real Life"
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/Main.html:3
msgid "Few activities developped for Computer Science in Real Life"
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/pancake/burned/BurnedPancakePlate.html:3
msgid ""
"This world implements the control freak pancake seller problem, who wants "
"his pancakes to be sorted on their plate from the biggest to the smallest, "
"with the most burned face downside, so that we cannot see it."
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/pancake/burned/BurnedPancakePlate.html:5 src/lessons/smn/pancake/raw/RawPancakePlate.html:6
msgid ""
"You are asked to resort a pancakes stack to make him happy. Since it is "
"obviously forbidden to place a pancake on the dirty table, the only allowed "
"action is to flip one or more pancakes on the top of the stack.  A pancake "
"is defined by its radius and position on the stack, from the top to the "
"bottom. These characteristics are positive integers."
msgstr ""

#. type: Content of: <div>
#: src/lessons/smn/pancake/burned/BurnedPancakePlate.html:9
msgid "Only four functions are provided :"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/pancake/burned/BurnedPancakePlate.html:17
msgid "Returns the radius of the pancake <code>pancakeNumber</code>."
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/pancake/burned/BurnedPancakePlate.html:21
msgid ""
"Returns true if the burned side of the pancake <code>pancakeNumber</code> is "
"up, false if not."
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/pancake/raw/RawPancakePlate.html:3
msgid ""
"This world implements the control freak pancake seller problem, who wants "
"his pancakes to be sorted on their plate from the biggest to the smallest."
msgstr ""

#. type: Content of: <div>
#: src/lessons/smn/pancake/raw/RawPancakePlate.html:10
msgid "Only three functions are provided :"
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/baseball/BaseballGame.html:3
msgid ""
"This world implements the baseball game, in which several players want to go "
"back to their bases. The bases make a circle and have their own "
"colors. There are two players for one base, except one, which has only one "
"player in its team.  You are asked to make the players go on the bases which "
"colors correspond to theirs. The only allowed move is for one of the two "
"players standing on one of the two bases which are directly next to the base "
"with only one player to move and fill the hole, leaving a new one on the "
"base it just left."
msgstr ""

#. type: Content of: <p><p>
#: src/lessons/smn/baseball/BaseballGame.html:8 src/lessons/smn/baseball/BaseballGameMorePlayers.html:19
msgid "Memento:"
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/smn/baseball/BaseballGame.html:11 src/lessons/smn/baseball/BaseballGameMorePlayers.html:25
msgid "The color of a base is given by its index."
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/smn/baseball/BaseballGame.html:14 src/lessons/smn/baseball/BaseballGameMorePlayers.html:28
msgid "The hole has a color of -1."
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/smn/baseball/BaseballGame.html:17 src/lessons/smn/baseball/BaseballGameMorePlayers.html:31
msgid ""
"The base which has only one player on the field has "
"<i>getAmountOfBases()-1</i> as index"
msgstr ""

#. type: Content of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:23
msgid "There are six methods provided :"
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/lessons/smn/baseball/BaseballGame.html:29 src/lessons/smn/baseball/BaseballGameMorePlayers.html:43
#, no-wrap
msgid "int getPlayerColor(int baseIndex, int playerLocation) "
msgstr ""

#. type: Content of: <p><div><p>
#: src/lessons/smn/baseball/BaseballGame.html:31 src/lessons/smn/baseball/BaseballGameMorePlayers.html:45
msgid ""
"Return the color of the player on position <code>playerLocation</code> ( 0 "
"or 1 ) from the base <code>baseIndex</code>.  The color -1 is the hole."
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/lessons/smn/baseball/BaseballGame.html:34 src/lessons/smn/baseball/BaseballGameMorePlayers.html:48
#, no-wrap
msgid "int getHoleBase() "
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/lessons/smn/baseball/BaseballGame.html:38 src/lessons/smn/baseball/BaseballGameMorePlayers.html:52
#, no-wrap
msgid "int getHolePositionInBase()"
msgstr ""

#. type: Content of: <p><div><p><pre>
#: src/lessons/smn/baseball/BaseballGame.html:42 src/lessons/smn/baseball/BaseballGameMorePlayers.html:56
#, no-wrap
msgid "boolean isBaseSorted( int baseIndex)"
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:53
msgid "Show Tip 1 ( the methods's prototype)"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/baseball/BaseballGame.html:54
msgid "The prototypes of the methods you may use are the followings :"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:58
msgid ""
"private void bringPlayerHome(int baseSrc, int playerSrc, int baseDst, int "
"playerDst) throws InvalidMoveException"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:60
msgid ""
"Move the player in position <code>playerSrc</code> of the base "
"<code>baseSrc</code> to the position <code>playerDst</code> from the base "
"<code>baseDst</code>"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:62
msgid ""
"private int[] findNearestPlayer(int colorWanted, int firstBaseToSearch ) "
"throws InvalidPositionException"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:64
msgid ""
"Return the base's number and the position of the nearest player which "
"has<code>colorWanted</code> as color. It begins the search at the base "
"<code>firstBaseToSearch</code>"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:66
msgid ""
"private void bringHole(int baseDst, int playerDst , int playerToProtect) "
"throws InvalidMoveException"
msgstr ""

#. type: Content of: <div><pre><p>
#: src/lessons/smn/baseball/BaseballGame.html:68
msgid ""
"Bring the hole to the position <code>playerDst</code> from the base "
"<code>baseDst</code> while protecting the position "
"<code>playerToProtect</code> during the travel"
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:75
msgid "Show Tip 2 (Pseudo-code of solve)"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/baseball/BaseballGame.html:76
msgid "The algorithm of the solve method is the following:"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/smn/baseball/BaseballGame.html:78
#, no-wrap
msgid ""
"BEGIN\n"
"\tcolorWanted &lt;- getBaseColor(baseIndex)\n"
"\tIF getPlayerColor(baseIndex, 0) != colorWanted \n"
"\tTHEN\n"
"\t\tIF getPlayerColor(baseIndex,1) == colorWanted\n"
"\t\tTHEN\n"
"\t\t\tbringHole(baseIndex, 0, 1)\n"
"\t\t\tmove(baseIndex, 1)\n"
"\t\tELSE\n"
"\t\t\twantedPlayerLocation &lt;- findNearestPlayer(colorWanted, baseIndex+1 "
")\n"
"\t\t\tbringHole( wantedPlayerLocation[0]-1 , 0,wantedPlayerLocation[1] )\n"
"\t\t\tbringPlayerHome(wantedPlayerLocation[0], wantedPlayerLocation[1], "
"baseIndex,0)\n"
"\t\tEND_IF\n"
"\tEND_IF\n"
"\tIF getPlayerColor(baseIndex, 1) != colorWanted \n"
"\tTHEN\n"
"\t\twantedPlayerLocation &lt;- this.findNearestPlayer(colorWanted, "
"baseIndex+1)\n"
"\t\tbringHole( wantedPlayerLocation[0]-1 , 1 , wantedPlayerLocation[1] )\n"
"\t\tbringPlayerHome( wantedPlayerLocation[0] , wantedPlayerLocation[1] , "
"baseIndex , 1 )\n"
"\tEND_IF\n"
"END\n"
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:104
msgid "Show Tip 3 ( Pseudo-code of bringHole )"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/baseball/BaseballGame.html:105
msgid "The algorithm of the bringHole method is the following:"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/smn/baseball/BaseballGame.html:107
#, no-wrap
msgid ""
"BEGIN\n"
"\tholeBaseLocation[0] &lt;- getHoleBase()\n"
"\tholeBaseLocation[1] &lt;- getHolePositionInBase()\n"
"\tIF baseDst > holeLocation[0]\n"
"\tTHEN\n"
"\t\tFOR i FROM holeLocation[0]+1 TO baseDst BY 1\n"
"\t\tDO\n"
"\t\t\tmove(i, playerDst)\n"
"\t\tEND_FOR\n"
"\tELSE \n"
"\t\tIF baseDst &lt; holeLocation[0]\n"
"\t\tTHEN\n"
"\t\t\tFOR i FROM holeLocation[0]-1 DOWNTO baseDst+1 BY -1\n"
"\t\t\tDO\n"
"\t\t\t\tmove(i,1-playerToProtect)\n"
"\t\t\tEND_FOR\n"
"\t\t\tmove(baseDst,playerDst);\n"
"\t\tELSE \n"
"\t\t\tIF baseDst == holeLocation[0] AND playerDst != holeLocation[1]\n"
"\t\t\tTHEN\n"
"\t\t\t\tmove(baseDst,playerDst);\n"
"\t\t\tEND_IF\n"
"\t\tEND_IF\n"
"\tEND_IF\n"
"END\n"
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:137
msgid "Show Tip 4 ( Pseudo-code of findNearestPlayer)"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/baseball/BaseballGame.html:138
msgid "The algorithm of the findNearestPlayer method is the following :"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/smn/baseball/BaseballGame.html:140
#, no-wrap
msgid ""
"BEGIN\n"
"\tnbBases &lt;- getAmountOfBases()\n"
"\tfound &lt;- false;\n"
"\ti &lt;- firstBaseToSearch\n"
"\tWHILE i &lt; nbBases AND !found\n"
"\tDO\n"
"\t\tFOR j FROM 0 TO 1 BY 1\n"
"\t\tDO\n"
"\t\t\tIF getPlayerColor(i, j)== colorWanted AND !found\n"
"\t\t\tTHEN\n"
"\t\t\t\tlocation[0] &lt;- i;\n"
"\t\t\t\tlocation[1] &lt;- j;\n"
"\t\t\t\tfound &lt;- true;\n"
"\t\t\tEND_IF\n"
"\t\tEND_FOR\n"
"\t\ti &lt;- i+1\n"
"\tEND_WHILE\n"
"\tRETURN location\n"
"END\n"
msgstr ""

#. type: Attribute 'alt' of: <div>
#: src/lessons/smn/baseball/BaseballGame.html:162
msgid "Show tip 5 ( Pseudo-code of bringPlayerHome)"
msgstr ""

#. type: Content of: <div><p>
#: src/lessons/smn/baseball/BaseballGame.html:163
msgid "The algorithm of the bringPlayerHome method is the following :"
msgstr ""

#. type: Content of: <div><pre>
#: src/lessons/smn/baseball/BaseballGame.html:165
#, no-wrap
msgid ""
"PRECONDITION: the hole is on the base of index baseSrc-1\n"
"BEGIN\n"
"\t\tmove( baseSrc,playerSrc)\n"
"\t\tFOR i FROM baseSrc-1 DOWNTO baseDst+1 BY -1\n"
"\t\tDO\n"
"\t\t\tmove(i,1-playerDst)\n"
"\t\t\tmove(i-1,playerDst)\n"
"\t\t\tmove(i,playerDst)\n"
"\t\tEND_FOR\n"
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:3
msgid ""
"Like the previous world, this world implements a baseball world. But now, "
"you have more than two players on each base.  Like before, your mission is "
"to bring everyone home."
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:7
msgid ""
"This exercise is trying to show you one thing : you have to do a change that "
"you haven't anticipated, and you need to make this change without breaking "
"your code and without changing too many thing, because the algorithm is "
"still great."
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:11
msgid ""
"The previous algorithm was only able to deal with two players per base, you "
"have to change it so you can handle n players per base, with n greater or "
"equals at two."
msgstr ""

#. type: Content of: <p>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:15
msgid ""
"You can be wondering why you didn't have to write directly an flawless "
"algorithm. It's just that sometimes, it's way too hard.  Sometimes, you just "
"need to take a particular case and generalize your solution. It's sometimes "
"easier to generalize than to try to find a general algorithm from "
"scratch. Remember that improving is way more easier than creating."
msgstr ""

#. type: Content of: <p><p><ul><li>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:22
msgid ""
"You can have access to the number of locations available on each base by "
"using the getLocationsAmount() method."
msgstr ""

#. type: Content of: <p><div>
#: src/lessons/smn/baseball/BaseballGameMorePlayers.html:37
msgid "There are seven methods provided :"
msgstr ""
